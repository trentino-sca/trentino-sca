#**********************************************************************************
#generated by Trengen
#**********************************************************************************

cmake_minimum_required(VERSION 2.6)
project(ValidContribution1Gen)

#---------------------------
# MY_FIND_BOOST_LIBRARY
#---------------------------
#Finds boost libraries in trentino's lib directory.
#On Windows boost lib's file names are decorated. For example: 
#boost_date_time-vc90-mt-1_44 (release) or boost_date_time-vc90-mt-gd-1_44 (debug)
#Hence this macro expects and accepts only multithreaded variants for MSVC 2008
#with version 1.44 (=>TODO)
#---------------------------
macro(MY_GET_BOOST_LIBRARY_NAME var baseLibName buildType)		 
	set(realLibName ${baseLibName})
	set (MYBOOST_VERSION ".1.44.0")
	if(WIN32)		
		if(MSVC10)
			set(msvcVersion "100")
		elseif(MSVC90)
			set(msvcVersion "90")
		endif()
		set(realLibName ${realLibName}-vc${msvcVersion}-mt)
		if(${buildType} STREQUAL "debug")
			set(realLibName ${realLibName}-gd)
		endif()
		set(realLibName ${realLibName}-1_44)
	else()
	    set(realLibName lib${realLibName}${CMAKE_SHARED_LIBRARY_SUFFIX}${MYBOOST_VERSION})
	endif()
    set(${var} ${realLibName})		
endmacro(MY_GET_BOOST_LIBRARY_NAME)

#----------------------------------
# MAKE_DLL_NAME
#----------------------------------
#Replaces the file extension of the given library file path with
#the os specific shared/dynamic library extension
#---------------------------------
macro(MAKE_DLL_NAME libraryFilePath dllFilePath)
	get_filename_component(libraryPath ${libraryFilePath} PATH)
	get_filename_component(libraryFileName ${libraryFilePath} NAME_WE)	
	set(${dllFilePath} ${libraryPath}/${libraryFileName}${CMAKE_SHARED_LIBRARY_SUFFIX} CACHE PATH "")		
endmacro(MAKE_DLL_NAME)

#----------------------------------
# MY_FIND_LIBRARY
#----------------------------------
#Searches a library in the specified path and prints an error message on failure
#used by MY_FIND_* macros contained in the corresponding my_find_*.cmake files
#---------------------------
macro(MY_FIND_LIBRARY var lib path)
	find_library(${var} ${lib} PATHS ${path})	
	if(NOT ${var})		
		message(SEND_ERROR "Library ${var} ${lib} ${path} not found")
	endif()
endmacro(MY_FIND_LIBRARY)



##############################################################################
# 								COMPILER OPTIONS  							 #
##############################################################################
if(MSVC)
	add_definitions(-DUNICODE -D_UNICODE)
	add_definitions(/W4)
	add_definitions(/WX)
    add_definitions(/wd4251)
    add_definitions(/wd4275)
else()
	add_definitions(-Wall -pedantic)
endif()

##############################################################################
# 							   OUTPUT CONFIGURATION						     #
##############################################################################

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME} )
set(Contribution_Dir I:/Trentino/trentino/DEV/cpp/src/Tests/CoreTest/TestData/ValidContribution1)
set(Include_Dir I:/Trentino/trentino/DEV/cpp/src/Tests/CoreTest/TestData/ValidContribution1)
set(TRENTINO_RUNTIME_DIR I:/Trentino/trentino/DEV/java/dist/.)
set(TRENTINO_LIB_DIR I:/Trentino/trentino/DEV/java/dist/./lib)
set (DEFAULT_INSTALL_PATH I:/Trentino/trentino/DEV/cpp/src/Tests/CoreTest/TestData)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set (CMAKE_INSTALL_PREFIX I:/Trentino/trentino/DEV/cpp/src/Tests/CoreTest/TestData CACHE STRING "Install path" FORCE)
endif()
set(buildtype debug)
set(boost_folder_with_version boost_1_44)
set(TRENTINO_BOOST_LIB_DIR_RELEASE ${TRENTINO_LIB_DIR}/${boost_folder_with_version}/release)
set(TRENTINO_BOOST_LIB_DIR_DEBUG ${TRENTINO_LIB_DIR}/${boost_folder_with_version}/debug)
MY_GET_BOOST_LIBRARY_NAME(Boost_SYSTEM_LIBRARY boost_system	debug)
#MY_FIND_BOOST_LIBRARY(Boost_PROGRAM_OPTIONS_RELEASE boost_program_options	release)


set(PName ValidContribution1Gen )
#header files
FILE(GLOB ${PName}HEADER_FILES *.h *.inl)	  

#source files
FILE(GLOB ${PName}SOURCE_FILES *.cpp)	  

set ( ${PName}SOURCE_FILES
	  ${${PName}HEADER_FILES} ${${PName}SOURCE_FILES})  


	  
#libs
set( ${PName}THIRD_PARTY_LIBS
     TrentinoRuntime ValidContribution1 TrentinoBindingSCA libprotobuf-lite ${Boost_SYSTEM_LIBRARY}
    # ${Boost_PROGRAM_OPTIONS_RELEASE}
     )
	 
set( ${PName}CUSTOM_LIBS )


if (WIN32)
	add_definitions(-DVALIDCONTRIBUTION1GEN_EXPORTS)
endif()

include_directories(${TRENTINO_RUNTIME_DIR}/include
                    ${TRENTINO_RUNTIME_DIR}/include/Binding/SCA 
					${TRENTINO_RUNTIME_DIR}/include/protobuf-2.4.1/include
                    ${Contribution_Dir} 
                    ${Contribution_Dir}/services 
                    ${Contribution_Dir}/include ${Include_Dir}
                    )
link_directories(${TRENTINO_RUNTIME_DIR}/lib ${TRENTINO_RUNTIME_DIR}/lib/protobuf-2.4.1/${buildType} ${TRENTINO_RUNTIME_DIR}/lib/boost_1_44/${buildType} ${Contribution_Dir} ${Contribution_Dir}/lib 
                  )

add_library(${PName} SHARED ${${PName}SOURCE_FILES})
set_target_properties(${PName} PROPERTIES OUTPUT_NAME sca-contribution)

set(target_location "")
set(target_path "")
#set(target_file_name "")
get_target_property(target_location ${PName} LOCATION)

get_filename_component(target_path ${target_location} PATH)
set(new_path ${target_path}/${PName}/META-INF)
#get_filename_component(target_file_name ${target_location}
add_custom_command( TARGET ${PName} POST_BUILD
					COMMAND  ${CMAKE_COMMAND} -E make_directory ${new_path}
					COMMAND ${CMAKE_COMMAND} -E copy ${target_location} ${new_path} 
					VERBATIM)

target_link_libraries(${PName} ${${PName}CUSTOM_LIBS})
target_link_libraries(${PName} ${${PName}THIRD_PARTY_LIBS})
set(MY_GEN_INSTALL_DIR ValidContribution1)
install(TARGETS ${PName}  ${DLL_TARGET_KIND} DESTINATION ${MY_GEN_INSTALL_DIR}/META-INF ARCHIVE DESTINATION ${TARGET_LIB_DIR})
install(FILES sca-contribution.conf DESTINATION ${MY_GEN_INSTALL_DIR}/META-INF)