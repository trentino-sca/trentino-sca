// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrentinoExampleBasicPrinterTypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace Trentino {
namespace Example {
namespace BasicPrinter {

void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto() {
  delete PB_ValidationException::default_instance_;
  delete PB_Address::default_instance_;
  delete PB_TupleComplexNumber::default_instance_;
  delete PB_Phone::default_instance_;
  delete PB_Person::default_instance_;
  delete PB_ComplexNumber::default_instance_;
}

void protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  PB_ValidationException::default_instance_ = new PB_ValidationException();
  PB_Address::default_instance_ = new PB_Address();
  PB_TupleComplexNumber::default_instance_ = new PB_TupleComplexNumber();
  PB_Phone::default_instance_ = new PB_Phone();
  PB_Person::default_instance_ = new PB_Person();
  PB_ComplexNumber::default_instance_ = new PB_ComplexNumber();
  PB_ValidationException::default_instance_->InitAsDefaultInstance();
  PB_Address::default_instance_->InitAsDefaultInstance();
  PB_TupleComplexNumber::default_instance_->InitAsDefaultInstance();
  PB_Phone::default_instance_->InitAsDefaultInstance();
  PB_Person::default_instance_->InitAsDefaultInstance();
  PB_ComplexNumber::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrentinoExampleBasicPrinterTypes_2eproto {
  StaticDescriptorInitializer_TrentinoExampleBasicPrinterTypes_2eproto() {
    protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  }
} static_descriptor_initializer_TrentinoExampleBasicPrinterTypes_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PB_ValidationException::kDetailsFieldNumber;
#endif  // !_MSC_VER

PB_ValidationException::PB_ValidationException()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PB_ValidationException::InitAsDefaultInstance() {
}

PB_ValidationException::PB_ValidationException(const PB_ValidationException& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ValidationException::SharedCtor() {
  _cached_size_ = 0;
  details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ValidationException::~PB_ValidationException() {
  SharedDtor();
}

void PB_ValidationException::SharedDtor() {
  if (details_ != &::google::protobuf::internal::kEmptyString) {
    delete details_;
  }
  if (this != default_instance_) {
  }
}

void PB_ValidationException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PB_ValidationException& PB_ValidationException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();  return *default_instance_;
}

PB_ValidationException* PB_ValidationException::default_instance_ = NULL;

PB_ValidationException* PB_ValidationException::New() const {
  return new PB_ValidationException;
}

void PB_ValidationException::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_details()) {
      if (details_ != &::google::protobuf::internal::kEmptyString) {
        details_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PB_ValidationException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string details = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ValidationException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string details = 1;
  if (has_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->details(), output);
  }
  
}

int PB_ValidationException::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string details = 1;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->details());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ValidationException::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PB_ValidationException*>(&from));
}

void PB_ValidationException::MergeFrom(const PB_ValidationException& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_details()) {
      set_details(from.details());
    }
  }
}

void PB_ValidationException::CopyFrom(const PB_ValidationException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ValidationException::IsInitialized() const {
  
  return true;
}

void PB_ValidationException::Swap(PB_ValidationException* other) {
  if (other != this) {
    std::swap(details_, other->details_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PB_ValidationException::GetTypeName() const {
  return "protobuf.Trentino.Example.BasicPrinter.PB_ValidationException";
}


// ===================================================================

#ifndef _MSC_VER
const int PB_Address::kStreetFieldNumber;
const int PB_Address::kPhoneFieldNumber;
#endif  // !_MSC_VER

PB_Address::PB_Address()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PB_Address::InitAsDefaultInstance() {
  phone_ = const_cast< ::protobuf::Trentino::Example::BasicPrinter::PB_Phone*>(&::protobuf::Trentino::Example::BasicPrinter::PB_Phone::default_instance());
}

PB_Address::PB_Address(const PB_Address& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PB_Address::SharedCtor() {
  _cached_size_ = 0;
  street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_Address::~PB_Address() {
  SharedDtor();
}

void PB_Address::SharedDtor() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (this != default_instance_) {
    delete phone_;
  }
}

void PB_Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PB_Address& PB_Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();  return *default_instance_;
}

PB_Address* PB_Address::default_instance_ = NULL;

PB_Address* PB_Address::New() const {
  return new PB_Address;
}

void PB_Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_street()) {
      if (street_ != &::google::protobuf::internal::kEmptyString) {
        street_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != NULL) phone_->::protobuf::Trentino::Example::BasicPrinter::PB_Phone::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PB_Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string street = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_street()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }
      
      // optional .protobuf.Trentino.Example.BasicPrinter.PB_Phone phone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string street = 1;
  if (has_street()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->street(), output);
  }
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_Phone phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->phone(), output);
  }
  
}

int PB_Address::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string street = 1;
    if (has_street()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->street());
    }
    
    // optional .protobuf.Trentino.Example.BasicPrinter.PB_Phone phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phone());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_Address::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PB_Address*>(&from));
}

void PB_Address::MergeFrom(const PB_Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_street()) {
      set_street(from.street());
    }
    if (from.has_phone()) {
      mutable_phone()->::protobuf::Trentino::Example::BasicPrinter::PB_Phone::MergeFrom(from.phone());
    }
  }
}

void PB_Address::CopyFrom(const PB_Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Address::IsInitialized() const {
  
  return true;
}

void PB_Address::Swap(PB_Address* other) {
  if (other != this) {
    std::swap(street_, other->street_);
    std::swap(phone_, other->phone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PB_Address::GetTypeName() const {
  return "protobuf.Trentino.Example.BasicPrinter.PB_Address";
}


// ===================================================================

#ifndef _MSC_VER
const int PB_TupleComplexNumber::kAFieldNumber;
const int PB_TupleComplexNumber::kBFieldNumber;
#endif  // !_MSC_VER

PB_TupleComplexNumber::PB_TupleComplexNumber()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PB_TupleComplexNumber::InitAsDefaultInstance() {
  a_ = const_cast< ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber*>(&::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::default_instance());
  b_ = const_cast< ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber*>(&::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::default_instance());
}

PB_TupleComplexNumber::PB_TupleComplexNumber(const PB_TupleComplexNumber& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PB_TupleComplexNumber::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_TupleComplexNumber::~PB_TupleComplexNumber() {
  SharedDtor();
}

void PB_TupleComplexNumber::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void PB_TupleComplexNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PB_TupleComplexNumber& PB_TupleComplexNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();  return *default_instance_;
}

PB_TupleComplexNumber* PB_TupleComplexNumber::default_instance_ = NULL;

PB_TupleComplexNumber* PB_TupleComplexNumber::New() const {
  return new PB_TupleComplexNumber;
}

void PB_TupleComplexNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_a()) {
      if (a_ != NULL) a_->::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PB_TupleComplexNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }
      
      // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_TupleComplexNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->a(), output);
  }
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->b(), output);
  }
  
}

int PB_TupleComplexNumber::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }
    
    // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_TupleComplexNumber::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PB_TupleComplexNumber*>(&from));
}

void PB_TupleComplexNumber::MergeFrom(const PB_TupleComplexNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::MergeFrom(from.b());
    }
  }
}

void PB_TupleComplexNumber::CopyFrom(const PB_TupleComplexNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_TupleComplexNumber::IsInitialized() const {
  
  return true;
}

void PB_TupleComplexNumber::Swap(PB_TupleComplexNumber* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PB_TupleComplexNumber::GetTypeName() const {
  return "protobuf.Trentino.Example.BasicPrinter.PB_TupleComplexNumber";
}


// ===================================================================

#ifndef _MSC_VER
const int PB_Phone::kHomeFieldNumber;
const int PB_Phone::kMobileFieldNumber;
#endif  // !_MSC_VER

PB_Phone::PB_Phone()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PB_Phone::InitAsDefaultInstance() {
}

PB_Phone::PB_Phone(const PB_Phone& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PB_Phone::SharedCtor() {
  _cached_size_ = 0;
  home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_Phone::~PB_Phone() {
  SharedDtor();
}

void PB_Phone::SharedDtor() {
  if (home_ != &::google::protobuf::internal::kEmptyString) {
    delete home_;
  }
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_;
  }
  if (this != default_instance_) {
  }
}

void PB_Phone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PB_Phone& PB_Phone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();  return *default_instance_;
}

PB_Phone* PB_Phone::default_instance_ = NULL;

PB_Phone* PB_Phone::New() const {
  return new PB_Phone;
}

void PB_Phone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_home()) {
      if (home_ != &::google::protobuf::internal::kEmptyString) {
        home_->clear();
      }
    }
    if (has_mobile()) {
      if (mobile_ != &::google::protobuf::internal::kEmptyString) {
        mobile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PB_Phone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string home = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mobile;
        break;
      }
      
      // optional string mobile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_Phone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string home = 1;
  if (has_home()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->home(), output);
  }
  
  // optional string mobile = 2;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mobile(), output);
  }
  
}

int PB_Phone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string home = 1;
    if (has_home()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home());
    }
    
    // optional string mobile = 2;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_Phone::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PB_Phone*>(&from));
}

void PB_Phone::MergeFrom(const PB_Phone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_home()) {
      set_home(from.home());
    }
    if (from.has_mobile()) {
      set_mobile(from.mobile());
    }
  }
}

void PB_Phone::CopyFrom(const PB_Phone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Phone::IsInitialized() const {
  
  return true;
}

void PB_Phone::Swap(PB_Phone* other) {
  if (other != this) {
    std::swap(home_, other->home_);
    std::swap(mobile_, other->mobile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PB_Phone::GetTypeName() const {
  return "protobuf.Trentino.Example.BasicPrinter.PB_Phone";
}


// ===================================================================

#ifndef _MSC_VER
const int PB_Person::kAddresFieldNumber;
const int PB_Person::kNameFieldNumber;
const int PB_Person::kSurnameFieldNumber;
const int PB_Person::kMotherFieldNumber;
#endif  // !_MSC_VER

PB_Person::PB_Person()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PB_Person::InitAsDefaultInstance() {
  addres_ = const_cast< ::protobuf::Trentino::Example::BasicPrinter::PB_Address*>(&::protobuf::Trentino::Example::BasicPrinter::PB_Address::default_instance());
  mother_ = const_cast< ::protobuf::Trentino::Example::BasicPrinter::PB_Person*>(&::protobuf::Trentino::Example::BasicPrinter::PB_Person::default_instance());
}

PB_Person::PB_Person(const PB_Person& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PB_Person::SharedCtor() {
  _cached_size_ = 0;
  addres_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mother_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_Person::~PB_Person() {
  SharedDtor();
}

void PB_Person::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (surname_ != &::google::protobuf::internal::kEmptyString) {
    delete surname_;
  }
  if (this != default_instance_) {
    delete addres_;
    delete mother_;
  }
}

void PB_Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PB_Person& PB_Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();  return *default_instance_;
}

PB_Person* PB_Person::default_instance_ = NULL;

PB_Person* PB_Person::New() const {
  return new PB_Person;
}

void PB_Person::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addres()) {
      if (addres_ != NULL) addres_->::protobuf::Trentino::Example::BasicPrinter::PB_Address::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_surname()) {
      if (surname_ != &::google::protobuf::internal::kEmptyString) {
        surname_->clear();
      }
    }
    if (has_mother()) {
      if (mother_ != NULL) mother_->::protobuf::Trentino::Example::BasicPrinter::PB_Person::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PB_Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.Trentino.Example.BasicPrinter.PB_Address addres = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_surname;
        break;
      }
      
      // optional string surname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_surname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_surname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mother;
        break;
      }
      
      // optional .protobuf.Trentino.Example.BasicPrinter.PB_Person mother = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mother:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mother()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_Address addres = 1;
  if (has_addres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->addres(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string surname = 3;
  if (has_surname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->surname(), output);
  }
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_Person mother = 4;
  if (has_mother()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->mother(), output);
  }
  
}

int PB_Person::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.Trentino.Example.BasicPrinter.PB_Address addres = 1;
    if (has_addres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addres());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string surname = 3;
    if (has_surname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->surname());
    }
    
    // optional .protobuf.Trentino.Example.BasicPrinter.PB_Person mother = 4;
    if (has_mother()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mother());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_Person::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PB_Person*>(&from));
}

void PB_Person::MergeFrom(const PB_Person& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addres()) {
      mutable_addres()->::protobuf::Trentino::Example::BasicPrinter::PB_Address::MergeFrom(from.addres());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_surname()) {
      set_surname(from.surname());
    }
    if (from.has_mother()) {
      mutable_mother()->::protobuf::Trentino::Example::BasicPrinter::PB_Person::MergeFrom(from.mother());
    }
  }
}

void PB_Person::CopyFrom(const PB_Person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_Person::IsInitialized() const {
  
  return true;
}

void PB_Person::Swap(PB_Person* other) {
  if (other != this) {
    std::swap(addres_, other->addres_);
    std::swap(name_, other->name_);
    std::swap(surname_, other->surname_);
    std::swap(mother_, other->mother_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PB_Person::GetTypeName() const {
  return "protobuf.Trentino.Example.BasicPrinter.PB_Person";
}


// ===================================================================

#ifndef _MSC_VER
const int PB_ComplexNumber::kAFieldNumber;
const int PB_ComplexNumber::kBFieldNumber;
#endif  // !_MSC_VER

PB_ComplexNumber::PB_ComplexNumber()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PB_ComplexNumber::InitAsDefaultInstance() {
}

PB_ComplexNumber::PB_ComplexNumber(const PB_ComplexNumber& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PB_ComplexNumber::SharedCtor() {
  _cached_size_ = 0;
  a_ = 0;
  b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PB_ComplexNumber::~PB_ComplexNumber() {
  SharedDtor();
}

void PB_ComplexNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PB_ComplexNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PB_ComplexNumber& PB_ComplexNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();  return *default_instance_;
}

PB_ComplexNumber* PB_ComplexNumber::default_instance_ = NULL;

PB_ComplexNumber* PB_ComplexNumber::New() const {
  return new PB_ComplexNumber;
}

void PB_ComplexNumber::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    a_ = 0;
    b_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PB_ComplexNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }
      
      // optional int32 b = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PB_ComplexNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }
  
  // optional int32 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }
  
}

int PB_ComplexNumber::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }
    
    // optional int32 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PB_ComplexNumber::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PB_ComplexNumber*>(&from));
}

void PB_ComplexNumber::MergeFrom(const PB_ComplexNumber& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
}

void PB_ComplexNumber::CopyFrom(const PB_ComplexNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PB_ComplexNumber::IsInitialized() const {
  
  return true;
}

void PB_ComplexNumber::Swap(PB_ComplexNumber* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PB_ComplexNumber::GetTypeName() const {
  return "protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BasicPrinter
}  // namespace Example
}  // namespace Trentino
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
