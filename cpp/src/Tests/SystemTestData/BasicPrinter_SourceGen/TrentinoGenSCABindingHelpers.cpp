
// ****************************************************************************
// Generated by Trengen. Do not modify
// **************************************************************************** 

#pragma warning(push)
#pragma warning(disable:4290)
#include "TrentinoGenSCABindingHelpers.h"
#pragma warning(pop)
#include "TrentinoExampleBasicPrinterProbobufMessages.h"
using namespace Trentino::Gen;
using namespace Trentino::Binding::SCA;

namespace
{

void setBodyContent(trentino::bindingsca::csoap::Soap& response, std::string& serializedResponse)
	{
		::trentino::bindingsca::csoap::Soap_Envelope* env = response.mutable_envelope();
		if(!env->has_body())
		{
			::trentino::bindingsca::csoap::Soap_Body* body  = env->mutable_body();
			body->set_content(serializedResponse);
		}
		else
		{
			::trentino::bindingsca::csoap::Soap_Body body= env->body();
			body.set_content(serializedResponse);
		 }
	
	}

}

//----------------------------------------------------------------------------------
// Binding helper for class Trentino_Example_BasicPrinter_SCABindingHelper
//----------------------------------------------------------------------------------
	Trentino_Example_BasicPrinter_SCABindingHelper::Trentino_Example_BasicPrinter_SCABindingHelper(){}
	Trentino_Example_BasicPrinter_SCABindingHelper::~Trentino_Example_BasicPrinter_SCABindingHelper(){}
	
	const FaultDetailBuilderPtr Trentino_Example_BasicPrinter_SCABindingHelper::getFaultBuilder()const
	{
		throw "not implemented";
	}


	void Trentino_Example_BasicPrinter_SCABindingHelper::serializeResponse(const Trentino::Invocation::InvocationDataPtr& invocationDataPtr, 
										trentino::bindingsca::csoap::Soap& response, 
										Trentino::RuntimeModel::ErrorCode& /*ec*/ )const
	{
		Trentino::Example::BasicPrinterBeanUtils util;

				if(invocationDataPtr->operation() == "add")
				{
					
					  protobuf::Trentino::Example::BasicPrinter::BasicPrinterResponse_addResponse add_response;
						  {
						        void* retParam =  invocationDataPtr->response();
							   	Trentino::Example::BasicPrinter::ComplexNumber* argResponse = (Trentino::Example::BasicPrinter::ComplexNumber*) retParam;
							   	  protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber*	pb_argResponse = add_response.mutable_addresponse();
								util.copyProperties(*argResponse,pb_argResponse);
						  }
				std::string serializedResponse;
				add_response.SerializeToString(&serializedResponse);
				setBodyContent(response,serializedResponse);
			}

				if(invocationDataPtr->operation() == "addSimple")
				{
					
					  protobuf::Trentino::Example::BasicPrinter::BasicPrinterResponse_addSimpleResponse addsimple_response;
						  {
						        void* retParam =  invocationDataPtr->response();
						    	tint32_t* argResponse = (tint32_t*) retParam;
								addsimple_response.set_addsimpleresponse(*argResponse);
						  }
				std::string serializedResponse;
				addsimple_response.SerializeToString(&serializedResponse);
				setBodyContent(response,serializedResponse);
			}

				if(invocationDataPtr->operation() == "divide")
				{
					
					  protobuf::Trentino::Example::BasicPrinter::BasicPrinterResponse_divideResponse divide_response;
						  {
						        void* retParam =  invocationDataPtr->response();
							   	Trentino::Example::BasicPrinter::ComplexNumber* argResponse = (Trentino::Example::BasicPrinter::ComplexNumber*) retParam;
							   	  protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber*	pb_argResponse = divide_response.mutable_divideresponse();
								util.copyProperties(*argResponse,pb_argResponse);
						  }
				std::string serializedResponse;
				divide_response.SerializeToString(&serializedResponse);
				setBodyContent(response,serializedResponse);
			}

				if(invocationDataPtr->operation() == "multiply")
				{
					
					  protobuf::Trentino::Example::BasicPrinter::BasicPrinterResponse_multiplyResponse multiply_response;
							{
							   protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber*	pb_argResponse = multiply_response.mutable_c();
							    void* retParam =  invocationDataPtr->parameters()[2];
							   	Trentino::Example::BasicPrinter::ComplexNumber* argResponse = (Trentino::Example::BasicPrinter::ComplexNumber*) retParam;
								util.copyProperties(*argResponse,pb_argResponse);
							}

				std::string serializedResponse;
				multiply_response.SerializeToString(&serializedResponse);
				setBodyContent(response,serializedResponse);
			}

				if(invocationDataPtr->operation() == "divide2")
				{
					
					  protobuf::Trentino::Example::BasicPrinter::BasicPrinterResponse_divide2Response divide2_response;
						  {
						        void* retParam =  invocationDataPtr->response();
							   	Trentino::Example::BasicPrinter::ComplexNumber* argResponse = (Trentino::Example::BasicPrinter::ComplexNumber*) retParam;
							   	  protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber*	pb_argResponse = divide2_response.mutable_divide2response();
								util.copyProperties(*argResponse,pb_argResponse);
						  }
				std::string serializedResponse;
				divide2_response.SerializeToString(&serializedResponse);
				setBodyContent(response,serializedResponse);
			}

				if(invocationDataPtr->operation() == "calculateAge")
				{
					
					  protobuf::Trentino::Example::BasicPrinter::BasicPrinterResponse_calculateAgeResponse calculateage_response;
						  {
						        void* retParam =  invocationDataPtr->response();
						    	tuint32_t* argResponse = (tuint32_t*) retParam;
								calculateage_response.set_calculateageresponse(*argResponse);
						  }
				std::string serializedResponse;
				calculateage_response.SerializeToString(&serializedResponse);
				setBodyContent(response,serializedResponse);
			}
	}


	void Trentino_Example_BasicPrinter_SCABindingHelper::deserializeRequest( const Trentino::Invocation::InvocationDataPtr& invocationDataPtr, 
   											trentino::bindingsca::csoap::Soap& request, 
   											Trentino::RuntimeModel::ErrorCode& /*ec*/) const
   	{

		Trentino::Example::BasicPrinterBeanUtils util;
	if(invocationDataPtr->operation() == "add")
	{
		std::string content = request.envelope().body().content();	
		protobuf::Trentino::Example::BasicPrinter::BasicPrinterRequest_addRequest request;
		request.ParseFromString(content);

     	Trentino::Invocation::InvocationData::Parameters params;
      	params.reserve(2);
      		
				    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_a = request.a();
					Trentino::Example::BasicPrinter::ComplexNumber* a = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_a, a);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(a));
 				  						    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_b = request.b();
					Trentino::Example::BasicPrinter::ComplexNumber* b = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_b, b);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(b));
 				  		  
		invocationDataPtr->setParameters(params);
	}
	if(invocationDataPtr->operation() == "addSimple")
	{
		std::string content = request.envelope().body().content();	
		protobuf::Trentino::Example::BasicPrinter::BasicPrinterRequest_addSimpleRequest request;
		request.ParseFromString(content);

     	Trentino::Invocation::InvocationData::Parameters params;
      	params.reserve(2);
      		
					tint32_t* a = new tint32_t;
					*a = request.a();
					params.push_back(const_cast<tint32_t*>(a));
 				  							tint32_t* b = new tint32_t;
					*b = request.b();
					params.push_back(const_cast<tint32_t*>(b));
 				  		  
		invocationDataPtr->setParameters(params);
	}
	if(invocationDataPtr->operation() == "divide")
	{
		std::string content = request.envelope().body().content();	
		protobuf::Trentino::Example::BasicPrinter::BasicPrinterRequest_divideRequest request;
		request.ParseFromString(content);

     	Trentino::Invocation::InvocationData::Parameters params;
      	params.reserve(2);
      		
				    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_a = request.a();
					Trentino::Example::BasicPrinter::ComplexNumber* a = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_a, a);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(a));
 				  						    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_b = request.b();
					Trentino::Example::BasicPrinter::ComplexNumber* b = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_b, b);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(b));
 				  		  
		invocationDataPtr->setParameters(params);
	}
	if(invocationDataPtr->operation() == "multiply")
	{
		std::string content = request.envelope().body().content();	
		protobuf::Trentino::Example::BasicPrinter::BasicPrinterRequest_multiplyRequest request;
		request.ParseFromString(content);

     	Trentino::Invocation::InvocationData::Parameters params;
      	params.reserve(3);
      		
				    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_a = request.a();
					Trentino::Example::BasicPrinter::ComplexNumber* a = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_a, a);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(a));
 				  						    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_b = request.b();
					Trentino::Example::BasicPrinter::ComplexNumber* b = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_b, b);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(b));
 				  						    const protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& pb_c = request.c();
					Trentino::Example::BasicPrinter::ComplexNumber* c = new Trentino::Example::BasicPrinter::ComplexNumber;
					util.copyProperties(pb_c, c);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::ComplexNumber*>(c));
 				  		  
		invocationDataPtr->setParameters(params);
	}
	if(invocationDataPtr->operation() == "divide2")
	{
		std::string content = request.envelope().body().content();	
		protobuf::Trentino::Example::BasicPrinter::BasicPrinterRequest_divide2Request request;
		request.ParseFromString(content);

     	Trentino::Invocation::InvocationData::Parameters params;
      	params.reserve(1);
      		
				    const protobuf::Trentino::Example::BasicPrinter::PB_TupleComplexNumber& pb_tuple = request.tuple();
					Trentino::Example::BasicPrinter::TupleComplexNumber* tuple = new Trentino::Example::BasicPrinter::TupleComplexNumber;
					util.copyProperties(pb_tuple, tuple);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::TupleComplexNumber*>(tuple));
 				  		  
		invocationDataPtr->setParameters(params);
	}
	if(invocationDataPtr->operation() == "calculateAge")
	{
		std::string content = request.envelope().body().content();	
		protobuf::Trentino::Example::BasicPrinter::BasicPrinterRequest_calculateAgeRequest request;
		request.ParseFromString(content);

     	Trentino::Invocation::InvocationData::Parameters params;
      	params.reserve(1);
      		
				    const protobuf::Trentino::Example::BasicPrinter::PB_Person& pb_person = request.person();
					Trentino::Example::BasicPrinter::Person* person = new Trentino::Example::BasicPrinter::Person;
					util.copyProperties(pb_person, person);
					params.push_back(const_cast<Trentino::Example::BasicPrinter::Person*>(person));
 				  		  
		invocationDataPtr->setParameters(params);
	}
}

	bool Trentino_Example_BasicPrinter_SCABindingHelper::isOneWay( Trentino::Invocation::InvocationDataPtr& /*invocationDataPtr*/ ) const 
	{
		//only request with replies currently supported
		return false;
	}

	int Trentino_Example_BasicPrinter_SCABindingHelper::version()const 
	{
	   return 1;
	}

	static Trentino::Binding::BindingHelperBase* Trentino::Gen::Trentino_Example_BasicPrinter_SCABindingHelper_getNewInstance()
	{
		return new Trentino_Example_BasicPrinter_SCABindingHelper();
	}
	
	static SCABindingHelperInjector<Trentino_Example_BasicPrinter_SCABindingHelper> mTrentino_Example_BasicPrinter_SCABindingHelperHelperInjector(std::string("Trentino::Example::BasicPrinter"), &Trentino::Gen::Trentino_Example_BasicPrinter_SCABindingHelper_getNewInstance);
