// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrentinoExampleBasicPrinterTypes.proto

#ifndef PROTOBUF_TrentinoExampleBasicPrinterTypes_2eproto__INCLUDED
#define PROTOBUF_TrentinoExampleBasicPrinterTypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf {
namespace Trentino {
namespace Example {
namespace BasicPrinter {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();

class PB_ValidationException;
class PB_Address;
class PB_TupleComplexNumber;
class PB_Phone;
class PB_Person;
class PB_ComplexNumber;

// ===================================================================

class PB_ValidationException : public ::google::protobuf::MessageLite {
 public:
  PB_ValidationException();
  virtual ~PB_ValidationException();
  
  PB_ValidationException(const PB_ValidationException& from);
  
  inline PB_ValidationException& operator=(const PB_ValidationException& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PB_ValidationException& default_instance();
  
  void Swap(PB_ValidationException* other);
  
  // implements Message ----------------------------------------------
  
  PB_ValidationException* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PB_ValidationException& from);
  void MergeFrom(const PB_ValidationException& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string details = 1;
  inline bool has_details() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 1;
  inline const ::std::string& details() const;
  inline void set_details(const ::std::string& value);
  inline void set_details(const char* value);
  inline void set_details(const char* value, size_t size);
  inline ::std::string* mutable_details();
  inline ::std::string* release_details();
  
  // @@protoc_insertion_point(class_scope:protobuf.Trentino.Example.BasicPrinter.PB_ValidationException)
 private:
  inline void set_has_details();
  inline void clear_has_details();
  
  ::std::string* details_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();
  
  void InitAsDefaultInstance();
  static PB_ValidationException* default_instance_;
};
// -------------------------------------------------------------------

class PB_Address : public ::google::protobuf::MessageLite {
 public:
  PB_Address();
  virtual ~PB_Address();
  
  PB_Address(const PB_Address& from);
  
  inline PB_Address& operator=(const PB_Address& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PB_Address& default_instance();
  
  void Swap(PB_Address* other);
  
  // implements Message ----------------------------------------------
  
  PB_Address* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PB_Address& from);
  void MergeFrom(const PB_Address& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string street = 1;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 1;
  inline const ::std::string& street() const;
  inline void set_street(const ::std::string& value);
  inline void set_street(const char* value);
  inline void set_street(const char* value, size_t size);
  inline ::std::string* mutable_street();
  inline ::std::string* release_street();
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_Phone phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::protobuf::Trentino::Example::BasicPrinter::PB_Phone& phone() const;
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_Phone* mutable_phone();
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_Phone* release_phone();
  
  // @@protoc_insertion_point(class_scope:protobuf.Trentino.Example.BasicPrinter.PB_Address)
 private:
  inline void set_has_street();
  inline void clear_has_street();
  inline void set_has_phone();
  inline void clear_has_phone();
  
  ::std::string* street_;
  ::protobuf::Trentino::Example::BasicPrinter::PB_Phone* phone_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();
  
  void InitAsDefaultInstance();
  static PB_Address* default_instance_;
};
// -------------------------------------------------------------------

class PB_TupleComplexNumber : public ::google::protobuf::MessageLite {
 public:
  PB_TupleComplexNumber();
  virtual ~PB_TupleComplexNumber();
  
  PB_TupleComplexNumber(const PB_TupleComplexNumber& from);
  
  inline PB_TupleComplexNumber& operator=(const PB_TupleComplexNumber& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PB_TupleComplexNumber& default_instance();
  
  void Swap(PB_TupleComplexNumber* other);
  
  // implements Message ----------------------------------------------
  
  PB_TupleComplexNumber* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PB_TupleComplexNumber& from);
  void MergeFrom(const PB_TupleComplexNumber& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& a() const;
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* mutable_a();
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* release_a();
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& b() const;
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* mutable_b();
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* release_b();
  
  // @@protoc_insertion_point(class_scope:protobuf.Trentino.Example.BasicPrinter.PB_TupleComplexNumber)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* a_;
  ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();
  
  void InitAsDefaultInstance();
  static PB_TupleComplexNumber* default_instance_;
};
// -------------------------------------------------------------------

class PB_Phone : public ::google::protobuf::MessageLite {
 public:
  PB_Phone();
  virtual ~PB_Phone();
  
  PB_Phone(const PB_Phone& from);
  
  inline PB_Phone& operator=(const PB_Phone& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PB_Phone& default_instance();
  
  void Swap(PB_Phone* other);
  
  // implements Message ----------------------------------------------
  
  PB_Phone* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PB_Phone& from);
  void MergeFrom(const PB_Phone& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string home = 1;
  inline bool has_home() const;
  inline void clear_home();
  static const int kHomeFieldNumber = 1;
  inline const ::std::string& home() const;
  inline void set_home(const ::std::string& value);
  inline void set_home(const char* value);
  inline void set_home(const char* value, size_t size);
  inline ::std::string* mutable_home();
  inline ::std::string* release_home();
  
  // optional string mobile = 2;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 2;
  inline const ::std::string& mobile() const;
  inline void set_mobile(const ::std::string& value);
  inline void set_mobile(const char* value);
  inline void set_mobile(const char* value, size_t size);
  inline ::std::string* mutable_mobile();
  inline ::std::string* release_mobile();
  
  // @@protoc_insertion_point(class_scope:protobuf.Trentino.Example.BasicPrinter.PB_Phone)
 private:
  inline void set_has_home();
  inline void clear_has_home();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  
  ::std::string* home_;
  ::std::string* mobile_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();
  
  void InitAsDefaultInstance();
  static PB_Phone* default_instance_;
};
// -------------------------------------------------------------------

class PB_Person : public ::google::protobuf::MessageLite {
 public:
  PB_Person();
  virtual ~PB_Person();
  
  PB_Person(const PB_Person& from);
  
  inline PB_Person& operator=(const PB_Person& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PB_Person& default_instance();
  
  void Swap(PB_Person* other);
  
  // implements Message ----------------------------------------------
  
  PB_Person* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PB_Person& from);
  void MergeFrom(const PB_Person& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_Address addres = 1;
  inline bool has_addres() const;
  inline void clear_addres();
  static const int kAddresFieldNumber = 1;
  inline const ::protobuf::Trentino::Example::BasicPrinter::PB_Address& addres() const;
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_Address* mutable_addres();
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_Address* release_addres();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string surname = 3;
  inline bool has_surname() const;
  inline void clear_surname();
  static const int kSurnameFieldNumber = 3;
  inline const ::std::string& surname() const;
  inline void set_surname(const ::std::string& value);
  inline void set_surname(const char* value);
  inline void set_surname(const char* value, size_t size);
  inline ::std::string* mutable_surname();
  inline ::std::string* release_surname();
  
  // optional .protobuf.Trentino.Example.BasicPrinter.PB_Person mother = 4;
  inline bool has_mother() const;
  inline void clear_mother();
  static const int kMotherFieldNumber = 4;
  inline const ::protobuf::Trentino::Example::BasicPrinter::PB_Person& mother() const;
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_Person* mutable_mother();
  inline ::protobuf::Trentino::Example::BasicPrinter::PB_Person* release_mother();
  
  // @@protoc_insertion_point(class_scope:protobuf.Trentino.Example.BasicPrinter.PB_Person)
 private:
  inline void set_has_addres();
  inline void clear_has_addres();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_surname();
  inline void clear_has_surname();
  inline void set_has_mother();
  inline void clear_has_mother();
  
  ::protobuf::Trentino::Example::BasicPrinter::PB_Address* addres_;
  ::std::string* name_;
  ::std::string* surname_;
  ::protobuf::Trentino::Example::BasicPrinter::PB_Person* mother_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();
  
  void InitAsDefaultInstance();
  static PB_Person* default_instance_;
};
// -------------------------------------------------------------------

class PB_ComplexNumber : public ::google::protobuf::MessageLite {
 public:
  PB_ComplexNumber();
  virtual ~PB_ComplexNumber();
  
  PB_ComplexNumber(const PB_ComplexNumber& from);
  
  inline PB_ComplexNumber& operator=(const PB_ComplexNumber& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const PB_ComplexNumber& default_instance();
  
  void Swap(PB_ComplexNumber* other);
  
  // implements Message ----------------------------------------------
  
  PB_ComplexNumber* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PB_ComplexNumber& from);
  void MergeFrom(const PB_ComplexNumber& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline ::google::protobuf::int32 a() const;
  inline void set_a(::google::protobuf::int32 value);
  
  // optional int32 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline ::google::protobuf::int32 b() const;
  inline void set_b(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_AssignDesc_TrentinoExampleBasicPrinterTypes_2eproto();
  friend void protobuf_ShutdownFile_TrentinoExampleBasicPrinterTypes_2eproto();
  
  void InitAsDefaultInstance();
  static PB_ComplexNumber* default_instance_;
};
// ===================================================================


// ===================================================================

// PB_ValidationException

// optional string details = 1;
inline bool PB_ValidationException::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_ValidationException::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_ValidationException::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_ValidationException::clear_details() {
  if (details_ != &::google::protobuf::internal::kEmptyString) {
    details_->clear();
  }
  clear_has_details();
}
inline const ::std::string& PB_ValidationException::details() const {
  return *details_;
}
inline void PB_ValidationException::set_details(const ::std::string& value) {
  set_has_details();
  if (details_ == &::google::protobuf::internal::kEmptyString) {
    details_ = new ::std::string;
  }
  details_->assign(value);
}
inline void PB_ValidationException::set_details(const char* value) {
  set_has_details();
  if (details_ == &::google::protobuf::internal::kEmptyString) {
    details_ = new ::std::string;
  }
  details_->assign(value);
}
inline void PB_ValidationException::set_details(const char* value, size_t size) {
  set_has_details();
  if (details_ == &::google::protobuf::internal::kEmptyString) {
    details_ = new ::std::string;
  }
  details_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_ValidationException::mutable_details() {
  set_has_details();
  if (details_ == &::google::protobuf::internal::kEmptyString) {
    details_ = new ::std::string;
  }
  return details_;
}
inline ::std::string* PB_ValidationException::release_details() {
  clear_has_details();
  if (details_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = details_;
    details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PB_Address

// optional string street = 1;
inline bool PB_Address::has_street() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_Address::set_has_street() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_Address::clear_has_street() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_Address::clear_street() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    street_->clear();
  }
  clear_has_street();
}
inline const ::std::string& PB_Address::street() const {
  return *street_;
}
inline void PB_Address::set_street(const ::std::string& value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void PB_Address::set_street(const char* value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void PB_Address::set_street(const char* value, size_t size) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_Address::mutable_street() {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  return street_;
}
inline ::std::string* PB_Address::release_street() {
  clear_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = street_;
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protobuf.Trentino.Example.BasicPrinter.PB_Phone phone = 2;
inline bool PB_Address::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_Address::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_Address::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_Address::clear_phone() {
  if (phone_ != NULL) phone_->::protobuf::Trentino::Example::BasicPrinter::PB_Phone::Clear();
  clear_has_phone();
}
inline const ::protobuf::Trentino::Example::BasicPrinter::PB_Phone& PB_Address::phone() const {
  return phone_ != NULL ? *phone_ : *default_instance_->phone_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_Phone* PB_Address::mutable_phone() {
  set_has_phone();
  if (phone_ == NULL) phone_ = new ::protobuf::Trentino::Example::BasicPrinter::PB_Phone;
  return phone_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_Phone* PB_Address::release_phone() {
  clear_has_phone();
  ::protobuf::Trentino::Example::BasicPrinter::PB_Phone* temp = phone_;
  phone_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PB_TupleComplexNumber

// optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber a = 1;
inline bool PB_TupleComplexNumber::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_TupleComplexNumber::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_TupleComplexNumber::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_TupleComplexNumber::clear_a() {
  if (a_ != NULL) a_->::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::Clear();
  clear_has_a();
}
inline const ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& PB_TupleComplexNumber::a() const {
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* PB_TupleComplexNumber::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber;
  return a_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* PB_TupleComplexNumber::release_a() {
  clear_has_a();
  ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* temp = a_;
  a_ = NULL;
  return temp;
}

// optional .protobuf.Trentino.Example.BasicPrinter.PB_ComplexNumber b = 2;
inline bool PB_TupleComplexNumber::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_TupleComplexNumber::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_TupleComplexNumber::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_TupleComplexNumber::clear_b() {
  if (b_ != NULL) b_->::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber::Clear();
  clear_has_b();
}
inline const ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber& PB_TupleComplexNumber::b() const {
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* PB_TupleComplexNumber::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber;
  return b_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* PB_TupleComplexNumber::release_b() {
  clear_has_b();
  ::protobuf::Trentino::Example::BasicPrinter::PB_ComplexNumber* temp = b_;
  b_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PB_Phone

// optional string home = 1;
inline bool PB_Phone::has_home() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_Phone::set_has_home() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_Phone::clear_has_home() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_Phone::clear_home() {
  if (home_ != &::google::protobuf::internal::kEmptyString) {
    home_->clear();
  }
  clear_has_home();
}
inline const ::std::string& PB_Phone::home() const {
  return *home_;
}
inline void PB_Phone::set_home(const ::std::string& value) {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  home_->assign(value);
}
inline void PB_Phone::set_home(const char* value) {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  home_->assign(value);
}
inline void PB_Phone::set_home(const char* value, size_t size) {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  home_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_Phone::mutable_home() {
  set_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    home_ = new ::std::string;
  }
  return home_;
}
inline ::std::string* PB_Phone::release_home() {
  clear_has_home();
  if (home_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = home_;
    home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mobile = 2;
inline bool PB_Phone::has_mobile() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_Phone::set_has_mobile() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_Phone::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_Phone::clear_mobile() {
  if (mobile_ != &::google::protobuf::internal::kEmptyString) {
    mobile_->clear();
  }
  clear_has_mobile();
}
inline const ::std::string& PB_Phone::mobile() const {
  return *mobile_;
}
inline void PB_Phone::set_mobile(const ::std::string& value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void PB_Phone::set_mobile(const char* value) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(value);
}
inline void PB_Phone::set_mobile(const char* value, size_t size) {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  mobile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_Phone::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    mobile_ = new ::std::string;
  }
  return mobile_;
}
inline ::std::string* PB_Phone::release_mobile() {
  clear_has_mobile();
  if (mobile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_;
    mobile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PB_Person

// optional .protobuf.Trentino.Example.BasicPrinter.PB_Address addres = 1;
inline bool PB_Person::has_addres() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_Person::set_has_addres() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_Person::clear_has_addres() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_Person::clear_addres() {
  if (addres_ != NULL) addres_->::protobuf::Trentino::Example::BasicPrinter::PB_Address::Clear();
  clear_has_addres();
}
inline const ::protobuf::Trentino::Example::BasicPrinter::PB_Address& PB_Person::addres() const {
  return addres_ != NULL ? *addres_ : *default_instance_->addres_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_Address* PB_Person::mutable_addres() {
  set_has_addres();
  if (addres_ == NULL) addres_ = new ::protobuf::Trentino::Example::BasicPrinter::PB_Address;
  return addres_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_Address* PB_Person::release_addres() {
  clear_has_addres();
  ::protobuf::Trentino::Example::BasicPrinter::PB_Address* temp = addres_;
  addres_ = NULL;
  return temp;
}

// optional string name = 2;
inline bool PB_Person::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_Person::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_Person::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PB_Person::name() const {
  return *name_;
}
inline void PB_Person::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PB_Person::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PB_Person::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_Person::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PB_Person::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string surname = 3;
inline bool PB_Person::has_surname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PB_Person::set_has_surname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PB_Person::clear_has_surname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PB_Person::clear_surname() {
  if (surname_ != &::google::protobuf::internal::kEmptyString) {
    surname_->clear();
  }
  clear_has_surname();
}
inline const ::std::string& PB_Person::surname() const {
  return *surname_;
}
inline void PB_Person::set_surname(const ::std::string& value) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::kEmptyString) {
    surname_ = new ::std::string;
  }
  surname_->assign(value);
}
inline void PB_Person::set_surname(const char* value) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::kEmptyString) {
    surname_ = new ::std::string;
  }
  surname_->assign(value);
}
inline void PB_Person::set_surname(const char* value, size_t size) {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::kEmptyString) {
    surname_ = new ::std::string;
  }
  surname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PB_Person::mutable_surname() {
  set_has_surname();
  if (surname_ == &::google::protobuf::internal::kEmptyString) {
    surname_ = new ::std::string;
  }
  return surname_;
}
inline ::std::string* PB_Person::release_surname() {
  clear_has_surname();
  if (surname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = surname_;
    surname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .protobuf.Trentino.Example.BasicPrinter.PB_Person mother = 4;
inline bool PB_Person::has_mother() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PB_Person::set_has_mother() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PB_Person::clear_has_mother() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PB_Person::clear_mother() {
  if (mother_ != NULL) mother_->::protobuf::Trentino::Example::BasicPrinter::PB_Person::Clear();
  clear_has_mother();
}
inline const ::protobuf::Trentino::Example::BasicPrinter::PB_Person& PB_Person::mother() const {
  return mother_ != NULL ? *mother_ : *default_instance_->mother_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_Person* PB_Person::mutable_mother() {
  set_has_mother();
  if (mother_ == NULL) mother_ = new ::protobuf::Trentino::Example::BasicPrinter::PB_Person;
  return mother_;
}
inline ::protobuf::Trentino::Example::BasicPrinter::PB_Person* PB_Person::release_mother() {
  clear_has_mother();
  ::protobuf::Trentino::Example::BasicPrinter::PB_Person* temp = mother_;
  mother_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PB_ComplexNumber

// optional int32 a = 1;
inline bool PB_ComplexNumber::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PB_ComplexNumber::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PB_ComplexNumber::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PB_ComplexNumber::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline ::google::protobuf::int32 PB_ComplexNumber::a() const {
  return a_;
}
inline void PB_ComplexNumber::set_a(::google::protobuf::int32 value) {
  set_has_a();
  a_ = value;
}

// optional int32 b = 2;
inline bool PB_ComplexNumber::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PB_ComplexNumber::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PB_ComplexNumber::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PB_ComplexNumber::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline ::google::protobuf::int32 PB_ComplexNumber::b() const {
  return b_;
}
inline void PB_ComplexNumber::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BasicPrinter
}  // namespace Example
}  // namespace Trentino
}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrentinoExampleBasicPrinterTypes_2eproto__INCLUDED
