// ****************************************************************************
// Generated by Trengen. Do not modify
// **************************************************************************** 

#ifndef BOOST_ALL_NO_LIB
#define BOOST_ALL_NO_LIB
#endif

//header
#include "TrentinoGenProxiesWrappers.h"

//standard
#include <boost/scoped_ptr.hpp>

#include <Global/TrentinoGlobal.h>
#include <Runtime/Invocation/TrentinoInvocation.h>
#include <Runtime/Invocation/TrentinoInvocationInvocationData.h>
#include <Runtime/Invocation/TrentinoInvocationInvocationContext.h> //! \todo: currently not used
#include <Runtime/Invocation/TrentinoInvocationInvokerBase.h>
#include <Runtime/Invocation/TrentinoInvocationServiceInvocationWrapperBase.h>
#include <Runtime/RuntimeModel/TrentinoRuntimeModelWireBase.h>
#include <Runtime/RuntimeModel/TrentinoRuntimeModelServiceBase.h>
#include <Runtime/ReflectionRuntime/TrentinoReflectionRegistration.h>


namespace Trentino{
namespace Gen{
   //*************************************************************************************************
   //                                          WRAPPERS
   //*************************************************************************************************



   //*************************************************************************************************
   //                                          PROXIES
   //*************************************************************************************************

//*************************************************************************************************
//Proxy class definition Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy
//*************************************************************************************************
      Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy(Trentino::RuntimeModel::WireBase* wire):mWire(wire){}  
 Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::add( const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a, const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b)
 {
      assert(mWire);
      const Trentino::RuntimeModel::ServiceBasePtr targetService = mWire->service().lock();
   
      if(targetService.get() == nullptr)
         throw std::runtime_error("service unavailable");
   
      Trentino::Invocation::InvocationDataPtr invocationData(new Trentino::Invocation::InvocationData());     
      invocationData->setTargetService(targetService); 
      invocationData->setOperation("add");
   
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(2);

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(&a));

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(&b));
      invocationData->setParameters(params);
   
      const Trentino::Invocation::InvocationContextPtr ctx = mWire->invocationContext();
      
      if(!ctx->currentInvoker()->invoke(invocationData, ctx))
	  {
		throw std::runtime_error("service unavailable");
	  }
		 		boost::scoped_ptr<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber> responsePtr(static_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(invocationData->response()));
        return *responsePtr;
   }

 tint32_t Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::addSimple( const tint32_t a, const tint32_t b)
 {
      assert(mWire);
      const Trentino::RuntimeModel::ServiceBasePtr targetService = mWire->service().lock();
   
      if(targetService.get() == nullptr)
         throw std::runtime_error("service unavailable");
   
      Trentino::Invocation::InvocationDataPtr invocationData(new Trentino::Invocation::InvocationData());     
      invocationData->setTargetService(targetService); 
      invocationData->setOperation("addSimple");
   
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(2);

       		 	params.push_back(const_cast<tint32_t*>(&a));

       		 	params.push_back(const_cast<tint32_t*>(&b));
      invocationData->setParameters(params);
   
      const Trentino::Invocation::InvocationContextPtr ctx = mWire->invocationContext();
      
      if(!ctx->currentInvoker()->invoke(invocationData, ctx))
	  {
		throw std::runtime_error("service unavailable");
	  }
		 		boost::scoped_ptr<tint32_t> responsePtr(static_cast<tint32_t*>(invocationData->response()));
        return *responsePtr;
   }

 Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::divide( const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a, const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b)
 {
      assert(mWire);
      const Trentino::RuntimeModel::ServiceBasePtr targetService = mWire->service().lock();
   
      if(targetService.get() == nullptr)
         throw std::runtime_error("service unavailable");
   
      Trentino::Invocation::InvocationDataPtr invocationData(new Trentino::Invocation::InvocationData());     
      invocationData->setTargetService(targetService); 
      invocationData->setOperation("divide");
   
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(2);

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(&a));

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(&b));
      invocationData->setParameters(params);
   
      const Trentino::Invocation::InvocationContextPtr ctx = mWire->invocationContext();
      
      if(!ctx->currentInvoker()->invoke(invocationData, ctx))
	  {
		throw std::runtime_error("service unavailable");
	  }
		 		boost::scoped_ptr<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber> responsePtr(static_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(invocationData->response()));
        return *responsePtr;
   }

 void Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::multiply( const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a, const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b, Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& c)
 {
      assert(mWire);
      const Trentino::RuntimeModel::ServiceBasePtr targetService = mWire->service().lock();
   
      if(targetService.get() == nullptr)
         throw std::runtime_error("service unavailable");
   
      Trentino::Invocation::InvocationDataPtr invocationData(new Trentino::Invocation::InvocationData());     
      invocationData->setTargetService(targetService); 
      invocationData->setOperation("multiply");
   
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(3);

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(&a));

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(&b));
       		 	params.push_back(&c);
      	    
      invocationData->setParameters(params);
   
      const Trentino::Invocation::InvocationContextPtr ctx = mWire->invocationContext();
      
      if(!ctx->currentInvoker()->invoke(invocationData, ctx))
	  {
		throw std::runtime_error("service unavailable");
	  }
   }

 Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::divide2( const Trentino::Example::BasicCalculatorRemoteClient::TupleComplexNumber& tuple)
 {
      assert(mWire);
      const Trentino::RuntimeModel::ServiceBasePtr targetService = mWire->service().lock();
   
      if(targetService.get() == nullptr)
         throw std::runtime_error("service unavailable");
   
      Trentino::Invocation::InvocationDataPtr invocationData(new Trentino::Invocation::InvocationData());     
      invocationData->setTargetService(targetService); 
      invocationData->setOperation("divide2");
   
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(1);

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::TupleComplexNumber*>(&tuple));
      invocationData->setParameters(params);
   
      const Trentino::Invocation::InvocationContextPtr ctx = mWire->invocationContext();
      
      if(!ctx->currentInvoker()->invoke(invocationData, ctx))
	  {
		throw std::runtime_error("service unavailable");
	  }
		 		boost::scoped_ptr<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber> responsePtr(static_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*>(invocationData->response()));
        return *responsePtr;
   }

 tuint32_t Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy::calculateAge( const Trentino::Example::BasicCalculatorRemoteClient::Person& person)
 {
      assert(mWire);
      const Trentino::RuntimeModel::ServiceBasePtr targetService = mWire->service().lock();
   
      if(targetService.get() == nullptr)
         throw std::runtime_error("service unavailable");
   
      Trentino::Invocation::InvocationDataPtr invocationData(new Trentino::Invocation::InvocationData());     
      invocationData->setTargetService(targetService); 
      invocationData->setOperation("calculateAge");
   
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(1);

       		 	params.push_back(const_cast<Trentino::Example::BasicCalculatorRemoteClient::Person*>(&person));
      invocationData->setParameters(params);
   
      const Trentino::Invocation::InvocationContextPtr ctx = mWire->invocationContext();
      
      if(!ctx->currentInvoker()->invoke(invocationData, ctx))
	  {
		throw std::runtime_error("service unavailable");
	  }
		 		boost::scoped_ptr<tuint32_t> responsePtr(static_cast<tuint32_t*>(invocationData->response()));
        return *responsePtr;
   }

  //class declaration&definition
  //****************************************************************************************************
  //                                         InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx
  //****************************************************************************************************
  //! \brief based on implementation.cpp/class (including the parsing of namespaces in the header)
  //! most parts are static right??
  //****************************************************************************************************
   class InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx
   {
      //****************************************************************************************************
      //                                         newObjectWithParam()
      //****************************************************************************************************
      //! \brief
      //! \param void *
      //! \param void * retVal
      //! \param void * params[]
      //! \return void TRENTINO_STDCALL
      //****************************************************************************************************
      static void TRENTINO_STDCALL newObjectWithParam(void* /*thisPtr*/, void* retVal, void* params[])
      {

         *reinterpret_cast<Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy**>(retVal) = 
            new Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy(
            *reinterpret_cast<Trentino::RuntimeModel::WireBase**>(params[0]));   
      }

      //****************************************************************************************************
      //                                         deleteObject()
      //****************************************************************************************************
      //! \brief
      //! \param void * thisPtr
      //! \param void *
      //! \param void * *
      //! \return void TRENTINO_STDCALL
      //****************************************************************************************************
      static void TRENTINO_STDCALL deleteObject(void* thisPtr, void* /*retVal*/, void** /*params[]*/)
      {
         Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy* p = 
            static_cast<Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy*>(thisPtr);
         delete p;
      }


      //construction
   public:
      //****************************************************************************************************
      //                   InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx()
      //****************************************************************************************************
      //! \brief
      //! \return 
      //****************************************************************************************************
      InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx()
      {
         // METHOD SIGNATURES
         static const Trentino::Reflection::Data::Method::Param deleteParam[] = {"Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy *"
         };

         static const Trentino::Reflection::Data::Method::Param newParam[] = {"Trentino::RuntimeModel::Wire *"};

         static Trentino::Reflection::Data::Method::MetaData mdm[] = {
            { "new", "Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy *", newParam, COUNT_OF(newParam), newObjectWithParam }, 
            { "delete", nullptr, deleteParam, COUNT_OF(deleteParam), deleteObject },
         };

         // OBJECT
         static Trentino::Reflection::Data::Object::MetaData mdo = { 
            "Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxy", 
            nullptr, 
            nullptr,
            0,
            mdm,
            COUNT_OF(mdm),
         };

         mmdoHandle = &mdo;

         Trentino::Reflection::Registration::registerMetaData(mmdoHandle);
      }

      //****************************************************************************************************
      //                ~InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx()
      //****************************************************************************************************
      //! \brief
      //! \return 
      //****************************************************************************************************
      ~InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx()
      {
         Trentino::Reflection::Registration::unregisterMetaData(mmdoHandle);
      }

      //data
   private:
      Trentino::Reflection::Data::Object::MetaData* mmdoHandle;

   }; //class InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx
   static InitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx mInitializerTrentino_Example_BasicCalculatorRemoteClient_BasicCalculatorProxyRflx1;



}//namespace Gen
}//namespace Trentino

