// ****************************************************************************
// Generated by Trengen. Do not modify
// **************************************************************************** 
#include "TrentinoGenBindingProxy.h"
#include "TrentinoExampleBasicCalculatorRemoteClientBasicCalculatorBeanUtils.h"

using namespace Trentino::Gen;
using namespace Trentino::Binding::SCA::Client;
using namespace Trentino::Example::BasicCalculatorRemoteClient::protobuf;

namespace {

   //actions
   const char* add_action ="BasicCalculatorRemote/add";

   void throwUserExceptionIfNecessary(const SoapPtr& response)
      {
      const bool hasFault =  response->envelope().body().has_faultmessage();
      if(hasFault==true)
         throw std::runtime_error(response->envelope().body().faultmessage().detail());
      }

   MessagePtr createAddMessage(const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a,
      const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b)
      {
      BasicCalculatorRequest_addRequest* req = new BasicCalculatorRequest_addRequest();
      MessagePtr messageToSend(req);

      Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;

      //copy ahandle a
      Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempa = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&a);
      Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* pb_a = req.mutable_a();;
      util.copyProperties(tempa, pb_a);

      //copy b
      Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempb = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&b);
      Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* pb_b = eq.mutable_b();
      util.copyProperties(tempb, pb_b);

      return messageToSend;

      }


   void parseAddResponse(const SoapPtr& response, Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& c){
      Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;  
      const std::string respContent = response->envelope().body().content();
      Trentino::Example::BasicCalculatorRemoteClient::protobuf::BasicCalculatorResponse_addResponse resp;
      resp.ParseFromString(respContent);
      const PB_ComplexNumber& resp_1= resp.addresponse();
      util.copyProperties(resp_1,c);
      }
   }

//*************************************************************************************************
//                                          Binding Helpers
//*************************************************************************************************

//*************************************************************************************************
//BindingProxy class definition for wrapper: Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy
//*************************************************************************************************
Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy()
   {

   }

Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::~Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy()
   {
   mDelegate.reset();
   }


// methods of binding proxy Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy
Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::add(const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a,const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b)
   {
   MessagePtr messageToSend =createAddMessage(a,b);	
   SoapPtr response= mDelegate->send(messageToSend,add_action);
   throwUserExceptionIfNecessary(response);
   ComplexNumber c;
   parseAddResponse(response,c);
   return c;
   }

tint32_t Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::addSimple(const tint32_t a,const tint32_t b)
   {
   Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::BasicCalculatorRequest_addSimpleRequest addSimple_req;
   addSimple_req.set_a(a);
   addSimple_req.set_b(b);
   //trentino::bindingsca::csoap::Soap* response = 
   mDelegate.sendMessage(addSimple_req);
   //throwUserExceptionIfNecessary(response);
   }

Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::divide(const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a,const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b)
   {
   Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::BasicCalculatorRequest_divideRequest divide_req;
   Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempa = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&a);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber pb_a;
   util.copyProperties(tempa, &pb_a);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* temppb_a = divide_req.mutable_a();
   temppb_a = &pb_a;

   Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempb = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&b);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber pb_b;
   util.copyProperties(tempb, &pb_b);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* temppb_b = divide_req.mutable_b();
   temppb_b = &pb_b;

   //trentino::bindingsca::csoap::Soap* response = 
   mDelegate.sendMessage(divide_req);
   //throwUserExceptionIfNecessary(response);
   }

void Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::multiply(const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& a,const Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& b,Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber& c)
   {
   Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::BasicCalculatorRequest_multiplyRequest multiply_req;
   Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempa = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&a);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber pb_a;
   util.copyProperties(tempa, &pb_a);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* temppb_a = multiply_req.mutable_a();
   temppb_a = &pb_a;

   Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempb = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&b);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber pb_b;
   util.copyProperties(tempb, &pb_b);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* temppb_b = multiply_req.mutable_b();
   temppb_b = &pb_b;

   Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber* tempc = const_cast<Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber*> (&c);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber pb_c;
   util.copyProperties(tempc, &pb_c);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_ComplexNumber* temppb_c = multiply_req.mutable_c();
   temppb_c = &pb_c;

   //trentino::bindingsca::csoap::Soap* response = 
   mDelegate.sendMessage(multiply_req);
   //throwUserExceptionIfNecessary(response);
   }

Trentino::Example::BasicCalculatorRemoteClient::ComplexNumber Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::divide2(const Trentino::Example::BasicCalculatorRemoteClient::TupleComplexNumber& tuple)
   {
   Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::BasicCalculatorRequest_divide2Request divide2_req;
   Trentino::Example::BasicCalculatorRemoteClient::TupleComplexNumber* temptuple = const_cast<Trentino::Example::BasicCalculatorRemoteClient::TupleComplexNumber*> (&tuple);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_TupleComplexNumber pb_tuple;
   util.copyProperties(temptuple, &pb_tuple);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_TupleComplexNumber* temppb_tuple = divide2_req.mutable_tuple();
   temppb_tuple = &pb_tuple;

   //trentino::bindingsca::csoap::Soap* response = 
   mDelegate.sendMessage(divide2_req);
   //throwUserExceptionIfNecessary(response);
   }

tuint32_t Trentino_Example_BasicCalculatorRemoteClient_BasicCalculatorBindingProxy::calculateAge(const Trentino::Example::BasicCalculatorRemoteClient::Person& person)
   {
   Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorBeanUtils util;
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::BasicCalculatorRequest_calculateAgeRequest calculateAge_req;
   Trentino::Example::BasicCalculatorRemoteClient::Person* tempperson = const_cast<Trentino::Example::BasicCalculatorRemoteClient::Person*> (&person);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_Person pb_person;
   util.copyProperties(tempperson, &pb_person);
   Trentino::Example::BasicCalculatorRemoteClient::protobuf::PB_Person* temppb_person = calculateAge_req.mutable_person();
   temppb_person = &pb_person;

   //trentino::bindingsca::csoap::Soap* response = 
   mDelegate.sendMessage(calculateAge_req);
   //throwUserExceptionIfNecessary(response);
   }