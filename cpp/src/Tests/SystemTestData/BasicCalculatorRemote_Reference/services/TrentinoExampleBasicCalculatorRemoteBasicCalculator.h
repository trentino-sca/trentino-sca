// Generated by Trentino TDIL CPP interface generator. do not modify

#ifndef TrentinoExampleBasicCalculatorRemoteBasicCalculatorH
#define TrentinoExampleBasicCalculatorRemoteBasicCalculatorH

#include <boost/cstdint.hpp>
typedef  boost::int32_t  tint32_t;
typedef  boost::uint32_t  tuint32_t;
typedef  boost::int64_t  tint64_t;
typedef  boost::uint64_t  tuint64_t;
#include <string>
namespace Trentino{
namespace Example{
namespace BasicCalculatorRemote{

//forward declaration
class ComplexNumber;
class Phone;
class Address;
class Person;
class TupleComplexNumber;
class ValidationException;

class ComplexNumber{
private:
	tint32_t a_;
	tint32_t b_;

public:
// constructor and destructor---------------------------------------
	inline ComplexNumber();
	inline virtual ~ComplexNumber();
// accessors -------------------------------------------------------
	inline tint32_t a() const;
	inline void set_a(tint32_t value);
	
	inline tint32_t b() const;
	inline void set_b(tint32_t value);
	
}; //class ComplexNumber
class Phone{
private:
	std::string* home_;
	std::string* mobile_;

public:
// constructor and destructor---------------------------------------
	inline Phone();
	inline virtual ~Phone();
// accessors -------------------------------------------------------
	inline const std::string& home() const;
 	inline void set_home(const std::string& value);
	inline void set_home(const char* value);
	inline void set_home(const char* value, size_t size);
	
	inline const std::string& mobile() const;
 	inline void set_mobile(const std::string& value);
	inline void set_mobile(const char* value);
	inline void set_mobile(const char* value, size_t size);
	
}; //class Phone
class Address{
private:
	std::string* street_;
	Phone* phone_;

public:
// constructor and destructor---------------------------------------
	inline Address();
	inline virtual ~Address();
// accessors -------------------------------------------------------
	inline const std::string& street() const;
 	inline void set_street(const std::string& value);
	inline void set_street(const char* value);
	inline void set_street(const char* value, size_t size);
	
	inline const Phone& phone() const;
	inline void set_phone(Phone* value);
	inline void set_phone(Phone& value);
	
}; //class Address
class Person{
private:
	Address* addres_;
	std::string* name_;
	std::string* surname_;
	Person* mother_;

public:
// constructor and destructor---------------------------------------
	inline Person();
	inline virtual ~Person();
// accessors -------------------------------------------------------
	inline const Address& addres() const;
	inline void set_addres(Address* value);
	inline void set_addres(Address& value);
	
	inline const std::string& name() const;
 	inline void set_name(const std::string& value);
	inline void set_name(const char* value);
	inline void set_name(const char* value, size_t size);
	
	inline const std::string& surname() const;
 	inline void set_surname(const std::string& value);
	inline void set_surname(const char* value);
	inline void set_surname(const char* value, size_t size);
	
	inline const Person& mother() const;
	inline void set_mother(Person* value);
	inline void set_mother(Person& value);
	
}; //class Person
class TupleComplexNumber{
private:
	ComplexNumber* a_;
	ComplexNumber* b_;

public:
// constructor and destructor---------------------------------------
	inline TupleComplexNumber();
	inline virtual ~TupleComplexNumber();
// accessors -------------------------------------------------------
	inline const ComplexNumber& a() const;
	inline void set_a(ComplexNumber* value);
	inline void set_a(ComplexNumber& value);
	
	inline const ComplexNumber& b() const;
	inline void set_b(ComplexNumber* value);
	inline void set_b(ComplexNumber& value);
	
}; //class TupleComplexNumber
class ValidationException{
private:
	std::string* details_;

public:
// constructor and destructor---------------------------------------
	inline ValidationException();
	inline virtual ~ValidationException();
// accessors -------------------------------------------------------
	inline const std::string& details() const;
 	inline void set_details(const std::string& value);
	inline void set_details(const char* value);
	inline void set_details(const char* value, size_t size);
	
}; //class ValidationException

// class function implementations
inline ComplexNumber::ComplexNumber (){
}
inline ComplexNumber::~ComplexNumber(){
}
inline tint32_t ComplexNumber::a() const{
	return a_;
}
inline void ComplexNumber::set_a(tint32_t value){
	a_ = value;
}
	
inline tint32_t ComplexNumber::b() const{
	return b_;
}
inline void ComplexNumber::set_b(tint32_t value){
	b_ = value;
}
	

inline Phone::Phone (){
}
inline Phone::~Phone(){
	delete home_;
	delete mobile_;
}
inline const std::string& Phone::home() const{
	return *home_;
}
inline void Phone::set_home(const std::string& value){
	if (home_ == NULL ) {
    	home_ = new std::string;
  	}
  	home_->assign(value);
}
inline void Phone::set_home(const char* value){
	if (home_ == NULL) {
		home_ = new std::string;
  	}
  	home_->assign(value);
}
inline void Phone::set_home(const char* value, size_t size){
	if (home_ == NULL) {
    	home_ = new std::string;
  	}
  	home_->assign(reinterpret_cast<const char*>(value), size);
}
	
inline const std::string& Phone::mobile() const{
	return *mobile_;
}
inline void Phone::set_mobile(const std::string& value){
	if (mobile_ == NULL ) {
    	mobile_ = new std::string;
  	}
  	mobile_->assign(value);
}
inline void Phone::set_mobile(const char* value){
	if (mobile_ == NULL) {
		mobile_ = new std::string;
  	}
  	mobile_->assign(value);
}
inline void Phone::set_mobile(const char* value, size_t size){
	if (mobile_ == NULL) {
    	mobile_ = new std::string;
  	}
  	mobile_->assign(reinterpret_cast<const char*>(value), size);
}
	

inline Address::Address (){
}
inline Address::~Address(){
	delete street_;
	delete phone_;
}
inline const std::string& Address::street() const{
	return *street_;
}
inline void Address::set_street(const std::string& value){
	if (street_ == NULL ) {
    	street_ = new std::string;
  	}
  	street_->assign(value);
}
inline void Address::set_street(const char* value){
	if (street_ == NULL) {
		street_ = new std::string;
  	}
  	street_->assign(value);
}
inline void Address::set_street(const char* value, size_t size){
	if (street_ == NULL) {
    	street_ = new std::string;
  	}
  	street_->assign(reinterpret_cast<const char*>(value), size);
}
	
inline const Phone& Address::phone() const{
	return *phone_;
}
inline void Address::set_phone(Phone* value){
	if (phone_ == NULL ) {
    	phone_ = new Phone;
  	}
  	phone_ = value;
}
inline void Address::set_phone(Phone& value){
	if (phone_ == NULL ) {
    	phone_ = new Phone;
  	}
  	phone_= &value;
}
	

inline Person::Person (){
}
inline Person::~Person(){
	delete addres_;
	delete name_;
	delete surname_;
	delete mother_;
}
inline const Address& Person::addres() const{
	return *addres_;
}
inline void Person::set_addres(Address* value){
	if (addres_ == NULL ) {
    	addres_ = new Address;
  	}
  	addres_ = value;
}
inline void Person::set_addres(Address& value){
	if (addres_ == NULL ) {
    	addres_ = new Address;
  	}
  	addres_= &value;
}
	
inline const std::string& Person::name() const{
	return *name_;
}
inline void Person::set_name(const std::string& value){
	if (name_ == NULL ) {
    	name_ = new std::string;
  	}
  	name_->assign(value);
}
inline void Person::set_name(const char* value){
	if (name_ == NULL) {
		name_ = new std::string;
  	}
  	name_->assign(value);
}
inline void Person::set_name(const char* value, size_t size){
	if (name_ == NULL) {
    	name_ = new std::string;
  	}
  	name_->assign(reinterpret_cast<const char*>(value), size);
}
	
inline const std::string& Person::surname() const{
	return *surname_;
}
inline void Person::set_surname(const std::string& value){
	if (surname_ == NULL ) {
    	surname_ = new std::string;
  	}
  	surname_->assign(value);
}
inline void Person::set_surname(const char* value){
	if (surname_ == NULL) {
		surname_ = new std::string;
  	}
  	surname_->assign(value);
}
inline void Person::set_surname(const char* value, size_t size){
	if (surname_ == NULL) {
    	surname_ = new std::string;
  	}
  	surname_->assign(reinterpret_cast<const char*>(value), size);
}
	
inline const Person& Person::mother() const{
	return *mother_;
}
inline void Person::set_mother(Person* value){
	if (mother_ == NULL ) {
    	mother_ = new Person;
  	}
  	mother_ = value;
}
inline void Person::set_mother(Person& value){
	if (mother_ == NULL ) {
    	mother_ = new Person;
  	}
  	mother_= &value;
}
	

inline TupleComplexNumber::TupleComplexNumber (){
}
inline TupleComplexNumber::~TupleComplexNumber(){
	delete a_;
	delete b_;
}
inline const ComplexNumber& TupleComplexNumber::a() const{
	return *a_;
}
inline void TupleComplexNumber::set_a(ComplexNumber* value){
	if (a_ == NULL ) {
    	a_ = new ComplexNumber;
  	}
  	a_ = value;
}
inline void TupleComplexNumber::set_a(ComplexNumber& value){
	if (a_ == NULL ) {
    	a_ = new ComplexNumber;
  	}
  	a_= &value;
}
	
inline const ComplexNumber& TupleComplexNumber::b() const{
	return *b_;
}
inline void TupleComplexNumber::set_b(ComplexNumber* value){
	if (b_ == NULL ) {
    	b_ = new ComplexNumber;
  	}
  	b_ = value;
}
inline void TupleComplexNumber::set_b(ComplexNumber& value){
	if (b_ == NULL ) {
    	b_ = new ComplexNumber;
  	}
  	b_= &value;
}
	

inline ValidationException::ValidationException (){
}
inline ValidationException::~ValidationException(){
	delete details_;
}
inline const std::string& ValidationException::details() const{
	return *details_;
}
inline void ValidationException::set_details(const std::string& value){
	if (details_ == NULL ) {
    	details_ = new std::string;
  	}
  	details_->assign(value);
}
inline void ValidationException::set_details(const char* value){
	if (details_ == NULL) {
		details_ = new std::string;
  	}
  	details_->assign(value);
}
inline void ValidationException::set_details(const char* value, size_t size){
	if (details_ == NULL) {
    	details_ = new std::string;
  	}
  	details_->assign(reinterpret_cast<const char*>(value), size);
}
	

class BasicCalculator{
  //services
public:
	virtual ComplexNumber add (const ComplexNumber& a,const ComplexNumber& b) =0;
	virtual tint32_t addSimple (const tint32_t a,const tint32_t b) =0;
	virtual ComplexNumber divide (const ComplexNumber& a,const ComplexNumber& b) =0;
	virtual void multiply (const ComplexNumber& a,const ComplexNumber& b, ComplexNumber& c) =0;
	virtual ComplexNumber divide2 (const TupleComplexNumber& tuple) =0;
	virtual tuint32_t calculateAge (const Person& person) throw (ValidationException)=0;
  
}; //class BasicCalculator
} //namespace Trentino
} //namespace Example
} //namespace BasicCalculatorRemote

#endif //TrentinoExampleBasicCalculatorRemoteBasicCalculatorH