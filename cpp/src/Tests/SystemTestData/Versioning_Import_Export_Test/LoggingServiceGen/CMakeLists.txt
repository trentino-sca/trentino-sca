#**********************************************************************************
#generated by Trengen
#**********************************************************************************

cmake_minimum_required(VERSION 2.6)
project(LoggingServiceGen)

##############################################################################
# 								COMPILER OPTIONS  							 #
##############################################################################
if(MSVC)
	add_definitions(-DUNICODE -D_UNICODE)
	add_definitions(/W4)
#	add_definitions(/WX)
    add_definitions(/wd4251)
    add_definitions(/wd4275)
else()
	add_definitions(-Wall -pedantic)
endif()

##############################################################################
# 							VARS FOR BUILD TYPES							 #
##############################################################################
set(IS_BUILD_TYPE_DEBUG TRUE)
set(IS_BUILD_TYPE_RELEASE TRUE)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Debug")
endif()

if(MSVC_IDE)
	list(FIND CMAKE_CONFIGURATION_TYPES Debug CONF_TYPE)
	if(CONF_TYPE EQUAL -1)
		set(IS_BUILD_TYPE_DEBUG FALSE)
	endif()

	list(FIND CMAKE_CONFIGURATION_TYPES Release CONF_TYPE)
	list(FIND CMAKE_CONFIGURATION_TYPES RelWithDebInfo CONF_TYPE2)
	list(FIND CMAKE_CONFIGURATION_TYPES MinSizeRel CONF_TYPE3)
	if(CONF_TYPE EQUAL -1 AND CONF_TYPE2 EQUAL -1 AND CONF_TYPE3 EQUAL -1  )
		set(IS_BUILD_TYPE_RELEASE FALSE)
	endif()
else()
	if(CMAKE_BUILD_TYPE STREQUAL "Debug")
		set(IS_BUILD_TYPE_RELEASE FALSE)
	else()
		set(IS_BUILD_TYPE_DEBUG FALSE)
	endif()
endif(MSVC_IDE)

##############################################################################
# 							   OUTPUT CONFIGURATION						     #
##############################################################################

set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME} )
set(Contribution_Dir I:/Trentino/trentino/DEV/cpp/src/Tests/SystemTestData/Versioning_Import_Export_Test/LoggingService)
set(Include_Dir I:/Trentino/trentino/DEV/cpp/src/Tests/SystemTestData/Versioning_Import_Export_Test/LoggingService)
set(TRENTINO_RUNTIME_DIR $ENV{TRENTINO_HOME})
set(TRENTINO_LIB_DIR ${TRENTINO_RUNTIME_DIR}/lib)
set (DEFAULT_INSTALL_PATH I:/Trentino/trentino/DEV/cpp/src/Tests/SystemTestData/Versioning_Import_Export_Test)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set (CMAKE_INSTALL_PREFIX I:/Trentino/trentino/DEV/cpp/src/Tests/SystemTestData/Versioning_Import_Export_Test CACHE STRING "Install path" FORCE)
endif()

set(PName LoggingServiceGen )
#header files
FILE(GLOB ${PName}HEADER_FILES *.h *.inl)	  

#source files
FILE(GLOB ${PName}SOURCE_FILES *.cpp)

set ( ${PName}SOURCE_FILES
	  ${${PName}HEADER_FILES} ${${PName}SOURCE_FILES})  


	  
#libs
set( ${PName}THIRD_PARTY_LIBS
     TrentinoRuntime
     )
	 
set( ${PName}CUSTOM_LIBS )


if (WIN32)
	add_definitions(-DLOGGINGSERVICEGEN_EXPORTS)
	add_definitions(-D_WIN32_WINNT=0x0502 -D_WINVER=0x0502)
endif()

set(${PName}_inc_dirs ${TRENTINO_RUNTIME_DIR}/include
                      ${Contribution_Dir}  
                      ${Contribution_Dir}/services 
                      ${Contribution_Dir}/include
                      I:/Trentino/trentino/DEV/cpp/src/Tests/SystemTestData/Versioning_Import_Export_Test/LoggingService/services 
                      )
include_directories(${${PName}_inc_dirs})
set(${PName}_inc_dirs ${${PName}_inc_dirs} PARENT_SCOPE)

set(${PName}_link_dirs ${TRENTINO_RUNTIME_DIR}/lib  ${Contribution_Dir}/lib
                   I:/Trentino/trentino/DEV/cpp/src/Tests/SystemTestData/Versioning_Import_Export_Test/LoggingService/lib 
                                      bin 
                   )
                     
link_directories(${${PName}_link_dirs})
set(${PName}_link_dirs ${${PName}_link_dirs} PARENT_SCOPE)
add_library(${PName} SHARED ${${PName}SOURCE_FILES})
set_target_properties(${PName} PROPERTIES OUTPUT_NAME sca-contribution)

set(target_location "")
set(target_path "")
#set(target_file_name "")
get_target_property(target_location ${PName} LOCATION)

get_filename_component(target_path ${target_location} PATH)
set(new_path ${target_path}/${PName}/META-INF)
#get_filename_component(target_file_name ${target_location}
add_custom_command( TARGET ${PName} POST_BUILD
					COMMAND  ${CMAKE_COMMAND} -E make_directory ${new_path}
					COMMAND ${CMAKE_COMMAND} -E copy ${target_location} ${new_path} 
					VERBATIM)

target_link_libraries(${PName} ${${PName}CUSTOM_LIBS})
target_link_libraries(${PName} ${${PName}THIRD_PARTY_LIBS})

target_link_libraries(${PName} LoggingService)
 
set(MY_GEN_INSTALL_DIR LoggingService)
install(TARGETS ${PName}  ${DLL_TARGET_KIND} DESTINATION ${MY_GEN_INSTALL_DIR}/META-INF ARCHIVE DESTINATION ${TARGET_LIB_DIR})
install(FILES sca-contribution.conf DESTINATION ${MY_GEN_INSTALL_DIR}/META-INF)