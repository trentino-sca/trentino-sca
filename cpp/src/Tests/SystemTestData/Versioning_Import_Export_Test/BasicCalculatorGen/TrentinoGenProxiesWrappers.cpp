// ****************************************************************************
// Generated by Trengen. Do not modify
// **************************************************************************** 

//header
#include "TrentinoGenProxiesWrappers.h"
#include "TrentinoGenContributionInfo.h"

//standard
#include <boost/scoped_ptr.hpp>
#include <string.h>

#include <Global/TrentinoGlobal.h>
#include <Runtime/Invocation/TrentinoInvocationInvocationData.h>
#include <Runtime/Invocation/TrentinoInvocationInvocationContext.h> //! \todo: currently not used
#include <Runtime/Invocation/TrentinoInvocationInvokerBase.h>
#include <Runtime/RuntimeModel/TrentinoRuntimeModelWireBase.h>
#include <Runtime/RuntimeModel/TrentinoRuntimeModelServiceBase.h>
#include <Runtime/ReflectionRuntime/TrentinoReflectionRegistration.h>
#include <Runtime/Invocation/TrentinoInvocationGen.h>

//specific
#pragma warning(push)
#pragma warning(disable:4290)
#include "TrentinoExampleBasicCalculatorCalculatorImpl.h"
#pragma warning(pop)

using namespace Trentino::Example::Logging;
using namespace Trentino::Example::BasicCalculator;

namespace Trentino{
namespace Gen{


namespace
{
   //*************************************************************************************************
   //                                          WRAPPERS
   //*************************************************************************************************
     int Trentino_Example_BasicCalculator_CalculatorWrapper_invoke_add(Trentino::Example::BasicCalculator::Calculator* myInstance,int a,int b){
      return myInstance->add(a,b);
     }
     int Trentino_Example_BasicCalculator_CalculatorWrapper_invoke_div(Trentino::Example::BasicCalculator::Calculator* myInstance,int a,int b){
      return myInstance->div(a,b);
     }
    
	// invoke method for wrapper: Trentino_Example_BasicCalculator_Calculator
	void Trentino_Example_BasicCalculator_CalculatorWrapper_invoke(
		const Trentino::Invocation::InvocationData& data 
		,const Trentino::Invocation::InvocationContext& /*ctx*/
		,Trentino::Example::BasicCalculator::Calculator* myInstance, void* retVal)
	{
		assert(myInstance != nullptr);
		const std::string& op = data.operation();
		      if(op =="add" )
      {
        int (*add)(Trentino::Example::BasicCalculator::Calculator*,int,int) = &Trentino_Example_BasicCalculator_CalculatorWrapper_invoke_add;
        invoke(myInstance,retVal,data,add);
      }
else      if(op =="div" )
      {
        int (*div)(Trentino::Example::BasicCalculator::Calculator*,int,int) = &Trentino_Example_BasicCalculator_CalculatorWrapper_invoke_div;
        invoke(myInstance,retVal,data,div);
      }

	}
 


} 



   //*************************************************************************************************
   //                                          PROXIES
   //*************************************************************************************************  

//*************************************************************************************************
//Proxy class definition Trentino_Example_Logging_LoggingServiceProxy
//*************************************************************************************************
      Trentino_Example_Logging_LoggingServiceProxy::Trentino_Example_Logging_LoggingServiceProxy(Trentino::RuntimeModel::WireBase* wire):mWire(wire){}  
 void Trentino_Example_Logging_LoggingServiceProxy::logError( const char* log)
 { 
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(1);
      trentino_gen_internal_push_back(log,params);    
      invoke_helper<void> helper;
      helper.invoke("logError",params,mWire);
      return helper.get();
   }

 void Trentino_Example_Logging_LoggingServiceProxy::logDebug( const char* log)
 { 
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(1);
      trentino_gen_internal_push_back(log,params);    
      invoke_helper<void> helper;
      helper.invoke("logDebug",params,mWire);
      return helper.get();
   }

 void Trentino_Example_Logging_LoggingServiceProxy::logInfo( const char* log)
 { 
      Trentino::Invocation::InvocationData::Parameters params;
      params.reserve(1);
      trentino_gen_internal_push_back(log,params);    
      invoke_helper<void> helper;
      helper.invoke("logInfo",params,mWire);
      return helper.get();
   }

  //class declaration&definition
  //****************************************************************************************************
  //                                         InitializerTrentino_Example_Logging_LoggingServiceProxyRflx
  //****************************************************************************************************
  //! \brief based on implementation.cpp/class (including the parsing of namespaces in the header)
  //! most parts are static right??
  //****************************************************************************************************
   class InitializerTrentino_Example_Logging_LoggingServiceProxyRflx
   {
      //****************************************************************************************************
      //                                         newObjectWithParam()
      //****************************************************************************************************
      //! \brief
      //! \param void *
      //! \param void * retVal
      //! \param void * params[]
      //! \return void TRENTINO_STDCALL
      //****************************************************************************************************
      static void TRENTINO_STDCALL newObjectWithParam(void* /*thisPtr*/, void* retVal, void* params[])
      {
         *reinterpret_cast<Trentino_Example_Logging_LoggingServiceProxy**>(retVal) = 
            new Trentino_Example_Logging_LoggingServiceProxy(
            *reinterpret_cast<Trentino::RuntimeModel::WireBase**>(params[0]));   
      }

      //****************************************************************************************************
      //                                         deleteObject()
      //****************************************************************************************************
      //! \brief
      //! \param void * thisPtr
      //! \param void *
      //! \param void * *
      //! \return void TRENTINO_STDCALL
      //****************************************************************************************************
      static void TRENTINO_STDCALL deleteObject(void* thisPtr, void* /*retVal*/, void* /*params*/[])
      {
         Trentino_Example_Logging_LoggingServiceProxy* p = 
         static_cast<Trentino_Example_Logging_LoggingServiceProxy*>(thisPtr);
         delete p;
      }


      //construction
   public:
      //****************************************************************************************************
      //                   InitializerTrentino_Example_Logging_LoggingServiceProxyRflx()
      //****************************************************************************************************
      InitializerTrentino_Example_Logging_LoggingServiceProxyRflx()
      {
         // METHOD SIGNATURES
         static const Trentino::Reflection::Data::Method::Param deleteParam[] = {{"Trentino_Example_Logging_LoggingServiceProxy *"}};
         static const Trentino::Reflection::Data::Method::Param newParam[] = {{"Trentino::RuntimeModel::Wire *"}};
         static Trentino::Reflection::Data::Method::MetaData mdm[] = {
            { "new", "Trentino_Example_Logging_LoggingServiceProxy *", newParam, COUNT_OF(newParam), newObjectWithParam }, 
            { "delete", nullptr, deleteParam, COUNT_OF(deleteParam), deleteObject },
         };

         // OBJECT
         static Trentino::Reflection::Data::Object::MetaData mdo = { 
            "Trentino_Example_Logging_LoggingServiceProxy", 
            nullptr, 
            mdm,
            COUNT_OF(mdm),
         };
         mmdoHandle = &mdo;
         Trentino::Reflection::Registration::registerMetaData(GenContributionInfo::getDataRegistry(),*mmdoHandle);
      }

      //****************************************************************************************************
      //                ~InitializerTrentino_Example_Logging_LoggingServiceProxyRflx()
      //****************************************************************************************************
      ~InitializerTrentino_Example_Logging_LoggingServiceProxyRflx()
      {
         Trentino::Reflection::Registration::unregisterMetaData(GenContributionInfo::getDataRegistry(),*mmdoHandle);
      }

      //data
   private:
      Trentino::Reflection::Data::Object::MetaData* mmdoHandle;

   }; //class InitializerTrentino_Example_Logging_LoggingServiceProxyRflx
   static InitializerTrentino_Example_Logging_LoggingServiceProxyRflx mInitializerTrentino_Example_Logging_LoggingServiceProxyRflx2;





   //*************************************************************************************************
   //                                          REFLECTION CODE
   //*************************************************************************************************
  
 static const Trentino::Reflection::Data::Method::Param trentino_internal_invoke_cpp_componentParam[] ={{"void *"},
		    {"const Trentino::XML::Schema::Name&"},
		    {"const Trentino::Invocation::InvocationData&"},
		    {"const Trentino::Invocation::InvocationContext&"},
		    {"void *"}};
   
 	//*************************************************************************************************
	// class declaration
	// InitializerTrentino_Example_BasicCalculator_CalculatorImplRflx
	//*************************************************************************************************	    
   	class InitializerTrentino_Example_BasicCalculator_CalculatorImplRflx
  	 {
  	 
		//! This is the new callback to create component, retVal is a pointer of pointer which contains
		//! the address of object
		static void TRENTINO_STDCALL newObjectNoParam(void* /*thisPtr*/, void* retVal, void* /*params*/[])
		{
			*reinterpret_cast<Trentino::Example::BasicCalculator::CalculatorImpl**>(retVal) = 
			new Trentino::Example::BasicCalculator::CalculatorImpl();
		}
		
		//! you need only thisPtr and a simple static_cast to destroy object by default delete
		static void TRENTINO_STDCALL deleteObject(void* thisPtr, void* /*retVal*/, void* /*params*/[])
		{
			Trentino::Example::BasicCalculator::CalculatorImpl* p = 
			static_cast<Trentino::Example::BasicCalculator::CalculatorImpl*>(thisPtr);
			delete p;
		}
		
		static void TRENTINO_STDCALL impl_cpp_invoke(void* thisPtr,void* /*retVal*/, void* params[]){
         Trentino::XML::Schema::Name& serviceId = *static_cast<Trentino::XML::Schema::Name*>(params[0]);
         const char* serviceIdChar = serviceId.c_str();
         const Trentino::Invocation::InvocationData& data = *static_cast<const Trentino::Invocation::InvocationData*>(params[1]);
         const Trentino::Invocation::InvocationContext& ctx =*static_cast<const Trentino::Invocation::InvocationContext*>(params[2]);
		Trentino::Example::BasicCalculator::CalculatorImpl* p = static_cast<Trentino::Example::BasicCalculator::CalculatorImpl*>(thisPtr);
		void * retVal = params[3];	
		   if(strcmp(serviceIdChar, "Trentino::Example::BasicCalculator::Calculator") == 0)
			{
			 Trentino_Example_BasicCalculator_CalculatorWrapper_invoke(data, ctx, dynamic_cast<Trentino::Example::BasicCalculator::Calculator*>(p), retVal);
			 return;
			}

		
		}
		
		//a setter method is needed for each reference of the componentType
		static void TRENTINO_STDCALL setLoggingServiceMethod(void* thisPtr, void* /*retVal*/, void* params[])
		{
			Trentino::Example::BasicCalculator::CalculatorImpl* p = 
			static_cast<Trentino::Example::BasicCalculator::CalculatorImpl*>(thisPtr);
			p->setLoggingService(*reinterpret_cast<Trentino::Example::Logging::LoggingService**>(params[0]));
		}
		static void TRENTINO_STDCALL reflx_cppImplementation_Lifecycle_Init_Method(void* thisPtr, void* /*retVal*/, void* /*params*/[])
		{
			Trentino::Example::BasicCalculator::CalculatorImpl* p = 
			static_cast<Trentino::Example::BasicCalculator::CalculatorImpl*>(thisPtr);
		    p->onInit();
		}
	    
	 
	 	 	//a setter method is needed for each property of the componentType
		//For every class with more than one base class, a corresponding castCall() function must be generated 
		//and registered in the reflection class.   This also applies to the class if any of its predecessors 
		//have more than one base class or even there are more than one base classes in the whole inheritance 
		//hierarchy since this causes the same kind of problem as with direct inheritance.  As as a robust 
		//solution can be considered the generation of cast function for all classes disregarding the actual 
		//number of base classes.		
		static void* TRENTINO_STDCALL castCallMyComponent (void* thisPtr, const char* castInto )
		{
			
			if(strcmp(castInto, "Trentino::Example::BasicCalculator::Calculator") == 0)
			{
				return static_cast<Trentino::Example::BasicCalculator::Calculator*>
				(static_cast<Trentino::Example::BasicCalculator::CalculatorImpl*>(thisPtr));
			}
			
			return thisPtr;
		}
		
		//construction
		
		public:
		InitializerTrentino_Example_BasicCalculator_CalculatorImplRflx()
		{

			//struct is necessary to find correct parameterlist by runtime
			static const Trentino::Reflection::Data::Method::Param deleteParamMyComponent[] = {{"Trentino::Example::BasicCalculator::CalculatorImpl *"}};
			static const Trentino::Reflection::Data::Method::Param setLoggingServiceMethodParams[] = {{"Trentino::Example::Logging::LoggingService *" }};
			//define all "public" functions seen by reflection runtime
			static Trentino::Reflection::Data::Method::MetaData mdmMyComponent[] = {
			{ "setLoggingService", nullptr, setLoggingServiceMethodParams, COUNT_OF(setLoggingServiceMethodParams), setLoggingServiceMethod },
			/*init lifecycle method*/
			{ "onInit", nullptr, nullptr, 0, reflx_cppImplementation_Lifecycle_Init_Method },
            //word "new" is reserved and can be overloaded with parameter constructors, will be
			//called by ReflectObject::newInstance
			{ "new", "Trentino::Example::BasicCalculator::CalculatorImpl*", nullptr, 0, newObjectNoParam },
			//word "delete" is reserved for destroying object and will be called by 
			//ReflectObject::deleteInstance or ReflectObject::deleteRegisteredInstance
			{ "delete", nullptr, deleteParamMyComponent, COUNT_OF(deleteParamMyComponent), deleteObject },
			{"trentino_internal_impl_cpp_invoke_do_not_use_this_name",nullptr,trentino_internal_invoke_cpp_componentParam,COUNT_OF(trentino_internal_invoke_cpp_componentParam),impl_cpp_invoke},
         };

         //register whole object
         static Trentino::Reflection::Data::Object::MetaData mdo = { 
            "Trentino::Example::BasicCalculator::CalculatorImpl", 
            nullptr, //passing a pointer to the generated cast call function
            mdmMyComponent, //ok register here my methodlist, incl. new and delete functions
            COUNT_OF(mdmMyComponent), //number of functions
         };

         // store it in initializer class to unregister it by destructor
         mmdoHandle = &mdo;

         //register class in reflection runtime
         Trentino::Reflection::Registration::registerMetaData(GenContributionInfo::getDataRegistry(),*mmdoHandle);
      }

      ~InitializerTrentino_Example_BasicCalculator_CalculatorImplRflx()
      {
         //Important: don´t forget to unregister, rflx dlls can be unloaded!
         Trentino::Reflection::Registration::unregisterMetaData(GenContributionInfo::getDataRegistry(),*mmdoHandle);
      }

      //data
   private:
      Trentino::Reflection::Data::Object::MetaData* mmdoHandle;

   };//class InitializerTrentino_Example_BasicCalculator_CalculatorImplRflx
   static InitializerTrentino_Example_BasicCalculator_CalculatorImplRflx mInitializerTrentino_Example_BasicCalculator_CalculatorImplRflx1;

  
  
}//namespace Gen
}//namespace Trentino

