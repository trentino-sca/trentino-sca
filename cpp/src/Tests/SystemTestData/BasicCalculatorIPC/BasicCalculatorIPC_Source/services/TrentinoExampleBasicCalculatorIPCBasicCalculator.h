// Generated by Trentino TDIL CPP interface generator. do not modify

#ifndef TrentinoExampleBasicCalculatorIPCBasicCalculatorH
#define TrentinoExampleBasicCalculatorIPCBasicCalculatorH

#include "BasicCalculatorGlobal.h"

#include <boost/cstdint.hpp>
#include <string>

typedef  boost::int32_t  tint32_t;
typedef  boost::uint32_t  tuint32_t;
typedef  boost::int64_t  tint64_t;
typedef  boost::uint64_t  tuint64_t;

namespace Trentino{
namespace Example{
namespace BasicCalculatorIPC{

class ComplexNumber;
//forward declaration Phone

 //****************************************************************************************************
 //                                         ComplexNumber
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class TRENTINO_EXAMPLE_BASICCALCULATORIPC_IMPORT_EXPORT ComplexNumber{
private:
	tint32_t a_;
	tint32_t b_;

public:
// constructor and destructor---------------------------------------
	ComplexNumber();
	virtual ~ComplexNumber();
// accessors -------------------------------------------------------
	void set_a(tint32_t value);
	tint32_t a() const; 
	void set_b(tint32_t value);
	tint32_t b() const; 
 
}; //class ComplexNumber

 //****************************************************************************************************
 //                                         BasicCalculator
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class BasicCalculator{

public:
//forward declaration Address
class Address;
//forward declaration ComplexNumber

class Phone;
//forward declaration Person
class Person;
//forward declaration TupleComplexNumber
class TupleComplexNumber;
//forward declaration ValidationException
class ValidationException;

public:

 //****************************************************************************************************
 //                                         Address
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class TRENTINO_EXAMPLE_BASICCALCULATORIPC_IMPORT_EXPORT Address{
private:
	std::string* street_;
	BasicCalculator::Phone* phone_;

public:
// constructor and destructor---------------------------------------
	Address();
	virtual ~Address();
// default instance
   static const Address& default_instance();
// accessors -------------------------------------------------------
 	const std::string& street() const;
 	void set_street(const std::string& value);
	void set_street(const char* value);
	void set_street(const char* value, size_t size);
	BasicCalculator::Phone* mutable_phone();
	BasicCalculator::Phone& phone() const;
	bool has_phone() const;
 
 //default instance data
 private:
   static Address* default_instance_;
}; //class Address



 //****************************************************************************************************
 //                                         Phone
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class TRENTINO_EXAMPLE_BASICCALCULATORIPC_IMPORT_EXPORT Phone{
private:
	std::string* home_;
	std::string* mobile_;

public:
// constructor and destructor---------------------------------------
	Phone();
	virtual ~Phone();
// accessors -------------------------------------------------------
 	const std::string& home() const;
 	void set_home(const std::string& value);
	void set_home(const char* value);
	void set_home(const char* value, size_t size);
 	const std::string& mobile() const;
 	void set_mobile(const std::string& value);
	void set_mobile(const char* value);
	void set_mobile(const char* value, size_t size);
 
}; //class Phone

 //****************************************************************************************************
 //                                         Person
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class TRENTINO_EXAMPLE_BASICCALCULATORIPC_IMPORT_EXPORT Person{
private:
	BasicCalculator::Address* addres_;
	std::string* name_;
	std::string* surname_;
	BasicCalculator::Person* mother_;

public:
// constructor and destructor---------------------------------------
	Person();
	virtual ~Person();
// default instance
   static const Person& default_instance();
// accessors -------------------------------------------------------
	BasicCalculator::Address* mutable_addres();
	BasicCalculator::Address& addres() const;
	bool has_addres() const;
 	const std::string& name() const;
 	void set_name(const std::string& value);
	void set_name(const char* value);
	void set_name(const char* value, size_t size);
 	const std::string& surname() const;
 	void set_surname(const std::string& value);
	void set_surname(const char* value);
	void set_surname(const char* value, size_t size);
	BasicCalculator::Person* mutable_mother();
	BasicCalculator::Person& mother() const;
	bool has_mother() const;
 
 //default instance data
 private:
   static Person* default_instance_;
}; //class Person

 //****************************************************************************************************
 //                                         TupleComplexNumber
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class TRENTINO_EXAMPLE_BASICCALCULATORIPC_IMPORT_EXPORT TupleComplexNumber{
private:
	ComplexNumber* a_;
	ComplexNumber* b_;

public:
// constructor and destructor---------------------------------------
	TupleComplexNumber();
	virtual ~TupleComplexNumber();
// default instance
   static const TupleComplexNumber& default_instance();
// accessors -------------------------------------------------------
	ComplexNumber* mutable_a();
	ComplexNumber& a() const;
	bool has_a() const;
	ComplexNumber* mutable_b();
	ComplexNumber& b() const;
	bool has_b() const;
 
 //default instance data
 private:
   static TupleComplexNumber* default_instance_;
}; //class TupleComplexNumber

 //****************************************************************************************************
 //                                         ValidationException
 //****************************************************************************************************
 //! \brief 
 //****************************************************************************************************
class TRENTINO_EXAMPLE_BASICCALCULATORIPC_IMPORT_EXPORT ValidationException{
private:
	std::string* details_;

public:
// constructor and destructor---------------------------------------
	ValidationException();
	virtual ~ValidationException();
// accessors -------------------------------------------------------
 	const std::string& details() const;
 	void set_details(const std::string& value);
	void set_details(const char* value);
	void set_details(const char* value, size_t size);
 
}; //class ValidationException
  //services
public:
	virtual ComplexNumber add (const ComplexNumber& a,const ComplexNumber& b) =0;
	virtual tint32_t addSimple (const tint32_t a,const tint32_t b) =0;
	virtual ComplexNumber divide (const ComplexNumber& a,const ComplexNumber& b) =0;
	virtual void multiply (const ComplexNumber& a,const ComplexNumber& b, ComplexNumber& c) =0;
	virtual ComplexNumber divide2 (const BasicCalculator::TupleComplexNumber& tuple) =0;
	virtual tuint32_t calculateAge (const BasicCalculator::Person& person) throw (BasicCalculator::ValidationException)=0;
  
}; //class BasicCalculator
} //namespace Trentino
} //namespace Example
} //namespace BasicCalculatorIPC



#endif //TrentinoExampleBasicCalculatorIPCBasicCalculatorH