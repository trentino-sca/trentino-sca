/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DeviceService_H
#define DeviceService_H

#include <thrift/TDispatchProcessor.h>
#include "Device_types.h"

namespace siemens { namespace bt { namespace device {

class DeviceServiceIf {
 public:
  virtual ~DeviceServiceIf() {}
  virtual void getInterfaceVersion(std::string& _return) = 0;
  virtual bool setControlProgramState(const std::string& authenticationToken, const  ::siemens::bt::type::ControlProgramState::type ctrlState) = 0;
  virtual  ::siemens::bt::type::ControlProgramState::type getControlProgramState(const std::string& authenticationToken) = 0;
  virtual void getASN(std::string& _return, const std::string& authenticationToken) = 0;
  virtual void authenticate( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) = 0;
  virtual void authorize( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) = 0;
  virtual void authenticateUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& formerToken, const std::string& username, const std::string& passwordHash) = 0;
  virtual void updateUserProfile(const std::string& authenticationToken, const  ::siemens::bt::type::User& user) = 0;
  virtual bool changePassword(const std::string& authenticationToken, const std::string& passwordMd5Hash) = 0;
  virtual void logoutUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) = 0;
  virtual void updateSession(const std::string& authenticationToken) = 0;
  virtual bool Authenticated(const std::string& dicpAuthToken) = 0;
  virtual void getName(std::string& _return, const std::string& authenticationToken) = 0;
  virtual int32_t getLocalDeviceInst() = 0;
  virtual void getFirmwareRevision(std::string& _return) = 0;
  virtual void createRestorePoint(const std::string& authenticationToken, const bool logoutUser) = 0;
  virtual void updateData(Data& _return, const std::string& authenticationToken, const Data& clientData) = 0;
  virtual bool setDeviceState(const std::string& authenticationToken, const  ::siemens::bt::type::DeviceState::type state) = 0;
  virtual void restartDevice(const std::string& authenticationToken, const bool createRestorePoint, const bool logoutUser) = 0;
};

class DeviceServiceIfFactory {
 public:
  typedef DeviceServiceIf Handler;

  virtual ~DeviceServiceIfFactory() {}

  virtual DeviceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DeviceServiceIf* /* handler */) = 0;
};

class DeviceServiceIfSingletonFactory : virtual public DeviceServiceIfFactory {
 public:
  DeviceServiceIfSingletonFactory(const boost::shared_ptr<DeviceServiceIf>& iface) : iface_(iface) {}
  virtual ~DeviceServiceIfSingletonFactory() {}

  virtual DeviceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DeviceServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DeviceServiceIf> iface_;
};

class DeviceServiceNull : virtual public DeviceServiceIf {
 public:
  virtual ~DeviceServiceNull() {}
  void getInterfaceVersion(std::string& /* _return */) {
    return;
  }
  bool setControlProgramState(const std::string& /* authenticationToken */, const  ::siemens::bt::type::ControlProgramState::type /* ctrlState */) {
    bool _return = false;
    return _return;
  }
   ::siemens::bt::type::ControlProgramState::type getControlProgramState(const std::string& /* authenticationToken */) {
     ::siemens::bt::type::ControlProgramState::type _return = ( ::siemens::bt::type::ControlProgramState::type)0;
    return _return;
  }
  void getASN(std::string& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void authenticate( ::siemens::bt::type::AuthenticationResult& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void authorize( ::siemens::bt::type::AuthenticationResult& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void authenticateUser( ::siemens::bt::type::AuthenticationResult& /* _return */, const std::string& /* formerToken */, const std::string& /* username */, const std::string& /* passwordHash */) {
    return;
  }
  void updateUserProfile(const std::string& /* authenticationToken */, const  ::siemens::bt::type::User& /* user */) {
    return;
  }
  bool changePassword(const std::string& /* authenticationToken */, const std::string& /* passwordMd5Hash */) {
    bool _return = false;
    return _return;
  }
  void logoutUser( ::siemens::bt::type::AuthenticationResult& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void updateSession(const std::string& /* authenticationToken */) {
    return;
  }
  bool Authenticated(const std::string& /* dicpAuthToken */) {
    bool _return = false;
    return _return;
  }
  void getName(std::string& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  int32_t getLocalDeviceInst() {
    int32_t _return = 0;
    return _return;
  }
  void getFirmwareRevision(std::string& /* _return */) {
    return;
  }
  void createRestorePoint(const std::string& /* authenticationToken */, const bool /* logoutUser */) {
    return;
  }
  void updateData(Data& /* _return */, const std::string& /* authenticationToken */, const Data& /* clientData */) {
    return;
  }
  bool setDeviceState(const std::string& /* authenticationToken */, const  ::siemens::bt::type::DeviceState::type /* state */) {
    bool _return = false;
    return _return;
  }
  void restartDevice(const std::string& /* authenticationToken */, const bool /* createRestorePoint */, const bool /* logoutUser */) {
    return;
  }
};


class DeviceService_getInterfaceVersion_args {
 public:

  DeviceService_getInterfaceVersion_args() {
  }

  virtual ~DeviceService_getInterfaceVersion_args() throw() {}


  bool operator == (const DeviceService_getInterfaceVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceService_getInterfaceVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getInterfaceVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_getInterfaceVersion_pargs {
 public:


  virtual ~DeviceService_getInterfaceVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getInterfaceVersion_result__isset {
  _DeviceService_getInterfaceVersion_result__isset() : success(false) {}
  bool success;
} _DeviceService_getInterfaceVersion_result__isset;

class DeviceService_getInterfaceVersion_result {
 public:

  DeviceService_getInterfaceVersion_result() : success() {
  }

  virtual ~DeviceService_getInterfaceVersion_result() throw() {}

  std::string success;

  _DeviceService_getInterfaceVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceService_getInterfaceVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getInterfaceVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getInterfaceVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getInterfaceVersion_presult__isset {
  _DeviceService_getInterfaceVersion_presult__isset() : success(false) {}
  bool success;
} _DeviceService_getInterfaceVersion_presult__isset;

class DeviceService_getInterfaceVersion_presult {
 public:


  virtual ~DeviceService_getInterfaceVersion_presult() throw() {}

  std::string* success;

  _DeviceService_getInterfaceVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_setControlProgramState_args__isset {
  _DeviceService_setControlProgramState_args__isset() : authenticationToken(false), ctrlState(false) {}
  bool authenticationToken;
  bool ctrlState;
} _DeviceService_setControlProgramState_args__isset;

class DeviceService_setControlProgramState_args {
 public:

  DeviceService_setControlProgramState_args() : authenticationToken(), ctrlState(( ::siemens::bt::type::ControlProgramState::type)0) {
  }

  virtual ~DeviceService_setControlProgramState_args() throw() {}

  std::string authenticationToken;
   ::siemens::bt::type::ControlProgramState::type ctrlState;

  _DeviceService_setControlProgramState_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_ctrlState(const  ::siemens::bt::type::ControlProgramState::type val) {
    ctrlState = val;
  }

  bool operator == (const DeviceService_setControlProgramState_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(ctrlState == rhs.ctrlState))
      return false;
    return true;
  }
  bool operator != (const DeviceService_setControlProgramState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_setControlProgramState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_setControlProgramState_pargs {
 public:


  virtual ~DeviceService_setControlProgramState_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::siemens::bt::type::ControlProgramState::type* ctrlState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_setControlProgramState_result__isset {
  _DeviceService_setControlProgramState_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DeviceService_setControlProgramState_result__isset;

class DeviceService_setControlProgramState_result {
 public:

  DeviceService_setControlProgramState_result() : success(0) {
  }

  virtual ~DeviceService_setControlProgramState_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DeviceService_setControlProgramState_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DeviceService_setControlProgramState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_setControlProgramState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_setControlProgramState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_setControlProgramState_presult__isset {
  _DeviceService_setControlProgramState_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DeviceService_setControlProgramState_presult__isset;

class DeviceService_setControlProgramState_presult {
 public:


  virtual ~DeviceService_setControlProgramState_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DeviceService_setControlProgramState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_getControlProgramState_args__isset {
  _DeviceService_getControlProgramState_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_getControlProgramState_args__isset;

class DeviceService_getControlProgramState_args {
 public:

  DeviceService_getControlProgramState_args() : authenticationToken() {
  }

  virtual ~DeviceService_getControlProgramState_args() throw() {}

  std::string authenticationToken;

  _DeviceService_getControlProgramState_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_getControlProgramState_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getControlProgramState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getControlProgramState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_getControlProgramState_pargs {
 public:


  virtual ~DeviceService_getControlProgramState_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getControlProgramState_result__isset {
  _DeviceService_getControlProgramState_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DeviceService_getControlProgramState_result__isset;

class DeviceService_getControlProgramState_result {
 public:

  DeviceService_getControlProgramState_result() : success(( ::siemens::bt::type::ControlProgramState::type)0) {
  }

  virtual ~DeviceService_getControlProgramState_result() throw() {}

   ::siemens::bt::type::ControlProgramState::type success;
   ::siemens::bt::error::BaException baException;

  _DeviceService_getControlProgramState_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::ControlProgramState::type val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DeviceService_getControlProgramState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getControlProgramState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getControlProgramState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getControlProgramState_presult__isset {
  _DeviceService_getControlProgramState_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DeviceService_getControlProgramState_presult__isset;

class DeviceService_getControlProgramState_presult {
 public:


  virtual ~DeviceService_getControlProgramState_presult() throw() {}

   ::siemens::bt::type::ControlProgramState::type* success;
   ::siemens::bt::error::BaException baException;

  _DeviceService_getControlProgramState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_getASN_args__isset {
  _DeviceService_getASN_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_getASN_args__isset;

class DeviceService_getASN_args {
 public:

  DeviceService_getASN_args() : authenticationToken() {
  }

  virtual ~DeviceService_getASN_args() throw() {}

  std::string authenticationToken;

  _DeviceService_getASN_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_getASN_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getASN_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getASN_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_getASN_pargs {
 public:


  virtual ~DeviceService_getASN_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getASN_result__isset {
  _DeviceService_getASN_result__isset() : success(false) {}
  bool success;
} _DeviceService_getASN_result__isset;

class DeviceService_getASN_result {
 public:

  DeviceService_getASN_result() : success() {
  }

  virtual ~DeviceService_getASN_result() throw() {}

  std::string success;

  _DeviceService_getASN_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceService_getASN_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getASN_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getASN_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getASN_presult__isset {
  _DeviceService_getASN_presult__isset() : success(false) {}
  bool success;
} _DeviceService_getASN_presult__isset;

class DeviceService_getASN_presult {
 public:


  virtual ~DeviceService_getASN_presult() throw() {}

  std::string* success;

  _DeviceService_getASN_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_authenticate_args__isset {
  _DeviceService_authenticate_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_authenticate_args__isset;

class DeviceService_authenticate_args {
 public:

  DeviceService_authenticate_args() : authenticationToken() {
  }

  virtual ~DeviceService_authenticate_args() throw() {}

  std::string authenticationToken;

  _DeviceService_authenticate_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_authenticate_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_authenticate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_authenticate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_authenticate_pargs {
 public:


  virtual ~DeviceService_authenticate_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_authenticate_result__isset {
  _DeviceService_authenticate_result__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_authenticate_result__isset;

class DeviceService_authenticate_result {
 public:

  DeviceService_authenticate_result() {
  }

  virtual ~DeviceService_authenticate_result() throw() {}

   ::siemens::bt::type::AuthenticationResult success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_authenticate_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::AuthenticationResult& val) {
    success = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  void __set_systemException(const  ::siemens::bt::error::SystemException& val) {
    systemException = val;
  }

  bool operator == (const DeviceService_authenticate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(userException == rhs.userException))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_authenticate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_authenticate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_authenticate_presult__isset {
  _DeviceService_authenticate_presult__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_authenticate_presult__isset;

class DeviceService_authenticate_presult {
 public:


  virtual ~DeviceService_authenticate_presult() throw() {}

   ::siemens::bt::type::AuthenticationResult* success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_authenticate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_authorize_args__isset {
  _DeviceService_authorize_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_authorize_args__isset;

class DeviceService_authorize_args {
 public:

  DeviceService_authorize_args() : authenticationToken() {
  }

  virtual ~DeviceService_authorize_args() throw() {}

  std::string authenticationToken;

  _DeviceService_authorize_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_authorize_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_authorize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_authorize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_authorize_pargs {
 public:


  virtual ~DeviceService_authorize_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_authorize_result__isset {
  _DeviceService_authorize_result__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_authorize_result__isset;

class DeviceService_authorize_result {
 public:

  DeviceService_authorize_result() {
  }

  virtual ~DeviceService_authorize_result() throw() {}

   ::siemens::bt::type::AuthenticationResult success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_authorize_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::AuthenticationResult& val) {
    success = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  void __set_systemException(const  ::siemens::bt::error::SystemException& val) {
    systemException = val;
  }

  bool operator == (const DeviceService_authorize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(userException == rhs.userException))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_authorize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_authorize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_authorize_presult__isset {
  _DeviceService_authorize_presult__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_authorize_presult__isset;

class DeviceService_authorize_presult {
 public:


  virtual ~DeviceService_authorize_presult() throw() {}

   ::siemens::bt::type::AuthenticationResult* success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_authorize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_authenticateUser_args__isset {
  _DeviceService_authenticateUser_args__isset() : formerToken(false), username(false), passwordHash(false) {}
  bool formerToken;
  bool username;
  bool passwordHash;
} _DeviceService_authenticateUser_args__isset;

class DeviceService_authenticateUser_args {
 public:

  DeviceService_authenticateUser_args() : formerToken(), username(), passwordHash() {
  }

  virtual ~DeviceService_authenticateUser_args() throw() {}

  std::string formerToken;
  std::string username;
  std::string passwordHash;

  _DeviceService_authenticateUser_args__isset __isset;

  void __set_formerToken(const std::string& val) {
    formerToken = val;
  }

  void __set_username(const std::string& val) {
    username = val;
  }

  void __set_passwordHash(const std::string& val) {
    passwordHash = val;
  }

  bool operator == (const DeviceService_authenticateUser_args & rhs) const
  {
    if (!(formerToken == rhs.formerToken))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(passwordHash == rhs.passwordHash))
      return false;
    return true;
  }
  bool operator != (const DeviceService_authenticateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_authenticateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_authenticateUser_pargs {
 public:


  virtual ~DeviceService_authenticateUser_pargs() throw() {}

  const std::string* formerToken;
  const std::string* username;
  const std::string* passwordHash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_authenticateUser_result__isset {
  _DeviceService_authenticateUser_result__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_authenticateUser_result__isset;

class DeviceService_authenticateUser_result {
 public:

  DeviceService_authenticateUser_result() {
  }

  virtual ~DeviceService_authenticateUser_result() throw() {}

   ::siemens::bt::type::AuthenticationResult success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_authenticateUser_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::AuthenticationResult& val) {
    success = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  void __set_systemException(const  ::siemens::bt::error::SystemException& val) {
    systemException = val;
  }

  bool operator == (const DeviceService_authenticateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(userException == rhs.userException))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_authenticateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_authenticateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_authenticateUser_presult__isset {
  _DeviceService_authenticateUser_presult__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_authenticateUser_presult__isset;

class DeviceService_authenticateUser_presult {
 public:


  virtual ~DeviceService_authenticateUser_presult() throw() {}

   ::siemens::bt::type::AuthenticationResult* success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_authenticateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_updateUserProfile_args__isset {
  _DeviceService_updateUserProfile_args__isset() : authenticationToken(false), user(false) {}
  bool authenticationToken;
  bool user;
} _DeviceService_updateUserProfile_args__isset;

class DeviceService_updateUserProfile_args {
 public:

  DeviceService_updateUserProfile_args() : authenticationToken() {
  }

  virtual ~DeviceService_updateUserProfile_args() throw() {}

  std::string authenticationToken;
   ::siemens::bt::type::User user;

  _DeviceService_updateUserProfile_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_user(const  ::siemens::bt::type::User& val) {
    user = val;
  }

  bool operator == (const DeviceService_updateUserProfile_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const DeviceService_updateUserProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_updateUserProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_updateUserProfile_pargs {
 public:


  virtual ~DeviceService_updateUserProfile_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::siemens::bt::type::User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_updateUserProfile_result__isset {
  _DeviceService_updateUserProfile_result__isset() : userException(false) {}
  bool userException;
} _DeviceService_updateUserProfile_result__isset;

class DeviceService_updateUserProfile_result {
 public:

  DeviceService_updateUserProfile_result() {
  }

  virtual ~DeviceService_updateUserProfile_result() throw() {}

   ::siemens::bt::error::UserException userException;

  _DeviceService_updateUserProfile_result__isset __isset;

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  bool operator == (const DeviceService_updateUserProfile_result & rhs) const
  {
    if (!(userException == rhs.userException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_updateUserProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_updateUserProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_updateUserProfile_presult__isset {
  _DeviceService_updateUserProfile_presult__isset() : userException(false) {}
  bool userException;
} _DeviceService_updateUserProfile_presult__isset;

class DeviceService_updateUserProfile_presult {
 public:


  virtual ~DeviceService_updateUserProfile_presult() throw() {}

   ::siemens::bt::error::UserException userException;

  _DeviceService_updateUserProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_changePassword_args__isset {
  _DeviceService_changePassword_args__isset() : authenticationToken(false), passwordMd5Hash(false) {}
  bool authenticationToken;
  bool passwordMd5Hash;
} _DeviceService_changePassword_args__isset;

class DeviceService_changePassword_args {
 public:

  DeviceService_changePassword_args() : authenticationToken(), passwordMd5Hash() {
  }

  virtual ~DeviceService_changePassword_args() throw() {}

  std::string authenticationToken;
  std::string passwordMd5Hash;

  _DeviceService_changePassword_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_passwordMd5Hash(const std::string& val) {
    passwordMd5Hash = val;
  }

  bool operator == (const DeviceService_changePassword_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(passwordMd5Hash == rhs.passwordMd5Hash))
      return false;
    return true;
  }
  bool operator != (const DeviceService_changePassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_changePassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_changePassword_pargs {
 public:


  virtual ~DeviceService_changePassword_pargs() throw() {}

  const std::string* authenticationToken;
  const std::string* passwordMd5Hash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_changePassword_result__isset {
  _DeviceService_changePassword_result__isset() : success(false) {}
  bool success;
} _DeviceService_changePassword_result__isset;

class DeviceService_changePassword_result {
 public:

  DeviceService_changePassword_result() : success(0) {
  }

  virtual ~DeviceService_changePassword_result() throw() {}

  bool success;

  _DeviceService_changePassword_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceService_changePassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_changePassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_changePassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_changePassword_presult__isset {
  _DeviceService_changePassword_presult__isset() : success(false) {}
  bool success;
} _DeviceService_changePassword_presult__isset;

class DeviceService_changePassword_presult {
 public:


  virtual ~DeviceService_changePassword_presult() throw() {}

  bool* success;

  _DeviceService_changePassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_logoutUser_args__isset {
  _DeviceService_logoutUser_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_logoutUser_args__isset;

class DeviceService_logoutUser_args {
 public:

  DeviceService_logoutUser_args() : authenticationToken() {
  }

  virtual ~DeviceService_logoutUser_args() throw() {}

  std::string authenticationToken;

  _DeviceService_logoutUser_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_logoutUser_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_logoutUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_logoutUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_logoutUser_pargs {
 public:


  virtual ~DeviceService_logoutUser_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_logoutUser_result__isset {
  _DeviceService_logoutUser_result__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_logoutUser_result__isset;

class DeviceService_logoutUser_result {
 public:

  DeviceService_logoutUser_result() {
  }

  virtual ~DeviceService_logoutUser_result() throw() {}

   ::siemens::bt::type::AuthenticationResult success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_logoutUser_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::AuthenticationResult& val) {
    success = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  void __set_systemException(const  ::siemens::bt::error::SystemException& val) {
    systemException = val;
  }

  bool operator == (const DeviceService_logoutUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(userException == rhs.userException))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_logoutUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_logoutUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_logoutUser_presult__isset {
  _DeviceService_logoutUser_presult__isset() : success(false), userException(false), systemException(false) {}
  bool success;
  bool userException;
  bool systemException;
} _DeviceService_logoutUser_presult__isset;

class DeviceService_logoutUser_presult {
 public:


  virtual ~DeviceService_logoutUser_presult() throw() {}

   ::siemens::bt::type::AuthenticationResult* success;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_logoutUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_updateSession_args__isset {
  _DeviceService_updateSession_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_updateSession_args__isset;

class DeviceService_updateSession_args {
 public:

  DeviceService_updateSession_args() : authenticationToken() {
  }

  virtual ~DeviceService_updateSession_args() throw() {}

  std::string authenticationToken;

  _DeviceService_updateSession_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_updateSession_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_updateSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_updateSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_updateSession_pargs {
 public:


  virtual ~DeviceService_updateSession_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_Authenticated_args__isset {
  _DeviceService_Authenticated_args__isset() : dicpAuthToken(false) {}
  bool dicpAuthToken;
} _DeviceService_Authenticated_args__isset;

class DeviceService_Authenticated_args {
 public:

  DeviceService_Authenticated_args() : dicpAuthToken() {
  }

  virtual ~DeviceService_Authenticated_args() throw() {}

  std::string dicpAuthToken;

  _DeviceService_Authenticated_args__isset __isset;

  void __set_dicpAuthToken(const std::string& val) {
    dicpAuthToken = val;
  }

  bool operator == (const DeviceService_Authenticated_args & rhs) const
  {
    if (!(dicpAuthToken == rhs.dicpAuthToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_Authenticated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_Authenticated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_Authenticated_pargs {
 public:


  virtual ~DeviceService_Authenticated_pargs() throw() {}

  const std::string* dicpAuthToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_Authenticated_result__isset {
  _DeviceService_Authenticated_result__isset() : success(false) {}
  bool success;
} _DeviceService_Authenticated_result__isset;

class DeviceService_Authenticated_result {
 public:

  DeviceService_Authenticated_result() : success(0) {
  }

  virtual ~DeviceService_Authenticated_result() throw() {}

  bool success;

  _DeviceService_Authenticated_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceService_Authenticated_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_Authenticated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_Authenticated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_Authenticated_presult__isset {
  _DeviceService_Authenticated_presult__isset() : success(false) {}
  bool success;
} _DeviceService_Authenticated_presult__isset;

class DeviceService_Authenticated_presult {
 public:


  virtual ~DeviceService_Authenticated_presult() throw() {}

  bool* success;

  _DeviceService_Authenticated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_getName_args__isset {
  _DeviceService_getName_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DeviceService_getName_args__isset;

class DeviceService_getName_args {
 public:

  DeviceService_getName_args() : authenticationToken() {
  }

  virtual ~DeviceService_getName_args() throw() {}

  std::string authenticationToken;

  _DeviceService_getName_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DeviceService_getName_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_getName_pargs {
 public:


  virtual ~DeviceService_getName_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getName_result__isset {
  _DeviceService_getName_result__isset() : success(false) {}
  bool success;
} _DeviceService_getName_result__isset;

class DeviceService_getName_result {
 public:

  DeviceService_getName_result() : success() {
  }

  virtual ~DeviceService_getName_result() throw() {}

  std::string success;

  _DeviceService_getName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceService_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getName_presult__isset {
  _DeviceService_getName_presult__isset() : success(false) {}
  bool success;
} _DeviceService_getName_presult__isset;

class DeviceService_getName_presult {
 public:


  virtual ~DeviceService_getName_presult() throw() {}

  std::string* success;

  _DeviceService_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DeviceService_getLocalDeviceInst_args {
 public:

  DeviceService_getLocalDeviceInst_args() {
  }

  virtual ~DeviceService_getLocalDeviceInst_args() throw() {}


  bool operator == (const DeviceService_getLocalDeviceInst_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceService_getLocalDeviceInst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getLocalDeviceInst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_getLocalDeviceInst_pargs {
 public:


  virtual ~DeviceService_getLocalDeviceInst_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getLocalDeviceInst_result__isset {
  _DeviceService_getLocalDeviceInst_result__isset() : success(false) {}
  bool success;
} _DeviceService_getLocalDeviceInst_result__isset;

class DeviceService_getLocalDeviceInst_result {
 public:

  DeviceService_getLocalDeviceInst_result() : success(0) {
  }

  virtual ~DeviceService_getLocalDeviceInst_result() throw() {}

  int32_t success;

  _DeviceService_getLocalDeviceInst_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const DeviceService_getLocalDeviceInst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getLocalDeviceInst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getLocalDeviceInst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getLocalDeviceInst_presult__isset {
  _DeviceService_getLocalDeviceInst_presult__isset() : success(false) {}
  bool success;
} _DeviceService_getLocalDeviceInst_presult__isset;

class DeviceService_getLocalDeviceInst_presult {
 public:


  virtual ~DeviceService_getLocalDeviceInst_presult() throw() {}

  int32_t* success;

  _DeviceService_getLocalDeviceInst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DeviceService_getFirmwareRevision_args {
 public:

  DeviceService_getFirmwareRevision_args() {
  }

  virtual ~DeviceService_getFirmwareRevision_args() throw() {}


  bool operator == (const DeviceService_getFirmwareRevision_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceService_getFirmwareRevision_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getFirmwareRevision_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_getFirmwareRevision_pargs {
 public:


  virtual ~DeviceService_getFirmwareRevision_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getFirmwareRevision_result__isset {
  _DeviceService_getFirmwareRevision_result__isset() : success(false) {}
  bool success;
} _DeviceService_getFirmwareRevision_result__isset;

class DeviceService_getFirmwareRevision_result {
 public:

  DeviceService_getFirmwareRevision_result() : success() {
  }

  virtual ~DeviceService_getFirmwareRevision_result() throw() {}

  std::string success;

  _DeviceService_getFirmwareRevision_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DeviceService_getFirmwareRevision_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_getFirmwareRevision_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_getFirmwareRevision_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_getFirmwareRevision_presult__isset {
  _DeviceService_getFirmwareRevision_presult__isset() : success(false) {}
  bool success;
} _DeviceService_getFirmwareRevision_presult__isset;

class DeviceService_getFirmwareRevision_presult {
 public:


  virtual ~DeviceService_getFirmwareRevision_presult() throw() {}

  std::string* success;

  _DeviceService_getFirmwareRevision_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_createRestorePoint_args__isset {
  _DeviceService_createRestorePoint_args__isset() : authenticationToken(false), logoutUser(false) {}
  bool authenticationToken;
  bool logoutUser;
} _DeviceService_createRestorePoint_args__isset;

class DeviceService_createRestorePoint_args {
 public:

  DeviceService_createRestorePoint_args() : authenticationToken(), logoutUser(0) {
  }

  virtual ~DeviceService_createRestorePoint_args() throw() {}

  std::string authenticationToken;
  bool logoutUser;

  _DeviceService_createRestorePoint_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_logoutUser(const bool val) {
    logoutUser = val;
  }

  bool operator == (const DeviceService_createRestorePoint_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(logoutUser == rhs.logoutUser))
      return false;
    return true;
  }
  bool operator != (const DeviceService_createRestorePoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_createRestorePoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_createRestorePoint_pargs {
 public:


  virtual ~DeviceService_createRestorePoint_pargs() throw() {}

  const std::string* authenticationToken;
  const bool* logoutUser;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_createRestorePoint_result {
 public:

  DeviceService_createRestorePoint_result() {
  }

  virtual ~DeviceService_createRestorePoint_result() throw() {}


  bool operator == (const DeviceService_createRestorePoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DeviceService_createRestorePoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_createRestorePoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_createRestorePoint_presult {
 public:


  virtual ~DeviceService_createRestorePoint_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_updateData_args__isset {
  _DeviceService_updateData_args__isset() : authenticationToken(false), clientData(false) {}
  bool authenticationToken;
  bool clientData;
} _DeviceService_updateData_args__isset;

class DeviceService_updateData_args {
 public:

  DeviceService_updateData_args() : authenticationToken() {
  }

  virtual ~DeviceService_updateData_args() throw() {}

  std::string authenticationToken;
  Data clientData;

  _DeviceService_updateData_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_clientData(const Data& val) {
    clientData = val;
  }

  bool operator == (const DeviceService_updateData_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(clientData == rhs.clientData))
      return false;
    return true;
  }
  bool operator != (const DeviceService_updateData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_updateData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_updateData_pargs {
 public:


  virtual ~DeviceService_updateData_pargs() throw() {}

  const std::string* authenticationToken;
  const Data* clientData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_updateData_result__isset {
  _DeviceService_updateData_result__isset() : success(false), cmdException(false), userException(false), systemException(false) {}
  bool success;
  bool cmdException;
  bool userException;
  bool systemException;
} _DeviceService_updateData_result__isset;

class DeviceService_updateData_result {
 public:

  DeviceService_updateData_result() {
  }

  virtual ~DeviceService_updateData_result() throw() {}

  Data success;
   ::siemens::bt::channel::DeviceCmdException cmdException;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_updateData_result__isset __isset;

  void __set_success(const Data& val) {
    success = val;
  }

  void __set_cmdException(const  ::siemens::bt::channel::DeviceCmdException& val) {
    cmdException = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  void __set_systemException(const  ::siemens::bt::error::SystemException& val) {
    systemException = val;
  }

  bool operator == (const DeviceService_updateData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(cmdException == rhs.cmdException))
      return false;
    if (!(userException == rhs.userException))
      return false;
    if (!(systemException == rhs.systemException))
      return false;
    return true;
  }
  bool operator != (const DeviceService_updateData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_updateData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_updateData_presult__isset {
  _DeviceService_updateData_presult__isset() : success(false), cmdException(false), userException(false), systemException(false) {}
  bool success;
  bool cmdException;
  bool userException;
  bool systemException;
} _DeviceService_updateData_presult__isset;

class DeviceService_updateData_presult {
 public:


  virtual ~DeviceService_updateData_presult() throw() {}

  Data* success;
   ::siemens::bt::channel::DeviceCmdException cmdException;
   ::siemens::bt::error::UserException userException;
   ::siemens::bt::error::SystemException systemException;

  _DeviceService_updateData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_setDeviceState_args__isset {
  _DeviceService_setDeviceState_args__isset() : authenticationToken(false), state(false) {}
  bool authenticationToken;
  bool state;
} _DeviceService_setDeviceState_args__isset;

class DeviceService_setDeviceState_args {
 public:

  DeviceService_setDeviceState_args() : authenticationToken(), state(( ::siemens::bt::type::DeviceState::type)0) {
  }

  virtual ~DeviceService_setDeviceState_args() throw() {}

  std::string authenticationToken;
   ::siemens::bt::type::DeviceState::type state;

  _DeviceService_setDeviceState_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_state(const  ::siemens::bt::type::DeviceState::type val) {
    state = val;
  }

  bool operator == (const DeviceService_setDeviceState_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const DeviceService_setDeviceState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_setDeviceState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_setDeviceState_pargs {
 public:


  virtual ~DeviceService_setDeviceState_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::siemens::bt::type::DeviceState::type* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_setDeviceState_result__isset {
  _DeviceService_setDeviceState_result__isset() : success(false) {}
  bool success;
} _DeviceService_setDeviceState_result__isset;

class DeviceService_setDeviceState_result {
 public:

  DeviceService_setDeviceState_result() : success(0) {
  }

  virtual ~DeviceService_setDeviceState_result() throw() {}

  bool success;

  _DeviceService_setDeviceState_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DeviceService_setDeviceState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DeviceService_setDeviceState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_setDeviceState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DeviceService_setDeviceState_presult__isset {
  _DeviceService_setDeviceState_presult__isset() : success(false) {}
  bool success;
} _DeviceService_setDeviceState_presult__isset;

class DeviceService_setDeviceState_presult {
 public:


  virtual ~DeviceService_setDeviceState_presult() throw() {}

  bool* success;

  _DeviceService_setDeviceState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DeviceService_restartDevice_args__isset {
  _DeviceService_restartDevice_args__isset() : authenticationToken(false), createRestorePoint(true), logoutUser(true) {}
  bool authenticationToken;
  bool createRestorePoint;
  bool logoutUser;
} _DeviceService_restartDevice_args__isset;

class DeviceService_restartDevice_args {
 public:

  DeviceService_restartDevice_args() : authenticationToken(), createRestorePoint(true), logoutUser(true) {
  }

  virtual ~DeviceService_restartDevice_args() throw() {}

  std::string authenticationToken;
  bool createRestorePoint;
  bool logoutUser;

  _DeviceService_restartDevice_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_createRestorePoint(const bool val) {
    createRestorePoint = val;
  }

  void __set_logoutUser(const bool val) {
    logoutUser = val;
  }

  bool operator == (const DeviceService_restartDevice_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(createRestorePoint == rhs.createRestorePoint))
      return false;
    if (!(logoutUser == rhs.logoutUser))
      return false;
    return true;
  }
  bool operator != (const DeviceService_restartDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceService_restartDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DeviceService_restartDevice_pargs {
 public:


  virtual ~DeviceService_restartDevice_pargs() throw() {}

  const std::string* authenticationToken;
  const bool* createRestorePoint;
  const bool* logoutUser;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class DeviceServiceClient : virtual public DeviceServiceIf {
 public:
  DeviceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DeviceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getInterfaceVersion(std::string& _return);
  void send_getInterfaceVersion();
  void recv_getInterfaceVersion(std::string& _return);
  bool setControlProgramState(const std::string& authenticationToken, const  ::siemens::bt::type::ControlProgramState::type ctrlState);
  void send_setControlProgramState(const std::string& authenticationToken, const  ::siemens::bt::type::ControlProgramState::type ctrlState);
  bool recv_setControlProgramState();
   ::siemens::bt::type::ControlProgramState::type getControlProgramState(const std::string& authenticationToken);
  void send_getControlProgramState(const std::string& authenticationToken);
   ::siemens::bt::type::ControlProgramState::type recv_getControlProgramState();
  void getASN(std::string& _return, const std::string& authenticationToken);
  void send_getASN(const std::string& authenticationToken);
  void recv_getASN(std::string& _return);
  void authenticate( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken);
  void send_authenticate(const std::string& authenticationToken);
  void recv_authenticate( ::siemens::bt::type::AuthenticationResult& _return);
  void authorize( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken);
  void send_authorize(const std::string& authenticationToken);
  void recv_authorize( ::siemens::bt::type::AuthenticationResult& _return);
  void authenticateUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& formerToken, const std::string& username, const std::string& passwordHash);
  void send_authenticateUser(const std::string& formerToken, const std::string& username, const std::string& passwordHash);
  void recv_authenticateUser( ::siemens::bt::type::AuthenticationResult& _return);
  void updateUserProfile(const std::string& authenticationToken, const  ::siemens::bt::type::User& user);
  void send_updateUserProfile(const std::string& authenticationToken, const  ::siemens::bt::type::User& user);
  void recv_updateUserProfile();
  bool changePassword(const std::string& authenticationToken, const std::string& passwordMd5Hash);
  void send_changePassword(const std::string& authenticationToken, const std::string& passwordMd5Hash);
  bool recv_changePassword();
  void logoutUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken);
  void send_logoutUser(const std::string& authenticationToken);
  void recv_logoutUser( ::siemens::bt::type::AuthenticationResult& _return);
  void updateSession(const std::string& authenticationToken);
  void send_updateSession(const std::string& authenticationToken);
  bool Authenticated(const std::string& dicpAuthToken);
  void send_Authenticated(const std::string& dicpAuthToken);
  bool recv_Authenticated();
  void getName(std::string& _return, const std::string& authenticationToken);
  void send_getName(const std::string& authenticationToken);
  void recv_getName(std::string& _return);
  int32_t getLocalDeviceInst();
  void send_getLocalDeviceInst();
  int32_t recv_getLocalDeviceInst();
  void getFirmwareRevision(std::string& _return);
  void send_getFirmwareRevision();
  void recv_getFirmwareRevision(std::string& _return);
  void createRestorePoint(const std::string& authenticationToken, const bool logoutUser);
  void send_createRestorePoint(const std::string& authenticationToken, const bool logoutUser);
  void recv_createRestorePoint();
  void updateData(Data& _return, const std::string& authenticationToken, const Data& clientData);
  void send_updateData(const std::string& authenticationToken, const Data& clientData);
  void recv_updateData(Data& _return);
  bool setDeviceState(const std::string& authenticationToken, const  ::siemens::bt::type::DeviceState::type state);
  void send_setDeviceState(const std::string& authenticationToken, const  ::siemens::bt::type::DeviceState::type state);
  bool recv_setDeviceState();
  void restartDevice(const std::string& authenticationToken, const bool createRestorePoint, const bool logoutUser);
  void send_restartDevice(const std::string& authenticationToken, const bool createRestorePoint, const bool logoutUser);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DeviceServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DeviceServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DeviceServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getInterfaceVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setControlProgramState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getControlProgramState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getASN(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authorize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_changePassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logoutUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Authenticated(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalDeviceInst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFirmwareRevision(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createRestorePoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setDeviceState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restartDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DeviceServiceProcessor(boost::shared_ptr<DeviceServiceIf> iface) :
    iface_(iface) {
    processMap_["getInterfaceVersion"] = &DeviceServiceProcessor::process_getInterfaceVersion;
    processMap_["setControlProgramState"] = &DeviceServiceProcessor::process_setControlProgramState;
    processMap_["getControlProgramState"] = &DeviceServiceProcessor::process_getControlProgramState;
    processMap_["getASN"] = &DeviceServiceProcessor::process_getASN;
    processMap_["authenticate"] = &DeviceServiceProcessor::process_authenticate;
    processMap_["authorize"] = &DeviceServiceProcessor::process_authorize;
    processMap_["authenticateUser"] = &DeviceServiceProcessor::process_authenticateUser;
    processMap_["updateUserProfile"] = &DeviceServiceProcessor::process_updateUserProfile;
    processMap_["changePassword"] = &DeviceServiceProcessor::process_changePassword;
    processMap_["logoutUser"] = &DeviceServiceProcessor::process_logoutUser;
    processMap_["updateSession"] = &DeviceServiceProcessor::process_updateSession;
    processMap_["Authenticated"] = &DeviceServiceProcessor::process_Authenticated;
    processMap_["getName"] = &DeviceServiceProcessor::process_getName;
    processMap_["getLocalDeviceInst"] = &DeviceServiceProcessor::process_getLocalDeviceInst;
    processMap_["getFirmwareRevision"] = &DeviceServiceProcessor::process_getFirmwareRevision;
    processMap_["createRestorePoint"] = &DeviceServiceProcessor::process_createRestorePoint;
    processMap_["updateData"] = &DeviceServiceProcessor::process_updateData;
    processMap_["setDeviceState"] = &DeviceServiceProcessor::process_setDeviceState;
    processMap_["restartDevice"] = &DeviceServiceProcessor::process_restartDevice;
  }

  virtual ~DeviceServiceProcessor() {}
};

class DeviceServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DeviceServiceProcessorFactory(const ::boost::shared_ptr< DeviceServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DeviceServiceIfFactory > handlerFactory_;
};

class DeviceServiceMultiface : virtual public DeviceServiceIf {
 public:
  DeviceServiceMultiface(std::vector<boost::shared_ptr<DeviceServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DeviceServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DeviceServiceIf> > ifaces_;
  DeviceServiceMultiface() {}
  void add(boost::shared_ptr<DeviceServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getInterfaceVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInterfaceVersion(_return);
    }
    ifaces_[i]->getInterfaceVersion(_return);
    return;
  }

  bool setControlProgramState(const std::string& authenticationToken, const  ::siemens::bt::type::ControlProgramState::type ctrlState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setControlProgramState(authenticationToken, ctrlState);
    }
    return ifaces_[i]->setControlProgramState(authenticationToken, ctrlState);
  }

   ::siemens::bt::type::ControlProgramState::type getControlProgramState(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getControlProgramState(authenticationToken);
    }
    return ifaces_[i]->getControlProgramState(authenticationToken);
  }

  void getASN(std::string& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getASN(_return, authenticationToken);
    }
    ifaces_[i]->getASN(_return, authenticationToken);
    return;
  }

  void authenticate( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticate(_return, authenticationToken);
    }
    ifaces_[i]->authenticate(_return, authenticationToken);
    return;
  }

  void authorize( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authorize(_return, authenticationToken);
    }
    ifaces_[i]->authorize(_return, authenticationToken);
    return;
  }

  void authenticateUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& formerToken, const std::string& username, const std::string& passwordHash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticateUser(_return, formerToken, username, passwordHash);
    }
    ifaces_[i]->authenticateUser(_return, formerToken, username, passwordHash);
    return;
  }

  void updateUserProfile(const std::string& authenticationToken, const  ::siemens::bt::type::User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserProfile(authenticationToken, user);
    }
    ifaces_[i]->updateUserProfile(authenticationToken, user);
  }

  bool changePassword(const std::string& authenticationToken, const std::string& passwordMd5Hash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->changePassword(authenticationToken, passwordMd5Hash);
    }
    return ifaces_[i]->changePassword(authenticationToken, passwordMd5Hash);
  }

  void logoutUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logoutUser(_return, authenticationToken);
    }
    ifaces_[i]->logoutUser(_return, authenticationToken);
    return;
  }

  void updateSession(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSession(authenticationToken);
    }
    ifaces_[i]->updateSession(authenticationToken);
  }

  bool Authenticated(const std::string& dicpAuthToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Authenticated(dicpAuthToken);
    }
    return ifaces_[i]->Authenticated(dicpAuthToken);
  }

  void getName(std::string& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getName(_return, authenticationToken);
    }
    ifaces_[i]->getName(_return, authenticationToken);
    return;
  }

  int32_t getLocalDeviceInst() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLocalDeviceInst();
    }
    return ifaces_[i]->getLocalDeviceInst();
  }

  void getFirmwareRevision(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFirmwareRevision(_return);
    }
    ifaces_[i]->getFirmwareRevision(_return);
    return;
  }

  void createRestorePoint(const std::string& authenticationToken, const bool logoutUser) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createRestorePoint(authenticationToken, logoutUser);
    }
    ifaces_[i]->createRestorePoint(authenticationToken, logoutUser);
  }

  void updateData(Data& _return, const std::string& authenticationToken, const Data& clientData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateData(_return, authenticationToken, clientData);
    }
    ifaces_[i]->updateData(_return, authenticationToken, clientData);
    return;
  }

  bool setDeviceState(const std::string& authenticationToken, const  ::siemens::bt::type::DeviceState::type state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setDeviceState(authenticationToken, state);
    }
    return ifaces_[i]->setDeviceState(authenticationToken, state);
  }

  void restartDevice(const std::string& authenticationToken, const bool createRestorePoint, const bool logoutUser) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restartDevice(authenticationToken, createRestorePoint, logoutUser);
    }
    ifaces_[i]->restartDevice(authenticationToken, createRestorePoint, logoutUser);
  }

};

}}} // namespace

#endif
