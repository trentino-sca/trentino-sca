/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ConfigureAndLoad_TYPES_H
#define ConfigureAndLoad_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "Errors_types.h"
#include "DICP_types.h"


namespace siemens { namespace bt { namespace configureandload {

typedef struct _DeviceConfigParameter__isset {
  _DeviceConfigParameter__isset() : devIdent(false), baDevData(false), uriData(false), devInfo(false) {}
  bool devIdent;
  bool baDevData;
  bool uriData;
  bool devInfo;
} _DeviceConfigParameter__isset;

class DeviceConfigParameter {
 public:

  static const char* ascii_fingerprint; // = "EB897302A66E2095E8AE27EC18139026";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x89,0x73,0x02,0xA6,0x6E,0x20,0x95,0xE8,0xAE,0x27,0xEC,0x18,0x13,0x90,0x26};

  DeviceConfigParameter() {
  }

  virtual ~DeviceConfigParameter() throw() {}

   ::dicp::DevIdent devIdent;
   ::dicp::BaDevData baDevData;
   ::dicp::URIData uriData;
   ::dicp::DevInfo devInfo;

  _DeviceConfigParameter__isset __isset;

  void __set_devIdent(const  ::dicp::DevIdent& val) {
    devIdent = val;
    __isset.devIdent = true;
  }

  void __set_baDevData(const  ::dicp::BaDevData& val) {
    baDevData = val;
    __isset.baDevData = true;
  }

  void __set_uriData(const  ::dicp::URIData& val) {
    uriData = val;
    __isset.uriData = true;
  }

  void __set_devInfo(const  ::dicp::DevInfo& val) {
    devInfo = val;
    __isset.devInfo = true;
  }

  bool operator == (const DeviceConfigParameter & rhs) const
  {
    if (__isset.devIdent != rhs.__isset.devIdent)
      return false;
    else if (__isset.devIdent && !(devIdent == rhs.devIdent))
      return false;
    if (__isset.baDevData != rhs.__isset.baDevData)
      return false;
    else if (__isset.baDevData && !(baDevData == rhs.baDevData))
      return false;
    if (__isset.uriData != rhs.__isset.uriData)
      return false;
    else if (__isset.uriData && !(uriData == rhs.uriData))
      return false;
    if (__isset.devInfo != rhs.__isset.devInfo)
      return false;
    else if (__isset.devInfo && !(devInfo == rhs.devInfo))
      return false;
    return true;
  }
  bool operator != (const DeviceConfigParameter &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceConfigParameter & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceConfigParameter &a, DeviceConfigParameter &b);

typedef struct _ConfigureData__isset {
  _ConfigureData__isset() : baDev(false), baPar(false), baNw(false), baPort(false), nwItf(false), devPar(false), utcTime(false), tz(false) {}
  bool baDev;
  bool baPar;
  bool baNw;
  bool baPort;
  bool nwItf;
  bool devPar;
  bool utcTime;
  bool tz;
} _ConfigureData__isset;

class ConfigureData {
 public:

  static const char* ascii_fingerprint; // = "8BCA869142E6BCA94A0FFFAB17F44345";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xCA,0x86,0x91,0x42,0xE6,0xBC,0xA9,0x4A,0x0F,0xFF,0xAB,0x17,0xF4,0x43,0x45};

  ConfigureData() : utcTime(0) {
  }

  virtual ~ConfigureData() throw() {}

   ::dicp::BaDev baDev;
   ::dicp::BaPar baPar;
   ::dicp::BaNw baNw;
  std::vector< ::dicp::BaPort>  baPort;
  std::vector< ::dicp::NwItf>  nwItf;
  DeviceConfigParameter devPar;
  int64_t utcTime;
   ::dicp::TimeSet tz;

  _ConfigureData__isset __isset;

  void __set_baDev(const  ::dicp::BaDev& val) {
    baDev = val;
  }

  void __set_baPar(const  ::dicp::BaPar& val) {
    baPar = val;
  }

  void __set_baNw(const  ::dicp::BaNw& val) {
    baNw = val;
  }

  void __set_baPort(const std::vector< ::dicp::BaPort> & val) {
    baPort = val;
  }

  void __set_nwItf(const std::vector< ::dicp::NwItf> & val) {
    nwItf = val;
  }

  void __set_devPar(const DeviceConfigParameter& val) {
    devPar = val;
  }

  void __set_utcTime(const int64_t val) {
    utcTime = val;
  }

  void __set_tz(const  ::dicp::TimeSet& val) {
    tz = val;
  }

  bool operator == (const ConfigureData & rhs) const
  {
    if (!(baDev == rhs.baDev))
      return false;
    if (!(baPar == rhs.baPar))
      return false;
    if (!(baNw == rhs.baNw))
      return false;
    if (!(baPort == rhs.baPort))
      return false;
    if (!(nwItf == rhs.nwItf))
      return false;
    if (!(devPar == rhs.devPar))
      return false;
    if (!(utcTime == rhs.utcTime))
      return false;
    if (!(tz == rhs.tz))
      return false;
    return true;
  }
  bool operator != (const ConfigureData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConfigureData &a, ConfigureData &b);

}}} // namespace

#endif
