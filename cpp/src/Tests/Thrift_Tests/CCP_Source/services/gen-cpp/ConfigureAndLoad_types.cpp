/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ConfigureAndLoad_types.h"

#include <algorithm>

namespace siemens { namespace bt { namespace configureandload {

const char* DeviceConfigParameter::ascii_fingerprint = "EB897302A66E2095E8AE27EC18139026";
const uint8_t DeviceConfigParameter::binary_fingerprint[16] = {0xEB,0x89,0x73,0x02,0xA6,0x6E,0x20,0x95,0xE8,0xAE,0x27,0xEC,0x18,0x13,0x90,0x26};

uint32_t DeviceConfigParameter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->devIdent.read(iprot);
          this->__isset.devIdent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->baDevData.read(iprot);
          this->__isset.baDevData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->uriData.read(iprot);
          this->__isset.uriData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->devInfo.read(iprot);
          this->__isset.devInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceConfigParameter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceConfigParameter");

  if (this->__isset.devIdent) {
    xfer += oprot->writeFieldBegin("devIdent", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->devIdent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.baDevData) {
    xfer += oprot->writeFieldBegin("baDevData", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->baDevData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uriData) {
    xfer += oprot->writeFieldBegin("uriData", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->uriData.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.devInfo) {
    xfer += oprot->writeFieldBegin("devInfo", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->devInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceConfigParameter &a, DeviceConfigParameter &b) {
  using ::std::swap;
  swap(a.devIdent, b.devIdent);
  swap(a.baDevData, b.baDevData);
  swap(a.uriData, b.uriData);
  swap(a.devInfo, b.devInfo);
  swap(a.__isset, b.__isset);
}

const char* ConfigureData::ascii_fingerprint = "8BCA869142E6BCA94A0FFFAB17F44345";
const uint8_t ConfigureData::binary_fingerprint[16] = {0x8B,0xCA,0x86,0x91,0x42,0xE6,0xBC,0xA9,0x4A,0x0F,0xFF,0xAB,0x17,0xF4,0x43,0x45};

uint32_t ConfigureData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->baDev.read(iprot);
          this->__isset.baDev = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->baPar.read(iprot);
          this->__isset.baPar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->baNw.read(iprot);
          this->__isset.baNw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->baPort.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->baPort.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->baPort[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.baPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nwItf.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->nwItf.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->nwItf[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nwItf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->devPar.read(iprot);
          this->__isset.devPar = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->utcTime);
          this->__isset.utcTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->tz.read(iprot);
          this->__isset.tz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ConfigureData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ConfigureData");

  xfer += oprot->writeFieldBegin("baDev", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->baDev.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baPar", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->baPar.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baNw", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->baNw.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("baPort", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->baPort.size()));
    std::vector< ::dicp::BaPort> ::const_iterator _iter10;
    for (_iter10 = this->baPort.begin(); _iter10 != this->baPort.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nwItf", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nwItf.size()));
    std::vector< ::dicp::NwItf> ::const_iterator _iter11;
    for (_iter11 = this->nwItf.begin(); _iter11 != this->nwItf.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("devPar", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->devPar.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("utcTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->utcTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tz", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->tz.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ConfigureData &a, ConfigureData &b) {
  using ::std::swap;
  swap(a.baDev, b.baDev);
  swap(a.baPar, b.baPar);
  swap(a.baNw, b.baNw);
  swap(a.baPort, b.baPort);
  swap(a.nwItf, b.nwItf);
  swap(a.devPar, b.devPar);
  swap(a.utcTime, b.utcTime);
  swap(a.tz, b.tz);
  swap(a.__isset, b.__isset);
}

}}} // namespace
