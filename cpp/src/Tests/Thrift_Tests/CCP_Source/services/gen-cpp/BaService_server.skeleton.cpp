// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "BaService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::siemens::bt::ba;

class BaServiceHandler : virtual public BaServiceIf {
 public:
  BaServiceHandler() {
    // Your initialization goes here
  }

  void getInterfaceVersion(std::string& _return) {
    // Your implementation goes here
    printf("getInterfaceVersion\n");
  }

  void getLocalDeviceInst( ::siemens::bt::type::Object_Id& _return) {
    // Your implementation goes here
    printf("getLocalDeviceInst\n");
  }

  void readPropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("readPropertyString\n");
  }

  void readPropertyStringArray(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) {
    // Your implementation goes here
    printf("readPropertyStringArray\n");
  }

  void readPropertyStringList(std::vector<std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("readPropertyStringList\n");
  }

  double readPropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("readPropertyReal\n");
  }

  double readPropertyRealArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) {
    // Your implementation goes here
    printf("readPropertyRealArray\n");
  }

  int32_t readPropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("readPropertyInt\n");
  }

  int32_t readPropertyIntArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) {
    // Your implementation goes here
    printf("readPropertyIntArray\n");
  }

  void writePropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value) {
    // Your implementation goes here
    printf("writePropertyString\n");
  }

  double writePropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const double value) {
    // Your implementation goes here
    printf("writePropertyReal\n");
  }

  int32_t writePropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t value) {
    // Your implementation goes here
    printf("writePropertyInt\n");
  }

  void readObjectList(std::vector< ::siemens::bt::type::Object_Id> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("readObjectList\n");
  }

  bool releasePresentValue(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Write_Priority::type writePriority) {
    // Your implementation goes here
    printf("releasePresentValue\n");
  }

  void readProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("readProperty\n");
  }

  void writeProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value) {
    // Your implementation goes here
    printf("writeProperty\n");
  }

  void getPropertyDescription( ::siemens::bt::type::Property_Info& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("getPropertyDescription\n");
  }

  void getProperties(std::vector< ::siemens::bt::type::Property_Type::type> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) {
    // Your implementation goes here
    printf("getProperties\n");
  }

  void getPropertyUnit(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("getPropertyUnit\n");
  }

  void getPropertiesWithDescription(std::vector< ::siemens::bt::type::PropertyDesc_Info> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) {
    // Your implementation goes here
    printf("getPropertiesWithDescription\n");
  }

  void getPropertiesWithText(std::map< ::siemens::bt::type::Property_Type::type, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) {
    // Your implementation goes here
    printf("getPropertiesWithText\n");
  }

  void getPropertyEnum(std::map<int32_t, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    // Your implementation goes here
    printf("getPropertyEnum\n");
  }

  void getRemoteDeviceList(std::vector< ::siemens::bt::type::Object_Id> & _return) {
    // Your implementation goes here
    printf("getRemoteDeviceList\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<BaServiceHandler> handler(new BaServiceHandler());
  shared_ptr<TProcessor> processor(new BaServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

