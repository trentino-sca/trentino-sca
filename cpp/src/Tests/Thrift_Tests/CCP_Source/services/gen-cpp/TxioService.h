/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TxioService_H
#define TxioService_H

#include <thrift/TDispatchProcessor.h>
#include "Txio_types.h"
#include "ChannelService.h"

namespace siemens { namespace bt { namespace txio {

class TxioServiceIf : virtual public  ::siemens::bt::channel::ChannelServiceIf {
 public:
  virtual ~TxioServiceIf() {}
};

class TxioServiceIfFactory : virtual public  ::siemens::bt::channel::ChannelServiceIfFactory {
 public:
  typedef TxioServiceIf Handler;

  virtual ~TxioServiceIfFactory() {}

  virtual TxioServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::siemens::bt::channel::ChannelServiceIf* /* handler */) = 0;
};

class TxioServiceIfSingletonFactory : virtual public TxioServiceIfFactory {
 public:
  TxioServiceIfSingletonFactory(const boost::shared_ptr<TxioServiceIf>& iface) : iface_(iface) {}
  virtual ~TxioServiceIfSingletonFactory() {}

  virtual TxioServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::siemens::bt::channel::ChannelServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TxioServiceIf> iface_;
};

class TxioServiceNull : virtual public TxioServiceIf , virtual public  ::siemens::bt::channel::ChannelServiceNull {
 public:
  virtual ~TxioServiceNull() {}
};

class TxioServiceClient : virtual public TxioServiceIf, public  ::siemens::bt::channel::ChannelServiceClient {
 public:
  TxioServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::siemens::bt::channel::ChannelServiceClient(prot, prot) {}
  TxioServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::siemens::bt::channel::ChannelServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
};

class TxioServiceProcessor : public  ::siemens::bt::channel::ChannelServiceProcessor {
 protected:
  boost::shared_ptr<TxioServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TxioServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  TxioServiceProcessor(boost::shared_ptr<TxioServiceIf> iface) :
     ::siemens::bt::channel::ChannelServiceProcessor(iface),
    iface_(iface) {
  }

  virtual ~TxioServiceProcessor() {}
};

class TxioServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TxioServiceProcessorFactory(const ::boost::shared_ptr< TxioServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TxioServiceIfFactory > handlerFactory_;
};

class TxioServiceMultiface : virtual public TxioServiceIf, public  ::siemens::bt::channel::ChannelServiceMultiface {
 public:
  TxioServiceMultiface(std::vector<boost::shared_ptr<TxioServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<TxioServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::siemens::bt::channel::ChannelServiceMultiface::add(*iter);
    }
  }
  virtual ~TxioServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TxioServiceIf> > ifaces_;
  TxioServiceMultiface() {}
  void add(boost::shared_ptr<TxioServiceIf> iface) {
     ::siemens::bt::channel::ChannelServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
};

}}} // namespace

#endif
