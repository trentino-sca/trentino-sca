/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BaService_H
#define BaService_H

#include <thrift/TDispatchProcessor.h>
#include "Ba_types.h"

namespace siemens { namespace bt { namespace ba {

class BaServiceIf {
 public:
  virtual ~BaServiceIf() {}
  virtual void getInterfaceVersion(std::string& _return) = 0;
  virtual void getLocalDeviceInst( ::siemens::bt::type::Object_Id& _return) = 0;
  virtual void readPropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual void readPropertyStringArray(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) = 0;
  virtual void readPropertyStringList(std::vector<std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual double readPropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual double readPropertyRealArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) = 0;
  virtual int32_t readPropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual int32_t readPropertyIntArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) = 0;
  virtual void writePropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value) = 0;
  virtual double writePropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const double value) = 0;
  virtual int32_t writePropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t value) = 0;
  virtual void readObjectList(std::vector< ::siemens::bt::type::Object_Id> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual bool releasePresentValue(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Write_Priority::type writePriority) = 0;
  virtual void readProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual void writeProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value) = 0;
  virtual void getPropertyDescription( ::siemens::bt::type::Property_Info& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual void getProperties(std::vector< ::siemens::bt::type::Property_Type::type> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) = 0;
  virtual void getPropertyUnit(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual void getPropertiesWithDescription(std::vector< ::siemens::bt::type::PropertyDesc_Info> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) = 0;
  virtual void getPropertiesWithText(std::map< ::siemens::bt::type::Property_Type::type, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) = 0;
  virtual void getPropertyEnum(std::map<int32_t, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) = 0;
  virtual void getRemoteDeviceList(std::vector< ::siemens::bt::type::Object_Id> & _return) = 0;
};

class BaServiceIfFactory {
 public:
  typedef BaServiceIf Handler;

  virtual ~BaServiceIfFactory() {}

  virtual BaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BaServiceIf* /* handler */) = 0;
};

class BaServiceIfSingletonFactory : virtual public BaServiceIfFactory {
 public:
  BaServiceIfSingletonFactory(const boost::shared_ptr<BaServiceIf>& iface) : iface_(iface) {}
  virtual ~BaServiceIfSingletonFactory() {}

  virtual BaServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BaServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BaServiceIf> iface_;
};

class BaServiceNull : virtual public BaServiceIf {
 public:
  virtual ~BaServiceNull() {}
  void getInterfaceVersion(std::string& /* _return */) {
    return;
  }
  void getLocalDeviceInst( ::siemens::bt::type::Object_Id& /* _return */) {
    return;
  }
  void readPropertyString(std::string& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  void readPropertyStringArray(std::string& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const int32_t /* array_index */) {
    return;
  }
  void readPropertyStringList(std::vector<std::string> & /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  double readPropertyReal(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    double _return = (double)0;
    return _return;
  }
  double readPropertyRealArray(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const int32_t /* array_index */) {
    double _return = (double)0;
    return _return;
  }
  int32_t readPropertyInt(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t readPropertyIntArray(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const int32_t /* array_index */) {
    int32_t _return = 0;
    return _return;
  }
  void writePropertyString(std::string& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const std::string& /* value */) {
    return;
  }
  double writePropertyReal(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const double /* value */) {
    double _return = (double)0;
    return _return;
  }
  int32_t writePropertyInt(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const int32_t /* value */) {
    int32_t _return = 0;
    return _return;
  }
  void readObjectList(std::vector< ::siemens::bt::type::Object_Id> & /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  bool releasePresentValue(const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Write_Priority::type /* writePriority */) {
    bool _return = false;
    return _return;
  }
  void readProperty(std::string& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  void writeProperty(std::string& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */, const std::string& /* value */) {
    return;
  }
  void getPropertyDescription( ::siemens::bt::type::Property_Info& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  void getProperties(std::vector< ::siemens::bt::type::Property_Type::type> & /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */) {
    return;
  }
  void getPropertyUnit(std::string& /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  void getPropertiesWithDescription(std::vector< ::siemens::bt::type::PropertyDesc_Info> & /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */) {
    return;
  }
  void getPropertiesWithText(std::map< ::siemens::bt::type::Property_Type::type, std::string> & /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */) {
    return;
  }
  void getPropertyEnum(std::map<int32_t, std::string> & /* _return */, const std::string& /* authToken */, const  ::siemens::bt::type::Object_Id& /* object_id */, const  ::siemens::bt::type::Property_Type::type /* property_type */) {
    return;
  }
  void getRemoteDeviceList(std::vector< ::siemens::bt::type::Object_Id> & /* _return */) {
    return;
  }
};


class BaService_getInterfaceVersion_args {
 public:

  BaService_getInterfaceVersion_args() {
  }

  virtual ~BaService_getInterfaceVersion_args() throw() {}


  bool operator == (const BaService_getInterfaceVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaService_getInterfaceVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getInterfaceVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getInterfaceVersion_pargs {
 public:


  virtual ~BaService_getInterfaceVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getInterfaceVersion_result__isset {
  _BaService_getInterfaceVersion_result__isset() : success(false) {}
  bool success;
} _BaService_getInterfaceVersion_result__isset;

class BaService_getInterfaceVersion_result {
 public:

  BaService_getInterfaceVersion_result() : success() {
  }

  virtual ~BaService_getInterfaceVersion_result() throw() {}

  std::string success;

  _BaService_getInterfaceVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const BaService_getInterfaceVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getInterfaceVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getInterfaceVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getInterfaceVersion_presult__isset {
  _BaService_getInterfaceVersion_presult__isset() : success(false) {}
  bool success;
} _BaService_getInterfaceVersion_presult__isset;

class BaService_getInterfaceVersion_presult {
 public:


  virtual ~BaService_getInterfaceVersion_presult() throw() {}

  std::string* success;

  _BaService_getInterfaceVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaService_getLocalDeviceInst_args {
 public:

  BaService_getLocalDeviceInst_args() {
  }

  virtual ~BaService_getLocalDeviceInst_args() throw() {}


  bool operator == (const BaService_getLocalDeviceInst_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaService_getLocalDeviceInst_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getLocalDeviceInst_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getLocalDeviceInst_pargs {
 public:


  virtual ~BaService_getLocalDeviceInst_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getLocalDeviceInst_result__isset {
  _BaService_getLocalDeviceInst_result__isset() : success(false) {}
  bool success;
} _BaService_getLocalDeviceInst_result__isset;

class BaService_getLocalDeviceInst_result {
 public:

  BaService_getLocalDeviceInst_result() {
  }

  virtual ~BaService_getLocalDeviceInst_result() throw() {}

   ::siemens::bt::type::Object_Id success;

  _BaService_getLocalDeviceInst_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::Object_Id& val) {
    success = val;
  }

  bool operator == (const BaService_getLocalDeviceInst_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getLocalDeviceInst_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getLocalDeviceInst_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getLocalDeviceInst_presult__isset {
  _BaService_getLocalDeviceInst_presult__isset() : success(false) {}
  bool success;
} _BaService_getLocalDeviceInst_presult__isset;

class BaService_getLocalDeviceInst_presult {
 public:


  virtual ~BaService_getLocalDeviceInst_presult() throw() {}

   ::siemens::bt::type::Object_Id* success;

  _BaService_getLocalDeviceInst_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyString_args__isset {
  _BaService_readPropertyString_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_readPropertyString_args__isset;

class BaService_readPropertyString_args {
 public:

  BaService_readPropertyString_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_readPropertyString_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_readPropertyString_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_readPropertyString_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyString_pargs {
 public:


  virtual ~BaService_readPropertyString_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyString_result__isset {
  _BaService_readPropertyString_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyString_result__isset;

class BaService_readPropertyString_result {
 public:

  BaService_readPropertyString_result() : success() {
  }

  virtual ~BaService_readPropertyString_result() throw() {}

  std::string success;

  _BaService_readPropertyString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyString_presult__isset {
  _BaService_readPropertyString_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyString_presult__isset;

class BaService_readPropertyString_presult {
 public:


  virtual ~BaService_readPropertyString_presult() throw() {}

  std::string* success;

  _BaService_readPropertyString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyStringArray_args__isset {
  _BaService_readPropertyStringArray_args__isset() : authToken(false), object_id(false), property_type(false), array_index(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool array_index;
} _BaService_readPropertyStringArray_args__isset;

class BaService_readPropertyStringArray_args {
 public:

  BaService_readPropertyStringArray_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), array_index(0) {
  }

  virtual ~BaService_readPropertyStringArray_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  int32_t array_index;

  _BaService_readPropertyStringArray_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_array_index(const int32_t val) {
    array_index = val;
  }

  bool operator == (const BaService_readPropertyStringArray_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(array_index == rhs.array_index))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyStringArray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyStringArray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyStringArray_pargs {
 public:


  virtual ~BaService_readPropertyStringArray_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const int32_t* array_index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyStringArray_result__isset {
  _BaService_readPropertyStringArray_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyStringArray_result__isset;

class BaService_readPropertyStringArray_result {
 public:

  BaService_readPropertyStringArray_result() : success() {
  }

  virtual ~BaService_readPropertyStringArray_result() throw() {}

  std::string success;

  _BaService_readPropertyStringArray_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyStringArray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyStringArray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyStringArray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyStringArray_presult__isset {
  _BaService_readPropertyStringArray_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyStringArray_presult__isset;

class BaService_readPropertyStringArray_presult {
 public:


  virtual ~BaService_readPropertyStringArray_presult() throw() {}

  std::string* success;

  _BaService_readPropertyStringArray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyStringList_args__isset {
  _BaService_readPropertyStringList_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_readPropertyStringList_args__isset;

class BaService_readPropertyStringList_args {
 public:

  BaService_readPropertyStringList_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_readPropertyStringList_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_readPropertyStringList_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_readPropertyStringList_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyStringList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyStringList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyStringList_pargs {
 public:


  virtual ~BaService_readPropertyStringList_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyStringList_result__isset {
  _BaService_readPropertyStringList_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyStringList_result__isset;

class BaService_readPropertyStringList_result {
 public:

  BaService_readPropertyStringList_result() {
  }

  virtual ~BaService_readPropertyStringList_result() throw() {}

  std::vector<std::string>  success;

  _BaService_readPropertyStringList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyStringList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyStringList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyStringList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyStringList_presult__isset {
  _BaService_readPropertyStringList_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyStringList_presult__isset;

class BaService_readPropertyStringList_presult {
 public:


  virtual ~BaService_readPropertyStringList_presult() throw() {}

  std::vector<std::string> * success;

  _BaService_readPropertyStringList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyReal_args__isset {
  _BaService_readPropertyReal_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_readPropertyReal_args__isset;

class BaService_readPropertyReal_args {
 public:

  BaService_readPropertyReal_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_readPropertyReal_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_readPropertyReal_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_readPropertyReal_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyReal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyReal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyReal_pargs {
 public:


  virtual ~BaService_readPropertyReal_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyReal_result__isset {
  _BaService_readPropertyReal_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyReal_result__isset;

class BaService_readPropertyReal_result {
 public:

  BaService_readPropertyReal_result() : success(0) {
  }

  virtual ~BaService_readPropertyReal_result() throw() {}

  double success;

  _BaService_readPropertyReal_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyReal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyReal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyReal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyReal_presult__isset {
  _BaService_readPropertyReal_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyReal_presult__isset;

class BaService_readPropertyReal_presult {
 public:


  virtual ~BaService_readPropertyReal_presult() throw() {}

  double* success;

  _BaService_readPropertyReal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyRealArray_args__isset {
  _BaService_readPropertyRealArray_args__isset() : authToken(false), object_id(false), property_type(false), array_index(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool array_index;
} _BaService_readPropertyRealArray_args__isset;

class BaService_readPropertyRealArray_args {
 public:

  BaService_readPropertyRealArray_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), array_index(0) {
  }

  virtual ~BaService_readPropertyRealArray_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  int32_t array_index;

  _BaService_readPropertyRealArray_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_array_index(const int32_t val) {
    array_index = val;
  }

  bool operator == (const BaService_readPropertyRealArray_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(array_index == rhs.array_index))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyRealArray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyRealArray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyRealArray_pargs {
 public:


  virtual ~BaService_readPropertyRealArray_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const int32_t* array_index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyRealArray_result__isset {
  _BaService_readPropertyRealArray_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyRealArray_result__isset;

class BaService_readPropertyRealArray_result {
 public:

  BaService_readPropertyRealArray_result() : success(0) {
  }

  virtual ~BaService_readPropertyRealArray_result() throw() {}

  double success;

  _BaService_readPropertyRealArray_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyRealArray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyRealArray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyRealArray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyRealArray_presult__isset {
  _BaService_readPropertyRealArray_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyRealArray_presult__isset;

class BaService_readPropertyRealArray_presult {
 public:


  virtual ~BaService_readPropertyRealArray_presult() throw() {}

  double* success;

  _BaService_readPropertyRealArray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyInt_args__isset {
  _BaService_readPropertyInt_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_readPropertyInt_args__isset;

class BaService_readPropertyInt_args {
 public:

  BaService_readPropertyInt_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_readPropertyInt_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_readPropertyInt_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_readPropertyInt_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyInt_pargs {
 public:


  virtual ~BaService_readPropertyInt_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyInt_result__isset {
  _BaService_readPropertyInt_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyInt_result__isset;

class BaService_readPropertyInt_result {
 public:

  BaService_readPropertyInt_result() : success(0) {
  }

  virtual ~BaService_readPropertyInt_result() throw() {}

  int32_t success;

  _BaService_readPropertyInt_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyInt_presult__isset {
  _BaService_readPropertyInt_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyInt_presult__isset;

class BaService_readPropertyInt_presult {
 public:


  virtual ~BaService_readPropertyInt_presult() throw() {}

  int32_t* success;

  _BaService_readPropertyInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readPropertyIntArray_args__isset {
  _BaService_readPropertyIntArray_args__isset() : authToken(false), object_id(false), property_type(false), array_index(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool array_index;
} _BaService_readPropertyIntArray_args__isset;

class BaService_readPropertyIntArray_args {
 public:

  BaService_readPropertyIntArray_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), array_index(0) {
  }

  virtual ~BaService_readPropertyIntArray_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  int32_t array_index;

  _BaService_readPropertyIntArray_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_array_index(const int32_t val) {
    array_index = val;
  }

  bool operator == (const BaService_readPropertyIntArray_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(array_index == rhs.array_index))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyIntArray_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyIntArray_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readPropertyIntArray_pargs {
 public:


  virtual ~BaService_readPropertyIntArray_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const int32_t* array_index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyIntArray_result__isset {
  _BaService_readPropertyIntArray_result__isset() : success(false) {}
  bool success;
} _BaService_readPropertyIntArray_result__isset;

class BaService_readPropertyIntArray_result {
 public:

  BaService_readPropertyIntArray_result() : success(0) {
  }

  virtual ~BaService_readPropertyIntArray_result() throw() {}

  int32_t success;

  _BaService_readPropertyIntArray_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const BaService_readPropertyIntArray_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readPropertyIntArray_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readPropertyIntArray_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readPropertyIntArray_presult__isset {
  _BaService_readPropertyIntArray_presult__isset() : success(false) {}
  bool success;
} _BaService_readPropertyIntArray_presult__isset;

class BaService_readPropertyIntArray_presult {
 public:


  virtual ~BaService_readPropertyIntArray_presult() throw() {}

  int32_t* success;

  _BaService_readPropertyIntArray_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_writePropertyString_args__isset {
  _BaService_writePropertyString_args__isset() : authToken(false), object_id(false), property_type(false), value(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool value;
} _BaService_writePropertyString_args__isset;

class BaService_writePropertyString_args {
 public:

  BaService_writePropertyString_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), value() {
  }

  virtual ~BaService_writePropertyString_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  std::string value;

  _BaService_writePropertyString_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const BaService_writePropertyString_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const BaService_writePropertyString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writePropertyString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_writePropertyString_pargs {
 public:


  virtual ~BaService_writePropertyString_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writePropertyString_result__isset {
  _BaService_writePropertyString_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writePropertyString_result__isset;

class BaService_writePropertyString_result {
 public:

  BaService_writePropertyString_result() : success() {
  }

  virtual ~BaService_writePropertyString_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _BaService_writePropertyString_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const BaService_writePropertyString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const BaService_writePropertyString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writePropertyString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writePropertyString_presult__isset {
  _BaService_writePropertyString_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writePropertyString_presult__isset;

class BaService_writePropertyString_presult {
 public:


  virtual ~BaService_writePropertyString_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _BaService_writePropertyString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_writePropertyReal_args__isset {
  _BaService_writePropertyReal_args__isset() : authToken(false), object_id(false), property_type(false), value(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool value;
} _BaService_writePropertyReal_args__isset;

class BaService_writePropertyReal_args {
 public:

  BaService_writePropertyReal_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), value(0) {
  }

  virtual ~BaService_writePropertyReal_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  double value;

  _BaService_writePropertyReal_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const BaService_writePropertyReal_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const BaService_writePropertyReal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writePropertyReal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_writePropertyReal_pargs {
 public:


  virtual ~BaService_writePropertyReal_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writePropertyReal_result__isset {
  _BaService_writePropertyReal_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writePropertyReal_result__isset;

class BaService_writePropertyReal_result {
 public:

  BaService_writePropertyReal_result() : success(0) {
  }

  virtual ~BaService_writePropertyReal_result() throw() {}

  double success;
   ::siemens::bt::error::BaException baException;

  _BaService_writePropertyReal_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const BaService_writePropertyReal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const BaService_writePropertyReal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writePropertyReal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writePropertyReal_presult__isset {
  _BaService_writePropertyReal_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writePropertyReal_presult__isset;

class BaService_writePropertyReal_presult {
 public:


  virtual ~BaService_writePropertyReal_presult() throw() {}

  double* success;
   ::siemens::bt::error::BaException baException;

  _BaService_writePropertyReal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_writePropertyInt_args__isset {
  _BaService_writePropertyInt_args__isset() : authToken(false), object_id(false), property_type(false), value(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool value;
} _BaService_writePropertyInt_args__isset;

class BaService_writePropertyInt_args {
 public:

  BaService_writePropertyInt_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), value(0) {
  }

  virtual ~BaService_writePropertyInt_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  int32_t value;

  _BaService_writePropertyInt_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const BaService_writePropertyInt_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const BaService_writePropertyInt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writePropertyInt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_writePropertyInt_pargs {
 public:


  virtual ~BaService_writePropertyInt_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const int32_t* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writePropertyInt_result__isset {
  _BaService_writePropertyInt_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writePropertyInt_result__isset;

class BaService_writePropertyInt_result {
 public:

  BaService_writePropertyInt_result() : success(0) {
  }

  virtual ~BaService_writePropertyInt_result() throw() {}

  int32_t success;
   ::siemens::bt::error::BaException baException;

  _BaService_writePropertyInt_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const BaService_writePropertyInt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const BaService_writePropertyInt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writePropertyInt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writePropertyInt_presult__isset {
  _BaService_writePropertyInt_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writePropertyInt_presult__isset;

class BaService_writePropertyInt_presult {
 public:


  virtual ~BaService_writePropertyInt_presult() throw() {}

  int32_t* success;
   ::siemens::bt::error::BaException baException;

  _BaService_writePropertyInt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readObjectList_args__isset {
  _BaService_readObjectList_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_readObjectList_args__isset;

class BaService_readObjectList_args {
 public:

  BaService_readObjectList_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_readObjectList_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_readObjectList_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_readObjectList_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_readObjectList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readObjectList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readObjectList_pargs {
 public:


  virtual ~BaService_readObjectList_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readObjectList_result__isset {
  _BaService_readObjectList_result__isset() : success(false) {}
  bool success;
} _BaService_readObjectList_result__isset;

class BaService_readObjectList_result {
 public:

  BaService_readObjectList_result() {
  }

  virtual ~BaService_readObjectList_result() throw() {}

  std::vector< ::siemens::bt::type::Object_Id>  success;

  _BaService_readObjectList_result__isset __isset;

  void __set_success(const std::vector< ::siemens::bt::type::Object_Id> & val) {
    success = val;
  }

  bool operator == (const BaService_readObjectList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_readObjectList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readObjectList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readObjectList_presult__isset {
  _BaService_readObjectList_presult__isset() : success(false) {}
  bool success;
} _BaService_readObjectList_presult__isset;

class BaService_readObjectList_presult {
 public:


  virtual ~BaService_readObjectList_presult() throw() {}

  std::vector< ::siemens::bt::type::Object_Id> * success;

  _BaService_readObjectList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_releasePresentValue_args__isset {
  _BaService_releasePresentValue_args__isset() : authToken(false), object_id(false), writePriority(false) {}
  bool authToken;
  bool object_id;
  bool writePriority;
} _BaService_releasePresentValue_args__isset;

class BaService_releasePresentValue_args {
 public:

  BaService_releasePresentValue_args() : authToken(), writePriority(( ::siemens::bt::type::Write_Priority::type)0) {
  }

  virtual ~BaService_releasePresentValue_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Write_Priority::type writePriority;

  _BaService_releasePresentValue_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_writePriority(const  ::siemens::bt::type::Write_Priority::type val) {
    writePriority = val;
  }

  bool operator == (const BaService_releasePresentValue_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(writePriority == rhs.writePriority))
      return false;
    return true;
  }
  bool operator != (const BaService_releasePresentValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_releasePresentValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_releasePresentValue_pargs {
 public:


  virtual ~BaService_releasePresentValue_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Write_Priority::type* writePriority;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_releasePresentValue_result__isset {
  _BaService_releasePresentValue_result__isset() : success(false) {}
  bool success;
} _BaService_releasePresentValue_result__isset;

class BaService_releasePresentValue_result {
 public:

  BaService_releasePresentValue_result() : success(0) {
  }

  virtual ~BaService_releasePresentValue_result() throw() {}

  bool success;

  _BaService_releasePresentValue_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BaService_releasePresentValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_releasePresentValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_releasePresentValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_releasePresentValue_presult__isset {
  _BaService_releasePresentValue_presult__isset() : success(false) {}
  bool success;
} _BaService_releasePresentValue_presult__isset;

class BaService_releasePresentValue_presult {
 public:


  virtual ~BaService_releasePresentValue_presult() throw() {}

  bool* success;

  _BaService_releasePresentValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_readProperty_args__isset {
  _BaService_readProperty_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_readProperty_args__isset;

class BaService_readProperty_args {
 public:

  BaService_readProperty_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_readProperty_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_readProperty_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_readProperty_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_readProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_readProperty_pargs {
 public:


  virtual ~BaService_readProperty_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readProperty_result__isset {
  _BaService_readProperty_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_readProperty_result__isset;

class BaService_readProperty_result {
 public:

  BaService_readProperty_result() : success() {
  }

  virtual ~BaService_readProperty_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _BaService_readProperty_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const BaService_readProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const BaService_readProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_readProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_readProperty_presult__isset {
  _BaService_readProperty_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_readProperty_presult__isset;

class BaService_readProperty_presult {
 public:


  virtual ~BaService_readProperty_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _BaService_readProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_writeProperty_args__isset {
  _BaService_writeProperty_args__isset() : authToken(false), object_id(false), property_type(false), value(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
  bool value;
} _BaService_writeProperty_args__isset;

class BaService_writeProperty_args {
 public:

  BaService_writeProperty_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0), value() {
  }

  virtual ~BaService_writeProperty_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;
  std::string value;

  _BaService_writeProperty_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const BaService_writeProperty_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const BaService_writeProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writeProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_writeProperty_pargs {
 public:


  virtual ~BaService_writeProperty_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writeProperty_result__isset {
  _BaService_writeProperty_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writeProperty_result__isset;

class BaService_writeProperty_result {
 public:

  BaService_writeProperty_result() : success() {
  }

  virtual ~BaService_writeProperty_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _BaService_writeProperty_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const BaService_writeProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const BaService_writeProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_writeProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_writeProperty_presult__isset {
  _BaService_writeProperty_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _BaService_writeProperty_presult__isset;

class BaService_writeProperty_presult {
 public:


  virtual ~BaService_writeProperty_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _BaService_writeProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_getPropertyDescription_args__isset {
  _BaService_getPropertyDescription_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_getPropertyDescription_args__isset;

class BaService_getPropertyDescription_args {
 public:

  BaService_getPropertyDescription_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_getPropertyDescription_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_getPropertyDescription_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_getPropertyDescription_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertyDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertyDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getPropertyDescription_pargs {
 public:


  virtual ~BaService_getPropertyDescription_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertyDescription_result__isset {
  _BaService_getPropertyDescription_result__isset() : success(false) {}
  bool success;
} _BaService_getPropertyDescription_result__isset;

class BaService_getPropertyDescription_result {
 public:

  BaService_getPropertyDescription_result() {
  }

  virtual ~BaService_getPropertyDescription_result() throw() {}

   ::siemens::bt::type::Property_Info success;

  _BaService_getPropertyDescription_result__isset __isset;

  void __set_success(const  ::siemens::bt::type::Property_Info& val) {
    success = val;
  }

  bool operator == (const BaService_getPropertyDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertyDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertyDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertyDescription_presult__isset {
  _BaService_getPropertyDescription_presult__isset() : success(false) {}
  bool success;
} _BaService_getPropertyDescription_presult__isset;

class BaService_getPropertyDescription_presult {
 public:


  virtual ~BaService_getPropertyDescription_presult() throw() {}

   ::siemens::bt::type::Property_Info* success;

  _BaService_getPropertyDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_getProperties_args__isset {
  _BaService_getProperties_args__isset() : authToken(false), object_id(false) {}
  bool authToken;
  bool object_id;
} _BaService_getProperties_args__isset;

class BaService_getProperties_args {
 public:

  BaService_getProperties_args() : authToken() {
  }

  virtual ~BaService_getProperties_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;

  _BaService_getProperties_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  bool operator == (const BaService_getProperties_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    return true;
  }
  bool operator != (const BaService_getProperties_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getProperties_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getProperties_pargs {
 public:


  virtual ~BaService_getProperties_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getProperties_result__isset {
  _BaService_getProperties_result__isset() : success(false) {}
  bool success;
} _BaService_getProperties_result__isset;

class BaService_getProperties_result {
 public:

  BaService_getProperties_result() {
  }

  virtual ~BaService_getProperties_result() throw() {}

  std::vector< ::siemens::bt::type::Property_Type::type>  success;

  _BaService_getProperties_result__isset __isset;

  void __set_success(const std::vector< ::siemens::bt::type::Property_Type::type> & val) {
    success = val;
  }

  bool operator == (const BaService_getProperties_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getProperties_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getProperties_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getProperties_presult__isset {
  _BaService_getProperties_presult__isset() : success(false) {}
  bool success;
} _BaService_getProperties_presult__isset;

class BaService_getProperties_presult {
 public:


  virtual ~BaService_getProperties_presult() throw() {}

  std::vector< ::siemens::bt::type::Property_Type::type> * success;

  _BaService_getProperties_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_getPropertyUnit_args__isset {
  _BaService_getPropertyUnit_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_getPropertyUnit_args__isset;

class BaService_getPropertyUnit_args {
 public:

  BaService_getPropertyUnit_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_getPropertyUnit_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_getPropertyUnit_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_getPropertyUnit_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertyUnit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertyUnit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getPropertyUnit_pargs {
 public:


  virtual ~BaService_getPropertyUnit_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertyUnit_result__isset {
  _BaService_getPropertyUnit_result__isset() : success(false) {}
  bool success;
} _BaService_getPropertyUnit_result__isset;

class BaService_getPropertyUnit_result {
 public:

  BaService_getPropertyUnit_result() : success() {
  }

  virtual ~BaService_getPropertyUnit_result() throw() {}

  std::string success;

  _BaService_getPropertyUnit_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const BaService_getPropertyUnit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertyUnit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertyUnit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertyUnit_presult__isset {
  _BaService_getPropertyUnit_presult__isset() : success(false) {}
  bool success;
} _BaService_getPropertyUnit_presult__isset;

class BaService_getPropertyUnit_presult {
 public:


  virtual ~BaService_getPropertyUnit_presult() throw() {}

  std::string* success;

  _BaService_getPropertyUnit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_getPropertiesWithDescription_args__isset {
  _BaService_getPropertiesWithDescription_args__isset() : authToken(false), object_id(false) {}
  bool authToken;
  bool object_id;
} _BaService_getPropertiesWithDescription_args__isset;

class BaService_getPropertiesWithDescription_args {
 public:

  BaService_getPropertiesWithDescription_args() : authToken() {
  }

  virtual ~BaService_getPropertiesWithDescription_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;

  _BaService_getPropertiesWithDescription_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  bool operator == (const BaService_getPropertiesWithDescription_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertiesWithDescription_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertiesWithDescription_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getPropertiesWithDescription_pargs {
 public:


  virtual ~BaService_getPropertiesWithDescription_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertiesWithDescription_result__isset {
  _BaService_getPropertiesWithDescription_result__isset() : success(false) {}
  bool success;
} _BaService_getPropertiesWithDescription_result__isset;

class BaService_getPropertiesWithDescription_result {
 public:

  BaService_getPropertiesWithDescription_result() {
  }

  virtual ~BaService_getPropertiesWithDescription_result() throw() {}

  std::vector< ::siemens::bt::type::PropertyDesc_Info>  success;

  _BaService_getPropertiesWithDescription_result__isset __isset;

  void __set_success(const std::vector< ::siemens::bt::type::PropertyDesc_Info> & val) {
    success = val;
  }

  bool operator == (const BaService_getPropertiesWithDescription_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertiesWithDescription_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertiesWithDescription_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertiesWithDescription_presult__isset {
  _BaService_getPropertiesWithDescription_presult__isset() : success(false) {}
  bool success;
} _BaService_getPropertiesWithDescription_presult__isset;

class BaService_getPropertiesWithDescription_presult {
 public:


  virtual ~BaService_getPropertiesWithDescription_presult() throw() {}

  std::vector< ::siemens::bt::type::PropertyDesc_Info> * success;

  _BaService_getPropertiesWithDescription_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_getPropertiesWithText_args__isset {
  _BaService_getPropertiesWithText_args__isset() : authToken(false), object_id(false) {}
  bool authToken;
  bool object_id;
} _BaService_getPropertiesWithText_args__isset;

class BaService_getPropertiesWithText_args {
 public:

  BaService_getPropertiesWithText_args() : authToken() {
  }

  virtual ~BaService_getPropertiesWithText_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;

  _BaService_getPropertiesWithText_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  bool operator == (const BaService_getPropertiesWithText_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertiesWithText_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertiesWithText_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getPropertiesWithText_pargs {
 public:


  virtual ~BaService_getPropertiesWithText_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertiesWithText_result__isset {
  _BaService_getPropertiesWithText_result__isset() : success(false) {}
  bool success;
} _BaService_getPropertiesWithText_result__isset;

class BaService_getPropertiesWithText_result {
 public:

  BaService_getPropertiesWithText_result() {
  }

  virtual ~BaService_getPropertiesWithText_result() throw() {}

  std::map< ::siemens::bt::type::Property_Type::type, std::string>  success;

  _BaService_getPropertiesWithText_result__isset __isset;

  void __set_success(const std::map< ::siemens::bt::type::Property_Type::type, std::string> & val) {
    success = val;
  }

  bool operator == (const BaService_getPropertiesWithText_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertiesWithText_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertiesWithText_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertiesWithText_presult__isset {
  _BaService_getPropertiesWithText_presult__isset() : success(false) {}
  bool success;
} _BaService_getPropertiesWithText_presult__isset;

class BaService_getPropertiesWithText_presult {
 public:


  virtual ~BaService_getPropertiesWithText_presult() throw() {}

  std::map< ::siemens::bt::type::Property_Type::type, std::string> * success;

  _BaService_getPropertiesWithText_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BaService_getPropertyEnum_args__isset {
  _BaService_getPropertyEnum_args__isset() : authToken(false), object_id(false), property_type(false) {}
  bool authToken;
  bool object_id;
  bool property_type;
} _BaService_getPropertyEnum_args__isset;

class BaService_getPropertyEnum_args {
 public:

  BaService_getPropertyEnum_args() : authToken(), property_type(( ::siemens::bt::type::Property_Type::type)0) {
  }

  virtual ~BaService_getPropertyEnum_args() throw() {}

  std::string authToken;
   ::siemens::bt::type::Object_Id object_id;
   ::siemens::bt::type::Property_Type::type property_type;

  _BaService_getPropertyEnum_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_object_id(const  ::siemens::bt::type::Object_Id& val) {
    object_id = val;
  }

  void __set_property_type(const  ::siemens::bt::type::Property_Type::type val) {
    property_type = val;
  }

  bool operator == (const BaService_getPropertyEnum_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(object_id == rhs.object_id))
      return false;
    if (!(property_type == rhs.property_type))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertyEnum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertyEnum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getPropertyEnum_pargs {
 public:


  virtual ~BaService_getPropertyEnum_pargs() throw() {}

  const std::string* authToken;
  const  ::siemens::bt::type::Object_Id* object_id;
  const  ::siemens::bt::type::Property_Type::type* property_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertyEnum_result__isset {
  _BaService_getPropertyEnum_result__isset() : success(false) {}
  bool success;
} _BaService_getPropertyEnum_result__isset;

class BaService_getPropertyEnum_result {
 public:

  BaService_getPropertyEnum_result() {
  }

  virtual ~BaService_getPropertyEnum_result() throw() {}

  std::map<int32_t, std::string>  success;

  _BaService_getPropertyEnum_result__isset __isset;

  void __set_success(const std::map<int32_t, std::string> & val) {
    success = val;
  }

  bool operator == (const BaService_getPropertyEnum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getPropertyEnum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getPropertyEnum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getPropertyEnum_presult__isset {
  _BaService_getPropertyEnum_presult__isset() : success(false) {}
  bool success;
} _BaService_getPropertyEnum_presult__isset;

class BaService_getPropertyEnum_presult {
 public:


  virtual ~BaService_getPropertyEnum_presult() throw() {}

  std::map<int32_t, std::string> * success;

  _BaService_getPropertyEnum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BaService_getRemoteDeviceList_args {
 public:

  BaService_getRemoteDeviceList_args() {
  }

  virtual ~BaService_getRemoteDeviceList_args() throw() {}


  bool operator == (const BaService_getRemoteDeviceList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BaService_getRemoteDeviceList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getRemoteDeviceList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BaService_getRemoteDeviceList_pargs {
 public:


  virtual ~BaService_getRemoteDeviceList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getRemoteDeviceList_result__isset {
  _BaService_getRemoteDeviceList_result__isset() : success(false) {}
  bool success;
} _BaService_getRemoteDeviceList_result__isset;

class BaService_getRemoteDeviceList_result {
 public:

  BaService_getRemoteDeviceList_result() {
  }

  virtual ~BaService_getRemoteDeviceList_result() throw() {}

  std::vector< ::siemens::bt::type::Object_Id>  success;

  _BaService_getRemoteDeviceList_result__isset __isset;

  void __set_success(const std::vector< ::siemens::bt::type::Object_Id> & val) {
    success = val;
  }

  bool operator == (const BaService_getRemoteDeviceList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BaService_getRemoteDeviceList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaService_getRemoteDeviceList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BaService_getRemoteDeviceList_presult__isset {
  _BaService_getRemoteDeviceList_presult__isset() : success(false) {}
  bool success;
} _BaService_getRemoteDeviceList_presult__isset;

class BaService_getRemoteDeviceList_presult {
 public:


  virtual ~BaService_getRemoteDeviceList_presult() throw() {}

  std::vector< ::siemens::bt::type::Object_Id> * success;

  _BaService_getRemoteDeviceList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BaServiceClient : virtual public BaServiceIf {
 public:
  BaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getInterfaceVersion(std::string& _return);
  void send_getInterfaceVersion();
  void recv_getInterfaceVersion(std::string& _return);
  void getLocalDeviceInst( ::siemens::bt::type::Object_Id& _return);
  void send_getLocalDeviceInst();
  void recv_getLocalDeviceInst( ::siemens::bt::type::Object_Id& _return);
  void readPropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_readPropertyString(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_readPropertyString(std::string& _return);
  void readPropertyStringArray(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index);
  void send_readPropertyStringArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index);
  void recv_readPropertyStringArray(std::string& _return);
  void readPropertyStringList(std::vector<std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_readPropertyStringList(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_readPropertyStringList(std::vector<std::string> & _return);
  double readPropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_readPropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  double recv_readPropertyReal();
  double readPropertyRealArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index);
  void send_readPropertyRealArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index);
  double recv_readPropertyRealArray();
  int32_t readPropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_readPropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  int32_t recv_readPropertyInt();
  int32_t readPropertyIntArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index);
  void send_readPropertyIntArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index);
  int32_t recv_readPropertyIntArray();
  void writePropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value);
  void send_writePropertyString(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value);
  void recv_writePropertyString(std::string& _return);
  double writePropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const double value);
  void send_writePropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const double value);
  double recv_writePropertyReal();
  int32_t writePropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t value);
  void send_writePropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t value);
  int32_t recv_writePropertyInt();
  void readObjectList(std::vector< ::siemens::bt::type::Object_Id> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_readObjectList(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_readObjectList(std::vector< ::siemens::bt::type::Object_Id> & _return);
  bool releasePresentValue(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Write_Priority::type writePriority);
  void send_releasePresentValue(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Write_Priority::type writePriority);
  bool recv_releasePresentValue();
  void readProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_readProperty(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_readProperty(std::string& _return);
  void writeProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value);
  void send_writeProperty(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value);
  void recv_writeProperty(std::string& _return);
  void getPropertyDescription( ::siemens::bt::type::Property_Info& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_getPropertyDescription(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_getPropertyDescription( ::siemens::bt::type::Property_Info& _return);
  void getProperties(std::vector< ::siemens::bt::type::Property_Type::type> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id);
  void send_getProperties(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id);
  void recv_getProperties(std::vector< ::siemens::bt::type::Property_Type::type> & _return);
  void getPropertyUnit(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_getPropertyUnit(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_getPropertyUnit(std::string& _return);
  void getPropertiesWithDescription(std::vector< ::siemens::bt::type::PropertyDesc_Info> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id);
  void send_getPropertiesWithDescription(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id);
  void recv_getPropertiesWithDescription(std::vector< ::siemens::bt::type::PropertyDesc_Info> & _return);
  void getPropertiesWithText(std::map< ::siemens::bt::type::Property_Type::type, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id);
  void send_getPropertiesWithText(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id);
  void recv_getPropertiesWithText(std::map< ::siemens::bt::type::Property_Type::type, std::string> & _return);
  void getPropertyEnum(std::map<int32_t, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void send_getPropertyEnum(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type);
  void recv_getPropertyEnum(std::map<int32_t, std::string> & _return);
  void getRemoteDeviceList(std::vector< ::siemens::bt::type::Object_Id> & _return);
  void send_getRemoteDeviceList();
  void recv_getRemoteDeviceList(std::vector< ::siemens::bt::type::Object_Id> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BaServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BaServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BaServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getInterfaceVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLocalDeviceInst(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyStringArray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyStringList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyReal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyRealArray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readPropertyIntArray(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writePropertyString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writePropertyReal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writePropertyInt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readObjectList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releasePresentValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeProperty(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPropertyDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProperties(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPropertyUnit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPropertiesWithDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPropertiesWithText(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPropertyEnum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRemoteDeviceList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BaServiceProcessor(boost::shared_ptr<BaServiceIf> iface) :
    iface_(iface) {
    processMap_["getInterfaceVersion"] = &BaServiceProcessor::process_getInterfaceVersion;
    processMap_["getLocalDeviceInst"] = &BaServiceProcessor::process_getLocalDeviceInst;
    processMap_["readPropertyString"] = &BaServiceProcessor::process_readPropertyString;
    processMap_["readPropertyStringArray"] = &BaServiceProcessor::process_readPropertyStringArray;
    processMap_["readPropertyStringList"] = &BaServiceProcessor::process_readPropertyStringList;
    processMap_["readPropertyReal"] = &BaServiceProcessor::process_readPropertyReal;
    processMap_["readPropertyRealArray"] = &BaServiceProcessor::process_readPropertyRealArray;
    processMap_["readPropertyInt"] = &BaServiceProcessor::process_readPropertyInt;
    processMap_["readPropertyIntArray"] = &BaServiceProcessor::process_readPropertyIntArray;
    processMap_["writePropertyString"] = &BaServiceProcessor::process_writePropertyString;
    processMap_["writePropertyReal"] = &BaServiceProcessor::process_writePropertyReal;
    processMap_["writePropertyInt"] = &BaServiceProcessor::process_writePropertyInt;
    processMap_["readObjectList"] = &BaServiceProcessor::process_readObjectList;
    processMap_["releasePresentValue"] = &BaServiceProcessor::process_releasePresentValue;
    processMap_["readProperty"] = &BaServiceProcessor::process_readProperty;
    processMap_["writeProperty"] = &BaServiceProcessor::process_writeProperty;
    processMap_["getPropertyDescription"] = &BaServiceProcessor::process_getPropertyDescription;
    processMap_["getProperties"] = &BaServiceProcessor::process_getProperties;
    processMap_["getPropertyUnit"] = &BaServiceProcessor::process_getPropertyUnit;
    processMap_["getPropertiesWithDescription"] = &BaServiceProcessor::process_getPropertiesWithDescription;
    processMap_["getPropertiesWithText"] = &BaServiceProcessor::process_getPropertiesWithText;
    processMap_["getPropertyEnum"] = &BaServiceProcessor::process_getPropertyEnum;
    processMap_["getRemoteDeviceList"] = &BaServiceProcessor::process_getRemoteDeviceList;
  }

  virtual ~BaServiceProcessor() {}
};

class BaServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BaServiceProcessorFactory(const ::boost::shared_ptr< BaServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BaServiceIfFactory > handlerFactory_;
};

class BaServiceMultiface : virtual public BaServiceIf {
 public:
  BaServiceMultiface(std::vector<boost::shared_ptr<BaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BaServiceIf> > ifaces_;
  BaServiceMultiface() {}
  void add(boost::shared_ptr<BaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getInterfaceVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInterfaceVersion(_return);
    }
    ifaces_[i]->getInterfaceVersion(_return);
    return;
  }

  void getLocalDeviceInst( ::siemens::bt::type::Object_Id& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLocalDeviceInst(_return);
    }
    ifaces_[i]->getLocalDeviceInst(_return);
    return;
  }

  void readPropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyString(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->readPropertyString(_return, authToken, object_id, property_type);
    return;
  }

  void readPropertyStringArray(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyStringArray(_return, authToken, object_id, property_type, array_index);
    }
    ifaces_[i]->readPropertyStringArray(_return, authToken, object_id, property_type, array_index);
    return;
  }

  void readPropertyStringList(std::vector<std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyStringList(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->readPropertyStringList(_return, authToken, object_id, property_type);
    return;
  }

  double readPropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyReal(authToken, object_id, property_type);
    }
    return ifaces_[i]->readPropertyReal(authToken, object_id, property_type);
  }

  double readPropertyRealArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyRealArray(authToken, object_id, property_type, array_index);
    }
    return ifaces_[i]->readPropertyRealArray(authToken, object_id, property_type, array_index);
  }

  int32_t readPropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyInt(authToken, object_id, property_type);
    }
    return ifaces_[i]->readPropertyInt(authToken, object_id, property_type);
  }

  int32_t readPropertyIntArray(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t array_index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readPropertyIntArray(authToken, object_id, property_type, array_index);
    }
    return ifaces_[i]->readPropertyIntArray(authToken, object_id, property_type, array_index);
  }

  void writePropertyString(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writePropertyString(_return, authToken, object_id, property_type, value);
    }
    ifaces_[i]->writePropertyString(_return, authToken, object_id, property_type, value);
    return;
  }

  double writePropertyReal(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writePropertyReal(authToken, object_id, property_type, value);
    }
    return ifaces_[i]->writePropertyReal(authToken, object_id, property_type, value);
  }

  int32_t writePropertyInt(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const int32_t value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writePropertyInt(authToken, object_id, property_type, value);
    }
    return ifaces_[i]->writePropertyInt(authToken, object_id, property_type, value);
  }

  void readObjectList(std::vector< ::siemens::bt::type::Object_Id> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readObjectList(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->readObjectList(_return, authToken, object_id, property_type);
    return;
  }

  bool releasePresentValue(const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Write_Priority::type writePriority) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releasePresentValue(authToken, object_id, writePriority);
    }
    return ifaces_[i]->releasePresentValue(authToken, object_id, writePriority);
  }

  void readProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readProperty(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->readProperty(_return, authToken, object_id, property_type);
    return;
  }

  void writeProperty(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeProperty(_return, authToken, object_id, property_type, value);
    }
    ifaces_[i]->writeProperty(_return, authToken, object_id, property_type, value);
    return;
  }

  void getPropertyDescription( ::siemens::bt::type::Property_Info& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPropertyDescription(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->getPropertyDescription(_return, authToken, object_id, property_type);
    return;
  }

  void getProperties(std::vector< ::siemens::bt::type::Property_Type::type> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProperties(_return, authToken, object_id);
    }
    ifaces_[i]->getProperties(_return, authToken, object_id);
    return;
  }

  void getPropertyUnit(std::string& _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPropertyUnit(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->getPropertyUnit(_return, authToken, object_id, property_type);
    return;
  }

  void getPropertiesWithDescription(std::vector< ::siemens::bt::type::PropertyDesc_Info> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPropertiesWithDescription(_return, authToken, object_id);
    }
    ifaces_[i]->getPropertiesWithDescription(_return, authToken, object_id);
    return;
  }

  void getPropertiesWithText(std::map< ::siemens::bt::type::Property_Type::type, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPropertiesWithText(_return, authToken, object_id);
    }
    ifaces_[i]->getPropertiesWithText(_return, authToken, object_id);
    return;
  }

  void getPropertyEnum(std::map<int32_t, std::string> & _return, const std::string& authToken, const  ::siemens::bt::type::Object_Id& object_id, const  ::siemens::bt::type::Property_Type::type property_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPropertyEnum(_return, authToken, object_id, property_type);
    }
    ifaces_[i]->getPropertyEnum(_return, authToken, object_id, property_type);
    return;
  }

  void getRemoteDeviceList(std::vector< ::siemens::bt::type::Object_Id> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRemoteDeviceList(_return);
    }
    ifaces_[i]->getRemoteDeviceList(_return);
    return;
  }

};

}}} // namespace

#endif
