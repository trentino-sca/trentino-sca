/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Trend_types.h"

#include <algorithm>

namespace siemens { namespace bt { namespace trend {

int _kXAxisResolutionTypeValues[] = {
  XAxisResolutionType::ALL,
  XAxisResolutionType::ONE_HOUR,
  XAxisResolutionType::SIX_HOUR,
  XAxisResolutionType::TWELVE_HOUR,
  XAxisResolutionType::ONE_DAY,
  XAxisResolutionType::ONE_WEEK,
  XAxisResolutionType::ONE_MONTH,
  XAxisResolutionType::THREE_MONTH
};
const char* _kXAxisResolutionTypeNames[] = {
  "ALL",
  "ONE_HOUR",
  "SIX_HOUR",
  "TWELVE_HOUR",
  "ONE_DAY",
  "ONE_WEEK",
  "ONE_MONTH",
  "THREE_MONTH"
};
const std::map<int, const char*> _XAxisResolutionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kXAxisResolutionTypeValues, _kXAxisResolutionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kYModeValues[] = {
  YMode::MANUAL,
  YMode::AUTOMATIC
};
const char* _kYModeNames[] = {
  "MANUAL",
  "AUTOMATIC"
};
const std::map<int, const char*> _YMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kYModeValues, _kYModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTrend_Command_TypeValues[] = {
  Trend_Command_Type::CMD_MODIFY_X_AXIS,
  Trend_Command_Type::CMD_MODIFY_Y_AXIS
};
const char* _kTrend_Command_TypeNames[] = {
  "CMD_MODIFY_X_AXIS",
  "CMD_MODIFY_Y_AXIS"
};
const std::map<int, const char*> _Trend_Command_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kTrend_Command_TypeValues, _kTrend_Command_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTrendObjectStateValues[] = {
  TrendObjectState::STATE_EMPTY,
  TrendObjectState::STATE_UPDATING,
  TrendObjectState::STATE_READY,
  TrendObjectState::STATE_ERROR
};
const char* _kTrendObjectStateNames[] = {
  "STATE_EMPTY",
  "STATE_UPDATING",
  "STATE_READY",
  "STATE_ERROR"
};
const std::map<int, const char*> _TrendObjectState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTrendObjectStateValues, _kTrendObjectStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* GetTrendLogDataParamaters::ascii_fingerprint = "8AFCF6019F8EF241A32C84F2A05839CD";
const uint8_t GetTrendLogDataParamaters::binary_fingerprint[16] = {0x8A,0xFC,0xF6,0x01,0x9F,0x8E,0xF2,0x41,0xA3,0x2C,0x84,0xF2,0xA0,0x58,0x39,0xCD};

uint32_t GetTrendLogDataParamaters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxNrOfLogEntries);
          this->__isset.maxNrOfLogEntries = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->refreshLogBuffer);
          this->__isset.refreshLogBuffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetTrendLogDataParamaters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GetTrendLogDataParamaters");

  if (this->__isset.startTime) {
    xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->startTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.endTime) {
    xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->endTime);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxNrOfLogEntries) {
    xfer += oprot->writeFieldBegin("maxNrOfLogEntries", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->maxNrOfLogEntries);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.refreshLogBuffer) {
    xfer += oprot->writeFieldBegin("refreshLogBuffer", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->refreshLogBuffer);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetTrendLogDataParamaters &a, GetTrendLogDataParamaters &b) {
  using ::std::swap;
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.maxNrOfLogEntries, b.maxNrOfLogEntries);
  swap(a.refreshLogBuffer, b.refreshLogBuffer);
  swap(a.__isset, b.__isset);
}

const char* ModifyXAxisSettingsParameters::ascii_fingerprint = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
const uint8_t ModifyXAxisSettingsParameters::binary_fingerprint[16] = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

uint32_t ModifyXAxisSettingsParameters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->xResolution = (XAxisResolutionType::type)ecast0;
          this->__isset.xResolution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModifyXAxisSettingsParameters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ModifyXAxisSettingsParameters");

  xfer += oprot->writeFieldBegin("xResolution", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->xResolution);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ModifyXAxisSettingsParameters &a, ModifyXAxisSettingsParameters &b) {
  using ::std::swap;
  swap(a.xResolution, b.xResolution);
  swap(a.__isset, b.__isset);
}

const char* ModifyYAxisSettingsParameters::ascii_fingerprint = "89DC30E1A7350BDC62BD9B5A0154D469";
const uint8_t ModifyYAxisSettingsParameters::binary_fingerprint[16] = {0x89,0xDC,0x30,0xE1,0xA7,0x35,0x0B,0xDC,0x62,0xBD,0x9B,0x5A,0x01,0x54,0xD4,0x69};

uint32_t ModifyYAxisSettingsParameters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->yMode = (YMode::type)ecast1;
          this->__isset.yMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yMinValue);
          this->__isset.yMinValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->yMaxValue);
          this->__isset.yMaxValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModifyYAxisSettingsParameters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ModifyYAxisSettingsParameters");

  xfer += oprot->writeFieldBegin("yMode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->yMode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.yMinValue) {
    xfer += oprot->writeFieldBegin("yMinValue", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->yMinValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.yMaxValue) {
    xfer += oprot->writeFieldBegin("yMaxValue", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->yMaxValue);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ModifyYAxisSettingsParameters &a, ModifyYAxisSettingsParameters &b) {
  using ::std::swap;
  swap(a.yMode, b.yMode);
  swap(a.yMinValue, b.yMinValue);
  swap(a.yMaxValue, b.yMaxValue);
  swap(a.__isset, b.__isset);
}

const char* ModifyAxisSettingsParameters::ascii_fingerprint = "0CA20551A0AE27256CF12E39E439ACB5";
const uint8_t ModifyAxisSettingsParameters::binary_fingerprint[16] = {0x0C,0xA2,0x05,0x51,0xA0,0xAE,0x27,0x25,0x6C,0xF1,0x2E,0x39,0xE4,0x39,0xAC,0xB5};

uint32_t ModifyAxisSettingsParameters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->modifyXAxisSettingsParameters.read(iprot);
          this->__isset.modifyXAxisSettingsParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->modifyYAxisSettingsParameters.read(iprot);
          this->__isset.modifyYAxisSettingsParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ModifyAxisSettingsParameters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ModifyAxisSettingsParameters");

  if (this->__isset.modifyXAxisSettingsParameters) {
    xfer += oprot->writeFieldBegin("modifyXAxisSettingsParameters", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->modifyXAxisSettingsParameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.modifyYAxisSettingsParameters) {
    xfer += oprot->writeFieldBegin("modifyYAxisSettingsParameters", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->modifyYAxisSettingsParameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ModifyAxisSettingsParameters &a, ModifyAxisSettingsParameters &b) {
  using ::std::swap;
  swap(a.modifyXAxisSettingsParameters, b.modifyXAxisSettingsParameters);
  swap(a.modifyYAxisSettingsParameters, b.modifyYAxisSettingsParameters);
  swap(a.__isset, b.__isset);
}

const char* TrendParameters::ascii_fingerprint = "C5958B8079EE9B7493AD6AE38A34799B";
const uint8_t TrendParameters::binary_fingerprint[16] = {0xC5,0x95,0x8B,0x80,0x79,0xEE,0x9B,0x74,0x93,0xAD,0x6A,0xE3,0x8A,0x34,0x79,0x9B};

uint32_t TrendParameters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->trendId);
          this->__isset.trendId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->command = (Trend_Command_Type::type)ecast2;
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->getTrendLogDataParamaters.read(iprot);
          this->__isset.getTrendLogDataParamaters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->modifyAxisSettingsParameters.read(iprot);
          this->__isset.modifyAxisSettingsParameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TrendParameters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TrendParameters");

  xfer += oprot->writeFieldBegin("trendId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->trendId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.command) {
    xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->command);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.getTrendLogDataParamaters) {
    xfer += oprot->writeFieldBegin("getTrendLogDataParamaters", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->getTrendLogDataParamaters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.modifyAxisSettingsParameters) {
    xfer += oprot->writeFieldBegin("modifyAxisSettingsParameters", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->modifyAxisSettingsParameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TrendParameters &a, TrendParameters &b) {
  using ::std::swap;
  swap(a.trendId, b.trendId);
  swap(a.command, b.command);
  swap(a.getTrendLogDataParamaters, b.getTrendLogDataParamaters);
  swap(a.modifyAxisSettingsParameters, b.modifyAxisSettingsParameters);
  swap(a.__isset, b.__isset);
}

}}} // namespace
