/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Device_TYPES_H
#define Device_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "Errors_types.h"
#include "Channel_types.h"


namespace siemens { namespace bt { namespace device {

typedef struct _Data__isset {
  _Data__isset() : s7State(false), baProperties(false), bus(false) {}
  bool s7State;
  bool baProperties;
  bool bus;
} _Data__isset;

class Data {
 public:

  static const char* ascii_fingerprint; // = "FFFD5F8A97DF7A6362AB6F6B1439B09B";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xFD,0x5F,0x8A,0x97,0xDF,0x7A,0x63,0x62,0xAB,0x6F,0x6B,0x14,0x39,0xB0,0x9B};

  Data() : s7State(( ::siemens::bt::type::ControlProgramState::type)0) {
  }

  virtual ~Data() throw() {}

   ::siemens::bt::type::ControlProgramState::type s7State;
  std::map< ::siemens::bt::type::Property_Type::type, std::string>  baProperties;
  std::map< ::siemens::bt::channel::Channel_Label::type,  ::siemens::bt::channel::BusData>  bus;

  _Data__isset __isset;

  void __set_s7State(const  ::siemens::bt::type::ControlProgramState::type val) {
    s7State = val;
    __isset.s7State = true;
  }

  void __set_baProperties(const std::map< ::siemens::bt::type::Property_Type::type, std::string> & val) {
    baProperties = val;
    __isset.baProperties = true;
  }

  void __set_bus(const std::map< ::siemens::bt::channel::Channel_Label::type,  ::siemens::bt::channel::BusData> & val) {
    bus = val;
    __isset.bus = true;
  }

  bool operator == (const Data & rhs) const
  {
    if (__isset.s7State != rhs.__isset.s7State)
      return false;
    else if (__isset.s7State && !(s7State == rhs.s7State))
      return false;
    if (__isset.baProperties != rhs.__isset.baProperties)
      return false;
    else if (__isset.baProperties && !(baProperties == rhs.baProperties))
      return false;
    if (__isset.bus != rhs.__isset.bus)
      return false;
    else if (__isset.bus && !(bus == rhs.bus))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Data &a, Data &b);

}}} // namespace

#endif
