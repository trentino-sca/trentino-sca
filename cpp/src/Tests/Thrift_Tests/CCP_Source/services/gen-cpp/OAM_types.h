/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef OAM_TYPES_H
#define OAM_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "Errors_types.h"


namespace siemens { namespace bt { namespace oam {

typedef struct _ImageResult__isset {
  _ImageResult__isset() : resultCode(false), mimeType(false) {}
  bool resultCode;
  bool mimeType;
} _ImageResult__isset;

class ImageResult {
 public:

  static const char* ascii_fingerprint; // = "19B5240589E680301A7E32DF3971EFBE";
  static const uint8_t binary_fingerprint[16]; // = {0x19,0xB5,0x24,0x05,0x89,0xE6,0x80,0x30,0x1A,0x7E,0x32,0xDF,0x39,0x71,0xEF,0xBE};

  ImageResult() : resultCode(( ::siemens::bt::type::Result_Code::type)0), mimeType() {
  }

  virtual ~ImageResult() throw() {}

   ::siemens::bt::type::Result_Code::type resultCode;
  std::string mimeType;

  _ImageResult__isset __isset;

  void __set_resultCode(const  ::siemens::bt::type::Result_Code::type val) {
    resultCode = val;
  }

  void __set_mimeType(const std::string& val) {
    mimeType = val;
  }

  bool operator == (const ImageResult & rhs) const
  {
    if (!(resultCode == rhs.resultCode))
      return false;
    if (!(mimeType == rhs.mimeType))
      return false;
    return true;
  }
  bool operator != (const ImageResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ImageResult &a, ImageResult &b);

}}} // namespace

#endif
