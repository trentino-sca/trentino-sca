/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DaliService_H
#define DaliService_H

#include <thrift/TDispatchProcessor.h>
#include "Dali_types.h"
#include "ChannelService.h"

namespace siemens { namespace bt { namespace dali {

class DaliServiceIf : virtual public  ::siemens::bt::channel::ChannelServiceIf {
 public:
  virtual ~DaliServiceIf() {}
  virtual bool isBusy(const std::string& authToken) = 0;
  virtual bool lightsOn(const std::string& authToken) = 0;
  virtual bool lightsOff(const std::string& authToken) = 0;
  virtual bool lightsBlink(const std::string& authToken) = 0;
  virtual bool autoassignDevices(const std::string& authToken) = 0;
  virtual void getOrphans(std::vector< ::siemens::bt::channel::Orphan> & _return, const std::string& authToken) = 0;
  virtual bool blinkOrphan(const std::string& authToken, const int32_t networkAddress) = 0;
  virtual bool blinkPDO(const std::string& authToken, const int32_t deviceLogical) = 0;
  virtual int32_t identifyDevice(const std::string& authToken, const int32_t devKey, const int32_t deviceLogical, const int32_t networkAddress, const bool reset) = 0;
  virtual void resetDevice( ::siemens::bt::channel::Device& _return, const std::string& authToken, const int32_t devKey) = 0;
};

class DaliServiceIfFactory : virtual public  ::siemens::bt::channel::ChannelServiceIfFactory {
 public:
  typedef DaliServiceIf Handler;

  virtual ~DaliServiceIfFactory() {}

  virtual DaliServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::siemens::bt::channel::ChannelServiceIf* /* handler */) = 0;
};

class DaliServiceIfSingletonFactory : virtual public DaliServiceIfFactory {
 public:
  DaliServiceIfSingletonFactory(const boost::shared_ptr<DaliServiceIf>& iface) : iface_(iface) {}
  virtual ~DaliServiceIfSingletonFactory() {}

  virtual DaliServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::siemens::bt::channel::ChannelServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DaliServiceIf> iface_;
};

class DaliServiceNull : virtual public DaliServiceIf , virtual public  ::siemens::bt::channel::ChannelServiceNull {
 public:
  virtual ~DaliServiceNull() {}
  bool isBusy(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  bool lightsOn(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  bool lightsOff(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  bool lightsBlink(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  bool autoassignDevices(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  void getOrphans(std::vector< ::siemens::bt::channel::Orphan> & /* _return */, const std::string& /* authToken */) {
    return;
  }
  bool blinkOrphan(const std::string& /* authToken */, const int32_t /* networkAddress */) {
    bool _return = false;
    return _return;
  }
  bool blinkPDO(const std::string& /* authToken */, const int32_t /* deviceLogical */) {
    bool _return = false;
    return _return;
  }
  int32_t identifyDevice(const std::string& /* authToken */, const int32_t /* devKey */, const int32_t /* deviceLogical */, const int32_t /* networkAddress */, const bool /* reset */) {
    int32_t _return = 0;
    return _return;
  }
  void resetDevice( ::siemens::bt::channel::Device& /* _return */, const std::string& /* authToken */, const int32_t /* devKey */) {
    return;
  }
};

typedef struct _DaliService_isBusy_args__isset {
  _DaliService_isBusy_args__isset() : authToken(false) {}
  bool authToken;
} _DaliService_isBusy_args__isset;

class DaliService_isBusy_args {
 public:

  DaliService_isBusy_args() : authToken() {
  }

  virtual ~DaliService_isBusy_args() throw() {}

  std::string authToken;

  _DaliService_isBusy_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const DaliService_isBusy_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const DaliService_isBusy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_isBusy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_isBusy_pargs {
 public:


  virtual ~DaliService_isBusy_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_isBusy_result__isset {
  _DaliService_isBusy_result__isset() : success(false) {}
  bool success;
} _DaliService_isBusy_result__isset;

class DaliService_isBusy_result {
 public:

  DaliService_isBusy_result() : success(0) {
  }

  virtual ~DaliService_isBusy_result() throw() {}

  bool success;

  _DaliService_isBusy_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const DaliService_isBusy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DaliService_isBusy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_isBusy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_isBusy_presult__isset {
  _DaliService_isBusy_presult__isset() : success(false) {}
  bool success;
} _DaliService_isBusy_presult__isset;

class DaliService_isBusy_presult {
 public:


  virtual ~DaliService_isBusy_presult() throw() {}

  bool* success;

  _DaliService_isBusy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_lightsOn_args__isset {
  _DaliService_lightsOn_args__isset() : authToken(false) {}
  bool authToken;
} _DaliService_lightsOn_args__isset;

class DaliService_lightsOn_args {
 public:

  DaliService_lightsOn_args() : authToken() {
  }

  virtual ~DaliService_lightsOn_args() throw() {}

  std::string authToken;

  _DaliService_lightsOn_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const DaliService_lightsOn_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const DaliService_lightsOn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_lightsOn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_lightsOn_pargs {
 public:


  virtual ~DaliService_lightsOn_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_lightsOn_result__isset {
  _DaliService_lightsOn_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_lightsOn_result__isset;

class DaliService_lightsOn_result {
 public:

  DaliService_lightsOn_result() : success(0) {
  }

  virtual ~DaliService_lightsOn_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DaliService_lightsOn_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_lightsOn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_lightsOn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_lightsOn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_lightsOn_presult__isset {
  _DaliService_lightsOn_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_lightsOn_presult__isset;

class DaliService_lightsOn_presult {
 public:


  virtual ~DaliService_lightsOn_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_lightsOn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_lightsOff_args__isset {
  _DaliService_lightsOff_args__isset() : authToken(false) {}
  bool authToken;
} _DaliService_lightsOff_args__isset;

class DaliService_lightsOff_args {
 public:

  DaliService_lightsOff_args() : authToken() {
  }

  virtual ~DaliService_lightsOff_args() throw() {}

  std::string authToken;

  _DaliService_lightsOff_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const DaliService_lightsOff_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const DaliService_lightsOff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_lightsOff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_lightsOff_pargs {
 public:


  virtual ~DaliService_lightsOff_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_lightsOff_result__isset {
  _DaliService_lightsOff_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_lightsOff_result__isset;

class DaliService_lightsOff_result {
 public:

  DaliService_lightsOff_result() : success(0) {
  }

  virtual ~DaliService_lightsOff_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DaliService_lightsOff_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_lightsOff_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_lightsOff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_lightsOff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_lightsOff_presult__isset {
  _DaliService_lightsOff_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_lightsOff_presult__isset;

class DaliService_lightsOff_presult {
 public:


  virtual ~DaliService_lightsOff_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_lightsOff_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_lightsBlink_args__isset {
  _DaliService_lightsBlink_args__isset() : authToken(false) {}
  bool authToken;
} _DaliService_lightsBlink_args__isset;

class DaliService_lightsBlink_args {
 public:

  DaliService_lightsBlink_args() : authToken() {
  }

  virtual ~DaliService_lightsBlink_args() throw() {}

  std::string authToken;

  _DaliService_lightsBlink_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const DaliService_lightsBlink_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const DaliService_lightsBlink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_lightsBlink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_lightsBlink_pargs {
 public:


  virtual ~DaliService_lightsBlink_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_lightsBlink_result__isset {
  _DaliService_lightsBlink_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_lightsBlink_result__isset;

class DaliService_lightsBlink_result {
 public:

  DaliService_lightsBlink_result() : success(0) {
  }

  virtual ~DaliService_lightsBlink_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DaliService_lightsBlink_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_lightsBlink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_lightsBlink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_lightsBlink_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_lightsBlink_presult__isset {
  _DaliService_lightsBlink_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_lightsBlink_presult__isset;

class DaliService_lightsBlink_presult {
 public:


  virtual ~DaliService_lightsBlink_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_lightsBlink_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_autoassignDevices_args__isset {
  _DaliService_autoassignDevices_args__isset() : authToken(false) {}
  bool authToken;
} _DaliService_autoassignDevices_args__isset;

class DaliService_autoassignDevices_args {
 public:

  DaliService_autoassignDevices_args() : authToken() {
  }

  virtual ~DaliService_autoassignDevices_args() throw() {}

  std::string authToken;

  _DaliService_autoassignDevices_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const DaliService_autoassignDevices_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const DaliService_autoassignDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_autoassignDevices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_autoassignDevices_pargs {
 public:


  virtual ~DaliService_autoassignDevices_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_autoassignDevices_result__isset {
  _DaliService_autoassignDevices_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_autoassignDevices_result__isset;

class DaliService_autoassignDevices_result {
 public:

  DaliService_autoassignDevices_result() : success(0) {
  }

  virtual ~DaliService_autoassignDevices_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DaliService_autoassignDevices_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_autoassignDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_autoassignDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_autoassignDevices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_autoassignDevices_presult__isset {
  _DaliService_autoassignDevices_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_autoassignDevices_presult__isset;

class DaliService_autoassignDevices_presult {
 public:


  virtual ~DaliService_autoassignDevices_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_autoassignDevices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_getOrphans_args__isset {
  _DaliService_getOrphans_args__isset() : authToken(false) {}
  bool authToken;
} _DaliService_getOrphans_args__isset;

class DaliService_getOrphans_args {
 public:

  DaliService_getOrphans_args() : authToken() {
  }

  virtual ~DaliService_getOrphans_args() throw() {}

  std::string authToken;

  _DaliService_getOrphans_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const DaliService_getOrphans_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const DaliService_getOrphans_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_getOrphans_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_getOrphans_pargs {
 public:


  virtual ~DaliService_getOrphans_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_getOrphans_result__isset {
  _DaliService_getOrphans_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_getOrphans_result__isset;

class DaliService_getOrphans_result {
 public:

  DaliService_getOrphans_result() {
  }

  virtual ~DaliService_getOrphans_result() throw() {}

  std::vector< ::siemens::bt::channel::Orphan>  success;
   ::siemens::bt::error::BaException baException;

  _DaliService_getOrphans_result__isset __isset;

  void __set_success(const std::vector< ::siemens::bt::channel::Orphan> & val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_getOrphans_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_getOrphans_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_getOrphans_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_getOrphans_presult__isset {
  _DaliService_getOrphans_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_getOrphans_presult__isset;

class DaliService_getOrphans_presult {
 public:


  virtual ~DaliService_getOrphans_presult() throw() {}

  std::vector< ::siemens::bt::channel::Orphan> * success;
   ::siemens::bt::error::BaException baException;

  _DaliService_getOrphans_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_blinkOrphan_args__isset {
  _DaliService_blinkOrphan_args__isset() : authToken(false), networkAddress(false) {}
  bool authToken;
  bool networkAddress;
} _DaliService_blinkOrphan_args__isset;

class DaliService_blinkOrphan_args {
 public:

  DaliService_blinkOrphan_args() : authToken(), networkAddress(0) {
  }

  virtual ~DaliService_blinkOrphan_args() throw() {}

  std::string authToken;
  int32_t networkAddress;

  _DaliService_blinkOrphan_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_networkAddress(const int32_t val) {
    networkAddress = val;
  }

  bool operator == (const DaliService_blinkOrphan_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(networkAddress == rhs.networkAddress))
      return false;
    return true;
  }
  bool operator != (const DaliService_blinkOrphan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_blinkOrphan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_blinkOrphan_pargs {
 public:


  virtual ~DaliService_blinkOrphan_pargs() throw() {}

  const std::string* authToken;
  const int32_t* networkAddress;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_blinkOrphan_result__isset {
  _DaliService_blinkOrphan_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_blinkOrphan_result__isset;

class DaliService_blinkOrphan_result {
 public:

  DaliService_blinkOrphan_result() : success(0) {
  }

  virtual ~DaliService_blinkOrphan_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DaliService_blinkOrphan_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_blinkOrphan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_blinkOrphan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_blinkOrphan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_blinkOrphan_presult__isset {
  _DaliService_blinkOrphan_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_blinkOrphan_presult__isset;

class DaliService_blinkOrphan_presult {
 public:


  virtual ~DaliService_blinkOrphan_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_blinkOrphan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_blinkPDO_args__isset {
  _DaliService_blinkPDO_args__isset() : authToken(false), deviceLogical(false) {}
  bool authToken;
  bool deviceLogical;
} _DaliService_blinkPDO_args__isset;

class DaliService_blinkPDO_args {
 public:

  DaliService_blinkPDO_args() : authToken(), deviceLogical(0) {
  }

  virtual ~DaliService_blinkPDO_args() throw() {}

  std::string authToken;
  int32_t deviceLogical;

  _DaliService_blinkPDO_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_deviceLogical(const int32_t val) {
    deviceLogical = val;
  }

  bool operator == (const DaliService_blinkPDO_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(deviceLogical == rhs.deviceLogical))
      return false;
    return true;
  }
  bool operator != (const DaliService_blinkPDO_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_blinkPDO_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_blinkPDO_pargs {
 public:


  virtual ~DaliService_blinkPDO_pargs() throw() {}

  const std::string* authToken;
  const int32_t* deviceLogical;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_blinkPDO_result__isset {
  _DaliService_blinkPDO_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_blinkPDO_result__isset;

class DaliService_blinkPDO_result {
 public:

  DaliService_blinkPDO_result() : success(0) {
  }

  virtual ~DaliService_blinkPDO_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _DaliService_blinkPDO_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_blinkPDO_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_blinkPDO_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_blinkPDO_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_blinkPDO_presult__isset {
  _DaliService_blinkPDO_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_blinkPDO_presult__isset;

class DaliService_blinkPDO_presult {
 public:


  virtual ~DaliService_blinkPDO_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_blinkPDO_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_identifyDevice_args__isset {
  _DaliService_identifyDevice_args__isset() : authToken(false), devKey(false), deviceLogical(false), networkAddress(false), reset(false) {}
  bool authToken;
  bool devKey;
  bool deviceLogical;
  bool networkAddress;
  bool reset;
} _DaliService_identifyDevice_args__isset;

class DaliService_identifyDevice_args {
 public:

  DaliService_identifyDevice_args() : authToken(), devKey(0), deviceLogical(0), networkAddress(0), reset(0) {
  }

  virtual ~DaliService_identifyDevice_args() throw() {}

  std::string authToken;
  int32_t devKey;
  int32_t deviceLogical;
  int32_t networkAddress;
  bool reset;

  _DaliService_identifyDevice_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_devKey(const int32_t val) {
    devKey = val;
  }

  void __set_deviceLogical(const int32_t val) {
    deviceLogical = val;
  }

  void __set_networkAddress(const int32_t val) {
    networkAddress = val;
  }

  void __set_reset(const bool val) {
    reset = val;
  }

  bool operator == (const DaliService_identifyDevice_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(devKey == rhs.devKey))
      return false;
    if (!(deviceLogical == rhs.deviceLogical))
      return false;
    if (!(networkAddress == rhs.networkAddress))
      return false;
    if (!(reset == rhs.reset))
      return false;
    return true;
  }
  bool operator != (const DaliService_identifyDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_identifyDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_identifyDevice_pargs {
 public:


  virtual ~DaliService_identifyDevice_pargs() throw() {}

  const std::string* authToken;
  const int32_t* devKey;
  const int32_t* deviceLogical;
  const int32_t* networkAddress;
  const bool* reset;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_identifyDevice_result__isset {
  _DaliService_identifyDevice_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_identifyDevice_result__isset;

class DaliService_identifyDevice_result {
 public:

  DaliService_identifyDevice_result() : success(0) {
  }

  virtual ~DaliService_identifyDevice_result() throw() {}

  int32_t success;
   ::siemens::bt::error::BaException baException;

  _DaliService_identifyDevice_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_identifyDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_identifyDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_identifyDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_identifyDevice_presult__isset {
  _DaliService_identifyDevice_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_identifyDevice_presult__isset;

class DaliService_identifyDevice_presult {
 public:


  virtual ~DaliService_identifyDevice_presult() throw() {}

  int32_t* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_identifyDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DaliService_resetDevice_args__isset {
  _DaliService_resetDevice_args__isset() : authToken(false), devKey(false) {}
  bool authToken;
  bool devKey;
} _DaliService_resetDevice_args__isset;

class DaliService_resetDevice_args {
 public:

  DaliService_resetDevice_args() : authToken(), devKey(0) {
  }

  virtual ~DaliService_resetDevice_args() throw() {}

  std::string authToken;
  int32_t devKey;

  _DaliService_resetDevice_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_devKey(const int32_t val) {
    devKey = val;
  }

  bool operator == (const DaliService_resetDevice_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(devKey == rhs.devKey))
      return false;
    return true;
  }
  bool operator != (const DaliService_resetDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_resetDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DaliService_resetDevice_pargs {
 public:


  virtual ~DaliService_resetDevice_pargs() throw() {}

  const std::string* authToken;
  const int32_t* devKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_resetDevice_result__isset {
  _DaliService_resetDevice_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_resetDevice_result__isset;

class DaliService_resetDevice_result {
 public:

  DaliService_resetDevice_result() {
  }

  virtual ~DaliService_resetDevice_result() throw() {}

   ::siemens::bt::channel::Device success;
   ::siemens::bt::error::BaException baException;

  _DaliService_resetDevice_result__isset __isset;

  void __set_success(const  ::siemens::bt::channel::Device& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const DaliService_resetDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const DaliService_resetDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DaliService_resetDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DaliService_resetDevice_presult__isset {
  _DaliService_resetDevice_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _DaliService_resetDevice_presult__isset;

class DaliService_resetDevice_presult {
 public:


  virtual ~DaliService_resetDevice_presult() throw() {}

   ::siemens::bt::channel::Device* success;
   ::siemens::bt::error::BaException baException;

  _DaliService_resetDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DaliServiceClient : virtual public DaliServiceIf, public  ::siemens::bt::channel::ChannelServiceClient {
 public:
  DaliServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::siemens::bt::channel::ChannelServiceClient(prot, prot) {}
  DaliServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::siemens::bt::channel::ChannelServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool isBusy(const std::string& authToken);
  void send_isBusy(const std::string& authToken);
  bool recv_isBusy();
  bool lightsOn(const std::string& authToken);
  void send_lightsOn(const std::string& authToken);
  bool recv_lightsOn();
  bool lightsOff(const std::string& authToken);
  void send_lightsOff(const std::string& authToken);
  bool recv_lightsOff();
  bool lightsBlink(const std::string& authToken);
  void send_lightsBlink(const std::string& authToken);
  bool recv_lightsBlink();
  bool autoassignDevices(const std::string& authToken);
  void send_autoassignDevices(const std::string& authToken);
  bool recv_autoassignDevices();
  void getOrphans(std::vector< ::siemens::bt::channel::Orphan> & _return, const std::string& authToken);
  void send_getOrphans(const std::string& authToken);
  void recv_getOrphans(std::vector< ::siemens::bt::channel::Orphan> & _return);
  bool blinkOrphan(const std::string& authToken, const int32_t networkAddress);
  void send_blinkOrphan(const std::string& authToken, const int32_t networkAddress);
  bool recv_blinkOrphan();
  bool blinkPDO(const std::string& authToken, const int32_t deviceLogical);
  void send_blinkPDO(const std::string& authToken, const int32_t deviceLogical);
  bool recv_blinkPDO();
  int32_t identifyDevice(const std::string& authToken, const int32_t devKey, const int32_t deviceLogical, const int32_t networkAddress, const bool reset);
  void send_identifyDevice(const std::string& authToken, const int32_t devKey, const int32_t deviceLogical, const int32_t networkAddress, const bool reset);
  int32_t recv_identifyDevice();
  void resetDevice( ::siemens::bt::channel::Device& _return, const std::string& authToken, const int32_t devKey);
  void send_resetDevice(const std::string& authToken, const int32_t devKey);
  void recv_resetDevice( ::siemens::bt::channel::Device& _return);
};

class DaliServiceProcessor : public  ::siemens::bt::channel::ChannelServiceProcessor {
 protected:
  boost::shared_ptr<DaliServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DaliServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_isBusy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lightsOn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lightsOff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lightsBlink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_autoassignDevices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrphans(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_blinkOrphan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_blinkPDO(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_identifyDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resetDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DaliServiceProcessor(boost::shared_ptr<DaliServiceIf> iface) :
     ::siemens::bt::channel::ChannelServiceProcessor(iface),
    iface_(iface) {
    processMap_["isBusy"] = &DaliServiceProcessor::process_isBusy;
    processMap_["lightsOn"] = &DaliServiceProcessor::process_lightsOn;
    processMap_["lightsOff"] = &DaliServiceProcessor::process_lightsOff;
    processMap_["lightsBlink"] = &DaliServiceProcessor::process_lightsBlink;
    processMap_["autoassignDevices"] = &DaliServiceProcessor::process_autoassignDevices;
    processMap_["getOrphans"] = &DaliServiceProcessor::process_getOrphans;
    processMap_["blinkOrphan"] = &DaliServiceProcessor::process_blinkOrphan;
    processMap_["blinkPDO"] = &DaliServiceProcessor::process_blinkPDO;
    processMap_["identifyDevice"] = &DaliServiceProcessor::process_identifyDevice;
    processMap_["resetDevice"] = &DaliServiceProcessor::process_resetDevice;
  }

  virtual ~DaliServiceProcessor() {}
};

class DaliServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DaliServiceProcessorFactory(const ::boost::shared_ptr< DaliServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DaliServiceIfFactory > handlerFactory_;
};

class DaliServiceMultiface : virtual public DaliServiceIf, public  ::siemens::bt::channel::ChannelServiceMultiface {
 public:
  DaliServiceMultiface(std::vector<boost::shared_ptr<DaliServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<DaliServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::siemens::bt::channel::ChannelServiceMultiface::add(*iter);
    }
  }
  virtual ~DaliServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DaliServiceIf> > ifaces_;
  DaliServiceMultiface() {}
  void add(boost::shared_ptr<DaliServiceIf> iface) {
     ::siemens::bt::channel::ChannelServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  bool isBusy(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isBusy(authToken);
    }
    return ifaces_[i]->isBusy(authToken);
  }

  bool lightsOn(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lightsOn(authToken);
    }
    return ifaces_[i]->lightsOn(authToken);
  }

  bool lightsOff(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lightsOff(authToken);
    }
    return ifaces_[i]->lightsOff(authToken);
  }

  bool lightsBlink(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lightsBlink(authToken);
    }
    return ifaces_[i]->lightsBlink(authToken);
  }

  bool autoassignDevices(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->autoassignDevices(authToken);
    }
    return ifaces_[i]->autoassignDevices(authToken);
  }

  void getOrphans(std::vector< ::siemens::bt::channel::Orphan> & _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrphans(_return, authToken);
    }
    ifaces_[i]->getOrphans(_return, authToken);
    return;
  }

  bool blinkOrphan(const std::string& authToken, const int32_t networkAddress) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->blinkOrphan(authToken, networkAddress);
    }
    return ifaces_[i]->blinkOrphan(authToken, networkAddress);
  }

  bool blinkPDO(const std::string& authToken, const int32_t deviceLogical) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->blinkPDO(authToken, deviceLogical);
    }
    return ifaces_[i]->blinkPDO(authToken, deviceLogical);
  }

  int32_t identifyDevice(const std::string& authToken, const int32_t devKey, const int32_t deviceLogical, const int32_t networkAddress, const bool reset) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->identifyDevice(authToken, devKey, deviceLogical, networkAddress, reset);
    }
    return ifaces_[i]->identifyDevice(authToken, devKey, deviceLogical, networkAddress, reset);
  }

  void resetDevice( ::siemens::bt::channel::Device& _return, const std::string& authToken, const int32_t devKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resetDevice(_return, authToken, devKey);
    }
    ifaces_[i]->resetDevice(_return, authToken, devKey);
    return;
  }

};

}}} // namespace

#endif
