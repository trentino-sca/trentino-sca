/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DICPEventService_H
#define DICPEventService_H

#include <thrift/TDispatchProcessor.h>
#include "DICP_types.h"

namespace dicp {

class DICPEventServiceIf {
 public:
  virtual ~DICPEventServiceIf() {}
  virtual void identification(const IdentificationServiceData& data, const std::string& ifversion) = 0;
};

class DICPEventServiceIfFactory {
 public:
  typedef DICPEventServiceIf Handler;

  virtual ~DICPEventServiceIfFactory() {}

  virtual DICPEventServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DICPEventServiceIf* /* handler */) = 0;
};

class DICPEventServiceIfSingletonFactory : virtual public DICPEventServiceIfFactory {
 public:
  DICPEventServiceIfSingletonFactory(const boost::shared_ptr<DICPEventServiceIf>& iface) : iface_(iface) {}
  virtual ~DICPEventServiceIfSingletonFactory() {}

  virtual DICPEventServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DICPEventServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DICPEventServiceIf> iface_;
};

class DICPEventServiceNull : virtual public DICPEventServiceIf {
 public:
  virtual ~DICPEventServiceNull() {}
  void identification(const IdentificationServiceData& /* data */, const std::string& /* ifversion */) {
    return;
  }
};

typedef struct _DICPEventService_identification_args__isset {
  _DICPEventService_identification_args__isset() : data(false), ifversion(false) {}
  bool data;
  bool ifversion;
} _DICPEventService_identification_args__isset;

class DICPEventService_identification_args {
 public:

  DICPEventService_identification_args() : ifversion() {
  }

  virtual ~DICPEventService_identification_args() throw() {}

  IdentificationServiceData data;
  std::string ifversion;

  _DICPEventService_identification_args__isset __isset;

  void __set_data(const IdentificationServiceData& val) {
    data = val;
  }

  void __set_ifversion(const std::string& val) {
    ifversion = val;
  }

  bool operator == (const DICPEventService_identification_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(ifversion == rhs.ifversion))
      return false;
    return true;
  }
  bool operator != (const DICPEventService_identification_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPEventService_identification_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPEventService_identification_pargs {
 public:


  virtual ~DICPEventService_identification_pargs() throw() {}

  const IdentificationServiceData* data;
  const std::string* ifversion;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class DICPEventServiceClient : virtual public DICPEventServiceIf {
 public:
  DICPEventServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DICPEventServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void identification(const IdentificationServiceData& data, const std::string& ifversion);
  void send_identification(const IdentificationServiceData& data, const std::string& ifversion);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DICPEventServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DICPEventServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DICPEventServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_identification(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DICPEventServiceProcessor(boost::shared_ptr<DICPEventServiceIf> iface) :
    iface_(iface) {
    processMap_["identification"] = &DICPEventServiceProcessor::process_identification;
  }

  virtual ~DICPEventServiceProcessor() {}
};

class DICPEventServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DICPEventServiceProcessorFactory(const ::boost::shared_ptr< DICPEventServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DICPEventServiceIfFactory > handlerFactory_;
};

class DICPEventServiceMultiface : virtual public DICPEventServiceIf {
 public:
  DICPEventServiceMultiface(std::vector<boost::shared_ptr<DICPEventServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DICPEventServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DICPEventServiceIf> > ifaces_;
  DICPEventServiceMultiface() {}
  void add(boost::shared_ptr<DICPEventServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void identification(const IdentificationServiceData& data, const std::string& ifversion) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->identification(data, ifversion);
    }
    ifaces_[i]->identification(data, ifversion);
  }

};

} // namespace

#endif
