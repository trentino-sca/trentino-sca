// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DeviceService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::siemens::bt::device;

class DeviceServiceHandler : virtual public DeviceServiceIf {
 public:
  DeviceServiceHandler() {
    // Your initialization goes here
  }

  void getInterfaceVersion(std::string& _return) {
    // Your implementation goes here
    printf("getInterfaceVersion\n");
  }

  bool setControlProgramState(const std::string& authenticationToken, const  ::siemens::bt::type::ControlProgramState::type ctrlState) {
    // Your implementation goes here
    printf("setControlProgramState\n");
  }

   ::siemens::bt::type::ControlProgramState::type getControlProgramState(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getControlProgramState\n");
  }

  void getASN(std::string& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getASN\n");
  }

  void authenticate( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("authenticate\n");
  }

  void authorize( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("authorize\n");
  }

  void authenticateUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& formerToken, const std::string& username, const std::string& passwordHash) {
    // Your implementation goes here
    printf("authenticateUser\n");
  }

  void updateUserProfile(const std::string& authenticationToken, const  ::siemens::bt::type::User& user) {
    // Your implementation goes here
    printf("updateUserProfile\n");
  }

  bool changePassword(const std::string& authenticationToken, const std::string& passwordMd5Hash) {
    // Your implementation goes here
    printf("changePassword\n");
  }

  void logoutUser( ::siemens::bt::type::AuthenticationResult& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("logoutUser\n");
  }

  void updateSession(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("updateSession\n");
  }

  bool Authenticated(const std::string& dicpAuthToken) {
    // Your implementation goes here
    printf("Authenticated\n");
  }

  void getName(std::string& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getName\n");
  }

  int32_t getLocalDeviceInst() {
    // Your implementation goes here
    printf("getLocalDeviceInst\n");
  }

  void getFirmwareRevision(std::string& _return) {
    // Your implementation goes here
    printf("getFirmwareRevision\n");
  }

  void createRestorePoint(const std::string& authenticationToken, const bool logoutUser) {
    // Your implementation goes here
    printf("createRestorePoint\n");
  }

  void updateData(Data& _return, const std::string& authenticationToken, const Data& clientData) {
    // Your implementation goes here
    printf("updateData\n");
  }

  bool setDeviceState(const std::string& authenticationToken, const  ::siemens::bt::type::DeviceState::type state) {
    // Your implementation goes here
    printf("setDeviceState\n");
  }

  void restartDevice(const std::string& authenticationToken, const bool createRestorePoint, const bool logoutUser) {
    // Your implementation goes here
    printf("restartDevice\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DeviceServiceHandler> handler(new DeviceServiceHandler());
  shared_ptr<TProcessor> processor(new DeviceServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

