/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Scheduler_TYPES_H
#define Scheduler_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace siemens { namespace bt { namespace scheduler {

struct ExceptionType {
  enum type {
    READ_ONLY = 0,
    SINGLE = 1,
    MULTIPLE = 2
  };
};

extern const std::map<int, const char*> _ExceptionType_VALUES_TO_NAMES;

struct PeriodType {
  enum type {
    DATE = 0,
    DATE_RANGE = 1,
    WEEKNDAY = 2,
    CALENDAR_REF = 3,
    UNDEFINED = 4
  };
};

extern const std::map<int, const char*> _PeriodType_VALUES_TO_NAMES;

struct Scheduler_Command_Type {
  enum type {
    CMD_SET_PHASE_FOR_DAY = 1,
    CMD_CHANGE_PHASE_FOR_DAY = 2,
    CMD_DELETE_PHASE_FOR_DAY = 3,
    CMD_COPY_DAILY_PROFILE = 4,
    CMD_SET_PHASE_FOR_SPECIAL_EVENT = 5,
    CMD_CHANGE_PHASE_FOR_SPECIAL_EVENT = 6,
    CMD_DELETE_PHASE_FOR_SPECIAL_EVENT = 7,
    CMD_COPY_SPECIAL_EVENT_PROFILE = 8,
    CMD_CREATE_SPECIAL_EVENTS = 9,
    CMD_SET_DATE_RANGE = 10,
    CMD_SET_RECURRING = 11,
    CMD_DELETE_SPECIAL_EVENT = 12,
    CMD_REQ_EXCEPTION_MONTH = 13
  };
};

extern const std::map<int, const char*> _Scheduler_Command_Type_VALUES_TO_NAMES;

typedef struct _Date__isset {
  _Date__isset() : year(false), month(false), day(false) {}
  bool year;
  bool month;
  bool day;
} _Date__isset;

class Date {
 public:

  static const char* ascii_fingerprint; // = "874362235FCCF77E284413CBBBA335FE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

  Date() : year(0), month(0), day(0) {
  }

  virtual ~Date() throw() {}

  int16_t year;
  int8_t month;
  int8_t day;

  _Date__isset __isset;

  void __set_year(const int16_t val) {
    year = val;
  }

  void __set_month(const int8_t val) {
    month = val;
  }

  void __set_day(const int8_t val) {
    day = val;
  }

  bool operator == (const Date & rhs) const
  {
    if (!(year == rhs.year))
      return false;
    if (!(month == rhs.month))
      return false;
    if (!(day == rhs.day))
      return false;
    return true;
  }
  bool operator != (const Date &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Date & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Date &a, Date &b);

typedef struct _WeekNDay__isset {
  _WeekNDay__isset() : month(false), weekOfMonth(false), dayOfWeek(false) {}
  bool month;
  bool weekOfMonth;
  bool dayOfWeek;
} _WeekNDay__isset;

class WeekNDay {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  WeekNDay() : month(0), weekOfMonth(0), dayOfWeek(0) {
  }

  virtual ~WeekNDay() throw() {}

  int32_t month;
  int32_t weekOfMonth;
  int32_t dayOfWeek;

  _WeekNDay__isset __isset;

  void __set_month(const int32_t val) {
    month = val;
  }

  void __set_weekOfMonth(const int32_t val) {
    weekOfMonth = val;
  }

  void __set_dayOfWeek(const int32_t val) {
    dayOfWeek = val;
  }

  bool operator == (const WeekNDay & rhs) const
  {
    if (!(month == rhs.month))
      return false;
    if (!(weekOfMonth == rhs.weekOfMonth))
      return false;
    if (!(dayOfWeek == rhs.dayOfWeek))
      return false;
    return true;
  }
  bool operator != (const WeekNDay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WeekNDay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(WeekNDay &a, WeekNDay &b);

typedef struct _RecurringType__isset {
  _RecurringType__isset() : period(false), date(false), weekNDay(false) {}
  bool period;
  bool date;
  bool weekNDay;
} _RecurringType__isset;

class RecurringType {
 public:

  static const char* ascii_fingerprint; // = "896C6B851B0D15EA1CB4C07B76DB714B";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x6C,0x6B,0x85,0x1B,0x0D,0x15,0xEA,0x1C,0xB4,0xC0,0x7B,0x76,0xDB,0x71,0x4B};

  RecurringType() : period((PeriodType::type)0) {
  }

  virtual ~RecurringType() throw() {}

  PeriodType::type period;
  Date date;
  WeekNDay weekNDay;

  _RecurringType__isset __isset;

  void __set_period(const PeriodType::type val) {
    period = val;
  }

  void __set_date(const Date& val) {
    date = val;
    __isset.date = true;
  }

  void __set_weekNDay(const WeekNDay& val) {
    weekNDay = val;
    __isset.weekNDay = true;
  }

  bool operator == (const RecurringType & rhs) const
  {
    if (!(period == rhs.period))
      return false;
    if (__isset.date != rhs.__isset.date)
      return false;
    else if (__isset.date && !(date == rhs.date))
      return false;
    if (__isset.weekNDay != rhs.__isset.weekNDay)
      return false;
    else if (__isset.weekNDay && !(weekNDay == rhs.weekNDay))
      return false;
    return true;
  }
  bool operator != (const RecurringType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecurringType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RecurringType &a, RecurringType &b);

typedef struct _SetPhaseForDay__isset {
  _SetPhaseForDay__isset() : day(false), startTime(false), endTime(false), value(false) {}
  bool day;
  bool startTime;
  bool endTime;
  bool value;
} _SetPhaseForDay__isset;

class SetPhaseForDay {
 public:

  static const char* ascii_fingerprint; // = "88A5B4E5163BAD6268A818F033B05B0A";
  static const uint8_t binary_fingerprint[16]; // = {0x88,0xA5,0xB4,0xE5,0x16,0x3B,0xAD,0x62,0x68,0xA8,0x18,0xF0,0x33,0xB0,0x5B,0x0A};

  SetPhaseForDay() : day(0), startTime(0), endTime(0), value(0) {
  }

  virtual ~SetPhaseForDay() throw() {}

  int8_t day;
  int32_t startTime;
  int32_t endTime;
  int32_t value;

  _SetPhaseForDay__isset __isset;

  void __set_day(const int8_t val) {
    day = val;
  }

  void __set_startTime(const int32_t val) {
    startTime = val;
  }

  void __set_endTime(const int32_t val) {
    endTime = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const SetPhaseForDay & rhs) const
  {
    if (!(day == rhs.day))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SetPhaseForDay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetPhaseForDay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetPhaseForDay &a, SetPhaseForDay &b);

typedef struct _ChangePhaseForDay__isset {
  _ChangePhaseForDay__isset() : day(false), prevStartTime(false), newStartTime(false), newEndTime(false), value(false) {}
  bool day;
  bool prevStartTime;
  bool newStartTime;
  bool newEndTime;
  bool value;
} _ChangePhaseForDay__isset;

class ChangePhaseForDay {
 public:

  static const char* ascii_fingerprint; // = "C3546C6E49B8363726BC922CDB3FAAAB";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0x54,0x6C,0x6E,0x49,0xB8,0x36,0x37,0x26,0xBC,0x92,0x2C,0xDB,0x3F,0xAA,0xAB};

  ChangePhaseForDay() : day(0), prevStartTime(0), newStartTime(0), newEndTime(0), value(0) {
  }

  virtual ~ChangePhaseForDay() throw() {}

  int8_t day;
  int32_t prevStartTime;
  int32_t newStartTime;
  int32_t newEndTime;
  int32_t value;

  _ChangePhaseForDay__isset __isset;

  void __set_day(const int8_t val) {
    day = val;
  }

  void __set_prevStartTime(const int32_t val) {
    prevStartTime = val;
  }

  void __set_newStartTime(const int32_t val) {
    newStartTime = val;
  }

  void __set_newEndTime(const int32_t val) {
    newEndTime = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const ChangePhaseForDay & rhs) const
  {
    if (!(day == rhs.day))
      return false;
    if (!(prevStartTime == rhs.prevStartTime))
      return false;
    if (!(newStartTime == rhs.newStartTime))
      return false;
    if (!(newEndTime == rhs.newEndTime))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ChangePhaseForDay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangePhaseForDay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangePhaseForDay &a, ChangePhaseForDay &b);

typedef struct _DeletePhaseForDay__isset {
  _DeletePhaseForDay__isset() : day(false), startTime(false) {}
  bool day;
  bool startTime;
} _DeletePhaseForDay__isset;

class DeletePhaseForDay {
 public:

  static const char* ascii_fingerprint; // = "EFFD9F67D6D23CD85DFFD381B41885B5";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xFD,0x9F,0x67,0xD6,0xD2,0x3C,0xD8,0x5D,0xFF,0xD3,0x81,0xB4,0x18,0x85,0xB5};

  DeletePhaseForDay() : day(0), startTime(0) {
  }

  virtual ~DeletePhaseForDay() throw() {}

  int8_t day;
  int32_t startTime;

  _DeletePhaseForDay__isset __isset;

  void __set_day(const int8_t val) {
    day = val;
  }

  void __set_startTime(const int32_t val) {
    startTime = val;
  }

  bool operator == (const DeletePhaseForDay & rhs) const
  {
    if (!(day == rhs.day))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    return true;
  }
  bool operator != (const DeletePhaseForDay &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeletePhaseForDay & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeletePhaseForDay &a, DeletePhaseForDay &b);

typedef struct _CopyDailyProfile__isset {
  _CopyDailyProfile__isset() : srcDay(false), destDays(false) {}
  bool srcDay;
  bool destDays;
} _CopyDailyProfile__isset;

class CopyDailyProfile {
 public:

  static const char* ascii_fingerprint; // = "E9315D11ED9B3ADE4F14971EFD87F639";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x31,0x5D,0x11,0xED,0x9B,0x3A,0xDE,0x4F,0x14,0x97,0x1E,0xFD,0x87,0xF6,0x39};

  CopyDailyProfile() : srcDay(0) {
  }

  virtual ~CopyDailyProfile() throw() {}

  int8_t srcDay;
  std::vector<int8_t>  destDays;

  _CopyDailyProfile__isset __isset;

  void __set_srcDay(const int8_t val) {
    srcDay = val;
  }

  void __set_destDays(const std::vector<int8_t> & val) {
    destDays = val;
  }

  bool operator == (const CopyDailyProfile & rhs) const
  {
    if (!(srcDay == rhs.srcDay))
      return false;
    if (!(destDays == rhs.destDays))
      return false;
    return true;
  }
  bool operator != (const CopyDailyProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CopyDailyProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CopyDailyProfile &a, CopyDailyProfile &b);

typedef struct _SetPhaseForSpecialEvent__isset {
  _SetPhaseForSpecialEvent__isset() : specialEventId(false), startTime(false), endTime(false), value(false) {}
  bool specialEventId;
  bool startTime;
  bool endTime;
  bool value;
} _SetPhaseForSpecialEvent__isset;

class SetPhaseForSpecialEvent {
 public:

  static const char* ascii_fingerprint; // = "A53F55241AFA00538B1712380041F8B0";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0x3F,0x55,0x24,0x1A,0xFA,0x00,0x53,0x8B,0x17,0x12,0x38,0x00,0x41,0xF8,0xB0};

  SetPhaseForSpecialEvent() : specialEventId(0), startTime(0), endTime(0), value(0) {
  }

  virtual ~SetPhaseForSpecialEvent() throw() {}

  int16_t specialEventId;
  int32_t startTime;
  int32_t endTime;
  int32_t value;

  _SetPhaseForSpecialEvent__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  void __set_startTime(const int32_t val) {
    startTime = val;
  }

  void __set_endTime(const int32_t val) {
    endTime = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const SetPhaseForSpecialEvent & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SetPhaseForSpecialEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetPhaseForSpecialEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetPhaseForSpecialEvent &a, SetPhaseForSpecialEvent &b);

typedef struct _ChangePhaseForSpecialEvent__isset {
  _ChangePhaseForSpecialEvent__isset() : specialEventId(false), prevStartTime(false), newStartTime(false), newEndTime(false), value(false) {}
  bool specialEventId;
  bool prevStartTime;
  bool newStartTime;
  bool newEndTime;
  bool value;
} _ChangePhaseForSpecialEvent__isset;

class ChangePhaseForSpecialEvent {
 public:

  static const char* ascii_fingerprint; // = "7029377E72B27706C84D3D62F058BECD";
  static const uint8_t binary_fingerprint[16]; // = {0x70,0x29,0x37,0x7E,0x72,0xB2,0x77,0x06,0xC8,0x4D,0x3D,0x62,0xF0,0x58,0xBE,0xCD};

  ChangePhaseForSpecialEvent() : specialEventId(0), prevStartTime(0), newStartTime(0), newEndTime(0), value(0) {
  }

  virtual ~ChangePhaseForSpecialEvent() throw() {}

  int16_t specialEventId;
  int32_t prevStartTime;
  int32_t newStartTime;
  int32_t newEndTime;
  int32_t value;

  _ChangePhaseForSpecialEvent__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  void __set_prevStartTime(const int32_t val) {
    prevStartTime = val;
  }

  void __set_newStartTime(const int32_t val) {
    newStartTime = val;
  }

  void __set_newEndTime(const int32_t val) {
    newEndTime = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const ChangePhaseForSpecialEvent & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    if (!(prevStartTime == rhs.prevStartTime))
      return false;
    if (!(newStartTime == rhs.newStartTime))
      return false;
    if (!(newEndTime == rhs.newEndTime))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ChangePhaseForSpecialEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChangePhaseForSpecialEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ChangePhaseForSpecialEvent &a, ChangePhaseForSpecialEvent &b);

typedef struct _DeletePhaseForSpecialEvent__isset {
  _DeletePhaseForSpecialEvent__isset() : specialEventId(false), startTime(false) {}
  bool specialEventId;
  bool startTime;
} _DeletePhaseForSpecialEvent__isset;

class DeletePhaseForSpecialEvent {
 public:

  static const char* ascii_fingerprint; // = "0D0E376BC3AE6606497788AA82F73617";
  static const uint8_t binary_fingerprint[16]; // = {0x0D,0x0E,0x37,0x6B,0xC3,0xAE,0x66,0x06,0x49,0x77,0x88,0xAA,0x82,0xF7,0x36,0x17};

  DeletePhaseForSpecialEvent() : specialEventId(0), startTime(0) {
  }

  virtual ~DeletePhaseForSpecialEvent() throw() {}

  int16_t specialEventId;
  int32_t startTime;

  _DeletePhaseForSpecialEvent__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  void __set_startTime(const int32_t val) {
    startTime = val;
  }

  bool operator == (const DeletePhaseForSpecialEvent & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    return true;
  }
  bool operator != (const DeletePhaseForSpecialEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeletePhaseForSpecialEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeletePhaseForSpecialEvent &a, DeletePhaseForSpecialEvent &b);

typedef struct _CopySpecialEventProfile__isset {
  _CopySpecialEventProfile__isset() : specialEventId(false), destDate(false) {}
  bool specialEventId;
  bool destDate;
} _CopySpecialEventProfile__isset;

class CopySpecialEventProfile {
 public:

  static const char* ascii_fingerprint; // = "DB945E1C48BBD5462834775FF2901AC4";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0x94,0x5E,0x1C,0x48,0xBB,0xD5,0x46,0x28,0x34,0x77,0x5F,0xF2,0x90,0x1A,0xC4};

  CopySpecialEventProfile() : specialEventId(0) {
  }

  virtual ~CopySpecialEventProfile() throw() {}

  int16_t specialEventId;
  std::vector<Date>  destDate;

  _CopySpecialEventProfile__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  void __set_destDate(const std::vector<Date> & val) {
    destDate = val;
  }

  bool operator == (const CopySpecialEventProfile & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    if (!(destDate == rhs.destDate))
      return false;
    return true;
  }
  bool operator != (const CopySpecialEventProfile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CopySpecialEventProfile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CopySpecialEventProfile &a, CopySpecialEventProfile &b);

typedef struct _CreateSpecialEvent__isset {
  _CreateSpecialEvent__isset() : recurringSpec(false), startTime(false), endTime(false), value(false) {}
  bool recurringSpec;
  bool startTime;
  bool endTime;
  bool value;
} _CreateSpecialEvent__isset;

class CreateSpecialEvent {
 public:

  static const char* ascii_fingerprint; // = "1C4F4460A230F26CD75A43A848D2D804";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0x4F,0x44,0x60,0xA2,0x30,0xF2,0x6C,0xD7,0x5A,0x43,0xA8,0x48,0xD2,0xD8,0x04};

  CreateSpecialEvent() : startTime(0), endTime(0), value(0) {
  }

  virtual ~CreateSpecialEvent() throw() {}

  RecurringType recurringSpec;
  int32_t startTime;
  int32_t endTime;
  int32_t value;

  _CreateSpecialEvent__isset __isset;

  void __set_recurringSpec(const RecurringType& val) {
    recurringSpec = val;
  }

  void __set_startTime(const int32_t val) {
    startTime = val;
  }

  void __set_endTime(const int32_t val) {
    endTime = val;
  }

  void __set_value(const int32_t val) {
    value = val;
  }

  bool operator == (const CreateSpecialEvent & rhs) const
  {
    if (!(recurringSpec == rhs.recurringSpec))
      return false;
    if (!(startTime == rhs.startTime))
      return false;
    if (!(endTime == rhs.endTime))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CreateSpecialEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateSpecialEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CreateSpecialEvent &a, CreateSpecialEvent &b);

typedef struct _SetDateRange__isset {
  _SetDateRange__isset() : specialEventId(false), endDate(false) {}
  bool specialEventId;
  bool endDate;
} _SetDateRange__isset;

class SetDateRange {
 public:

  static const char* ascii_fingerprint; // = "DD19BF9CDE85A6D2CEB094776D288B4F";
  static const uint8_t binary_fingerprint[16]; // = {0xDD,0x19,0xBF,0x9C,0xDE,0x85,0xA6,0xD2,0xCE,0xB0,0x94,0x77,0x6D,0x28,0x8B,0x4F};

  SetDateRange() : specialEventId(0) {
  }

  virtual ~SetDateRange() throw() {}

  int16_t specialEventId;
  Date endDate;

  _SetDateRange__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  void __set_endDate(const Date& val) {
    endDate = val;
  }

  bool operator == (const SetDateRange & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    if (!(endDate == rhs.endDate))
      return false;
    return true;
  }
  bool operator != (const SetDateRange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetDateRange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetDateRange &a, SetDateRange &b);

typedef struct _SetRecurring__isset {
  _SetRecurring__isset() : specialEventId(false), recurringSpec(false) {}
  bool specialEventId;
  bool recurringSpec;
} _SetRecurring__isset;

class SetRecurring {
 public:

  static const char* ascii_fingerprint; // = "A7B3AB7291CD33DAA78362203F87E1FC";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xB3,0xAB,0x72,0x91,0xCD,0x33,0xDA,0xA7,0x83,0x62,0x20,0x3F,0x87,0xE1,0xFC};

  SetRecurring() : specialEventId(0) {
  }

  virtual ~SetRecurring() throw() {}

  int16_t specialEventId;
  RecurringType recurringSpec;

  _SetRecurring__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  void __set_recurringSpec(const RecurringType& val) {
    recurringSpec = val;
  }

  bool operator == (const SetRecurring & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    if (!(recurringSpec == rhs.recurringSpec))
      return false;
    return true;
  }
  bool operator != (const SetRecurring &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SetRecurring & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SetRecurring &a, SetRecurring &b);

typedef struct _DeleteSpecialEvent__isset {
  _DeleteSpecialEvent__isset() : specialEventId(false) {}
  bool specialEventId;
} _DeleteSpecialEvent__isset;

class DeleteSpecialEvent {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  DeleteSpecialEvent() : specialEventId(0) {
  }

  virtual ~DeleteSpecialEvent() throw() {}

  int16_t specialEventId;

  _DeleteSpecialEvent__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  bool operator == (const DeleteSpecialEvent & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    return true;
  }
  bool operator != (const DeleteSpecialEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeleteSpecialEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeleteSpecialEvent &a, DeleteSpecialEvent &b);

typedef struct _RequestExceptionMonths__isset {
  _RequestExceptionMonths__isset() : startYear(false), startMonth(false), numberOfMonths(false) {}
  bool startYear;
  bool startMonth;
  bool numberOfMonths;
} _RequestExceptionMonths__isset;

class RequestExceptionMonths {
 public:

  static const char* ascii_fingerprint; // = "6435B39C87AB0E30F30BEDEFD7328C0D";
  static const uint8_t binary_fingerprint[16]; // = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

  RequestExceptionMonths() : startYear(0), startMonth(0), numberOfMonths(0) {
  }

  virtual ~RequestExceptionMonths() throw() {}

  int32_t startYear;
  int32_t startMonth;
  int32_t numberOfMonths;

  _RequestExceptionMonths__isset __isset;

  void __set_startYear(const int32_t val) {
    startYear = val;
  }

  void __set_startMonth(const int32_t val) {
    startMonth = val;
  }

  void __set_numberOfMonths(const int32_t val) {
    numberOfMonths = val;
  }

  bool operator == (const RequestExceptionMonths & rhs) const
  {
    if (!(startYear == rhs.startYear))
      return false;
    if (!(startMonth == rhs.startMonth))
      return false;
    if (!(numberOfMonths == rhs.numberOfMonths))
      return false;
    return true;
  }
  bool operator != (const RequestExceptionMonths &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestExceptionMonths & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RequestExceptionMonths &a, RequestExceptionMonths &b);

typedef struct _SchedulerParameters__isset {
  _SchedulerParameters__isset() : schedulerId(false), command(false), setPhaseForDay(false), changePhaseForDay(false), deletePhaseForDay(false), copyDailyProfile(false), setPhaseForSpecialEvent(false), changePhaseForSpecialEvent(false), deletePhaseForSpecialEvent(false), copySpecialEventProfile(false), createSpecialEvent(false), setDateRange(false), setRecurring(false), deleteSpecialEvent(false), requestExceptionMonth(false) {}
  bool schedulerId;
  bool command;
  bool setPhaseForDay;
  bool changePhaseForDay;
  bool deletePhaseForDay;
  bool copyDailyProfile;
  bool setPhaseForSpecialEvent;
  bool changePhaseForSpecialEvent;
  bool deletePhaseForSpecialEvent;
  bool copySpecialEventProfile;
  bool createSpecialEvent;
  bool setDateRange;
  bool setRecurring;
  bool deleteSpecialEvent;
  bool requestExceptionMonth;
} _SchedulerParameters__isset;

class SchedulerParameters {
 public:

  static const char* ascii_fingerprint; // = "181FEB48C31BD959E84740B93EB08BF5";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0x1F,0xEB,0x48,0xC3,0x1B,0xD9,0x59,0xE8,0x47,0x40,0xB9,0x3E,0xB0,0x8B,0xF5};

  SchedulerParameters() : schedulerId(0), command((Scheduler_Command_Type::type)0) {
  }

  virtual ~SchedulerParameters() throw() {}

  int16_t schedulerId;
  Scheduler_Command_Type::type command;
  SetPhaseForDay setPhaseForDay;
  ChangePhaseForDay changePhaseForDay;
  DeletePhaseForDay deletePhaseForDay;
  CopyDailyProfile copyDailyProfile;
  SetPhaseForSpecialEvent setPhaseForSpecialEvent;
  ChangePhaseForSpecialEvent changePhaseForSpecialEvent;
  DeletePhaseForSpecialEvent deletePhaseForSpecialEvent;
  CopySpecialEventProfile copySpecialEventProfile;
  CreateSpecialEvent createSpecialEvent;
  SetDateRange setDateRange;
  SetRecurring setRecurring;
  DeleteSpecialEvent deleteSpecialEvent;
  RequestExceptionMonths requestExceptionMonth;

  _SchedulerParameters__isset __isset;

  void __set_schedulerId(const int16_t val) {
    schedulerId = val;
  }

  void __set_command(const Scheduler_Command_Type::type val) {
    command = val;
  }

  void __set_setPhaseForDay(const SetPhaseForDay& val) {
    setPhaseForDay = val;
    __isset.setPhaseForDay = true;
  }

  void __set_changePhaseForDay(const ChangePhaseForDay& val) {
    changePhaseForDay = val;
    __isset.changePhaseForDay = true;
  }

  void __set_deletePhaseForDay(const DeletePhaseForDay& val) {
    deletePhaseForDay = val;
    __isset.deletePhaseForDay = true;
  }

  void __set_copyDailyProfile(const CopyDailyProfile& val) {
    copyDailyProfile = val;
    __isset.copyDailyProfile = true;
  }

  void __set_setPhaseForSpecialEvent(const SetPhaseForSpecialEvent& val) {
    setPhaseForSpecialEvent = val;
    __isset.setPhaseForSpecialEvent = true;
  }

  void __set_changePhaseForSpecialEvent(const ChangePhaseForSpecialEvent& val) {
    changePhaseForSpecialEvent = val;
    __isset.changePhaseForSpecialEvent = true;
  }

  void __set_deletePhaseForSpecialEvent(const DeletePhaseForSpecialEvent& val) {
    deletePhaseForSpecialEvent = val;
    __isset.deletePhaseForSpecialEvent = true;
  }

  void __set_copySpecialEventProfile(const CopySpecialEventProfile& val) {
    copySpecialEventProfile = val;
    __isset.copySpecialEventProfile = true;
  }

  void __set_createSpecialEvent(const CreateSpecialEvent& val) {
    createSpecialEvent = val;
    __isset.createSpecialEvent = true;
  }

  void __set_setDateRange(const SetDateRange& val) {
    setDateRange = val;
    __isset.setDateRange = true;
  }

  void __set_setRecurring(const SetRecurring& val) {
    setRecurring = val;
    __isset.setRecurring = true;
  }

  void __set_deleteSpecialEvent(const DeleteSpecialEvent& val) {
    deleteSpecialEvent = val;
    __isset.deleteSpecialEvent = true;
  }

  void __set_requestExceptionMonth(const RequestExceptionMonths& val) {
    requestExceptionMonth = val;
    __isset.requestExceptionMonth = true;
  }

  bool operator == (const SchedulerParameters & rhs) const
  {
    if (!(schedulerId == rhs.schedulerId))
      return false;
    if (!(command == rhs.command))
      return false;
    if (__isset.setPhaseForDay != rhs.__isset.setPhaseForDay)
      return false;
    else if (__isset.setPhaseForDay && !(setPhaseForDay == rhs.setPhaseForDay))
      return false;
    if (__isset.changePhaseForDay != rhs.__isset.changePhaseForDay)
      return false;
    else if (__isset.changePhaseForDay && !(changePhaseForDay == rhs.changePhaseForDay))
      return false;
    if (__isset.deletePhaseForDay != rhs.__isset.deletePhaseForDay)
      return false;
    else if (__isset.deletePhaseForDay && !(deletePhaseForDay == rhs.deletePhaseForDay))
      return false;
    if (__isset.copyDailyProfile != rhs.__isset.copyDailyProfile)
      return false;
    else if (__isset.copyDailyProfile && !(copyDailyProfile == rhs.copyDailyProfile))
      return false;
    if (__isset.setPhaseForSpecialEvent != rhs.__isset.setPhaseForSpecialEvent)
      return false;
    else if (__isset.setPhaseForSpecialEvent && !(setPhaseForSpecialEvent == rhs.setPhaseForSpecialEvent))
      return false;
    if (__isset.changePhaseForSpecialEvent != rhs.__isset.changePhaseForSpecialEvent)
      return false;
    else if (__isset.changePhaseForSpecialEvent && !(changePhaseForSpecialEvent == rhs.changePhaseForSpecialEvent))
      return false;
    if (__isset.deletePhaseForSpecialEvent != rhs.__isset.deletePhaseForSpecialEvent)
      return false;
    else if (__isset.deletePhaseForSpecialEvent && !(deletePhaseForSpecialEvent == rhs.deletePhaseForSpecialEvent))
      return false;
    if (__isset.copySpecialEventProfile != rhs.__isset.copySpecialEventProfile)
      return false;
    else if (__isset.copySpecialEventProfile && !(copySpecialEventProfile == rhs.copySpecialEventProfile))
      return false;
    if (__isset.createSpecialEvent != rhs.__isset.createSpecialEvent)
      return false;
    else if (__isset.createSpecialEvent && !(createSpecialEvent == rhs.createSpecialEvent))
      return false;
    if (__isset.setDateRange != rhs.__isset.setDateRange)
      return false;
    else if (__isset.setDateRange && !(setDateRange == rhs.setDateRange))
      return false;
    if (__isset.setRecurring != rhs.__isset.setRecurring)
      return false;
    else if (__isset.setRecurring && !(setRecurring == rhs.setRecurring))
      return false;
    if (__isset.deleteSpecialEvent != rhs.__isset.deleteSpecialEvent)
      return false;
    else if (__isset.deleteSpecialEvent && !(deleteSpecialEvent == rhs.deleteSpecialEvent))
      return false;
    if (__isset.requestExceptionMonth != rhs.__isset.requestExceptionMonth)
      return false;
    else if (__isset.requestExceptionMonth && !(requestExceptionMonth == rhs.requestExceptionMonth))
      return false;
    return true;
  }
  bool operator != (const SchedulerParameters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SchedulerParameters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SchedulerParameters &a, SchedulerParameters &b);

typedef struct _SchedulerResult__isset {
  _SchedulerResult__isset() : specialEventId(false) {}
  bool specialEventId;
} _SchedulerResult__isset;

class SchedulerResult {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  SchedulerResult() : specialEventId(0) {
  }

  virtual ~SchedulerResult() throw() {}

  int16_t specialEventId;

  _SchedulerResult__isset __isset;

  void __set_specialEventId(const int16_t val) {
    specialEventId = val;
  }

  bool operator == (const SchedulerResult & rhs) const
  {
    if (!(specialEventId == rhs.specialEventId))
      return false;
    return true;
  }
  bool operator != (const SchedulerResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SchedulerResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SchedulerResult &a, SchedulerResult &b);

}}} // namespace

#endif
