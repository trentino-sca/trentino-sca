// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DiagnosticService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::siemens::bt::diagnostic;

class DiagnosticServiceHandler : virtual public DiagnosticServiceIf {
 public:
  DiagnosticServiceHandler() {
    // Your initialization goes here
  }

  void getInterfaceVersion(std::string& _return) {
    // Your implementation goes here
    printf("getInterfaceVersion\n");
  }

  void getFacilities(std::vector<std::string> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getFacilities\n");
  }

  void getSeverities(std::vector<std::string> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getSeverities\n");
  }

  void getStatByFacility(std::vector<StatLog> & _return, const std::string& authenticationToken, const std::string& facility) {
    // Your implementation goes here
    printf("getStatByFacility\n");
  }

  void getAllStatistics(std::vector<StatLog> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getAllStatistics\n");
  }

  void getDiagByFacility(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& facility) {
    // Your implementation goes here
    printf("getDiagByFacility\n");
  }

  void getDiagBySeverity(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& severity) {
    // Your implementation goes here
    printf("getDiagBySeverity\n");
  }

  void getAllDiagnostics(std::vector<DiagLog> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getAllDiagnostics\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DiagnosticServiceHandler> handler(new DiagnosticServiceHandler());
  shared_ptr<TProcessor> processor(new DiagnosticServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

