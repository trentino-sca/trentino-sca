/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PllinkService_H
#define PllinkService_H

#include <thrift/TDispatchProcessor.h>
#include "Pllink_types.h"
#include "ChannelService.h"

namespace siemens { namespace bt { namespace pllink {

class PllinkServiceIf : virtual public  ::siemens::bt::channel::ChannelServiceIf {
 public:
  virtual ~PllinkServiceIf() {}
  virtual int32_t identifyDevice(const std::string& authToken, const int32_t devKey) = 0;
  virtual void resetDevice( ::siemens::bt::channel::Device& _return, const std::string& authToken, const int32_t devKey) = 0;
};

class PllinkServiceIfFactory : virtual public  ::siemens::bt::channel::ChannelServiceIfFactory {
 public:
  typedef PllinkServiceIf Handler;

  virtual ~PllinkServiceIfFactory() {}

  virtual PllinkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::siemens::bt::channel::ChannelServiceIf* /* handler */) = 0;
};

class PllinkServiceIfSingletonFactory : virtual public PllinkServiceIfFactory {
 public:
  PllinkServiceIfSingletonFactory(const boost::shared_ptr<PllinkServiceIf>& iface) : iface_(iface) {}
  virtual ~PllinkServiceIfSingletonFactory() {}

  virtual PllinkServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::siemens::bt::channel::ChannelServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<PllinkServiceIf> iface_;
};

class PllinkServiceNull : virtual public PllinkServiceIf , virtual public  ::siemens::bt::channel::ChannelServiceNull {
 public:
  virtual ~PllinkServiceNull() {}
  int32_t identifyDevice(const std::string& /* authToken */, const int32_t /* devKey */) {
    int32_t _return = 0;
    return _return;
  }
  void resetDevice( ::siemens::bt::channel::Device& /* _return */, const std::string& /* authToken */, const int32_t /* devKey */) {
    return;
  }
};

typedef struct _PllinkService_identifyDevice_args__isset {
  _PllinkService_identifyDevice_args__isset() : authToken(false), devKey(false) {}
  bool authToken;
  bool devKey;
} _PllinkService_identifyDevice_args__isset;

class PllinkService_identifyDevice_args {
 public:

  PllinkService_identifyDevice_args() : authToken(), devKey(0) {
  }

  virtual ~PllinkService_identifyDevice_args() throw() {}

  std::string authToken;
  int32_t devKey;

  _PllinkService_identifyDevice_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_devKey(const int32_t val) {
    devKey = val;
  }

  bool operator == (const PllinkService_identifyDevice_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(devKey == rhs.devKey))
      return false;
    return true;
  }
  bool operator != (const PllinkService_identifyDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PllinkService_identifyDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PllinkService_identifyDevice_pargs {
 public:


  virtual ~PllinkService_identifyDevice_pargs() throw() {}

  const std::string* authToken;
  const int32_t* devKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PllinkService_identifyDevice_result__isset {
  _PllinkService_identifyDevice_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _PllinkService_identifyDevice_result__isset;

class PllinkService_identifyDevice_result {
 public:

  PllinkService_identifyDevice_result() : success(0) {
  }

  virtual ~PllinkService_identifyDevice_result() throw() {}

  int32_t success;
   ::siemens::bt::error::BaException baException;

  _PllinkService_identifyDevice_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const PllinkService_identifyDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const PllinkService_identifyDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PllinkService_identifyDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PllinkService_identifyDevice_presult__isset {
  _PllinkService_identifyDevice_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _PllinkService_identifyDevice_presult__isset;

class PllinkService_identifyDevice_presult {
 public:


  virtual ~PllinkService_identifyDevice_presult() throw() {}

  int32_t* success;
   ::siemens::bt::error::BaException baException;

  _PllinkService_identifyDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PllinkService_resetDevice_args__isset {
  _PllinkService_resetDevice_args__isset() : authToken(false), devKey(false) {}
  bool authToken;
  bool devKey;
} _PllinkService_resetDevice_args__isset;

class PllinkService_resetDevice_args {
 public:

  PllinkService_resetDevice_args() : authToken(), devKey(0) {
  }

  virtual ~PllinkService_resetDevice_args() throw() {}

  std::string authToken;
  int32_t devKey;

  _PllinkService_resetDevice_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_devKey(const int32_t val) {
    devKey = val;
  }

  bool operator == (const PllinkService_resetDevice_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(devKey == rhs.devKey))
      return false;
    return true;
  }
  bool operator != (const PllinkService_resetDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PllinkService_resetDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PllinkService_resetDevice_pargs {
 public:


  virtual ~PllinkService_resetDevice_pargs() throw() {}

  const std::string* authToken;
  const int32_t* devKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PllinkService_resetDevice_result__isset {
  _PllinkService_resetDevice_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _PllinkService_resetDevice_result__isset;

class PllinkService_resetDevice_result {
 public:

  PllinkService_resetDevice_result() {
  }

  virtual ~PllinkService_resetDevice_result() throw() {}

   ::siemens::bt::channel::Device success;
   ::siemens::bt::error::BaException baException;

  _PllinkService_resetDevice_result__isset __isset;

  void __set_success(const  ::siemens::bt::channel::Device& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const PllinkService_resetDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const PllinkService_resetDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PllinkService_resetDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PllinkService_resetDevice_presult__isset {
  _PllinkService_resetDevice_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _PllinkService_resetDevice_presult__isset;

class PllinkService_resetDevice_presult {
 public:


  virtual ~PllinkService_resetDevice_presult() throw() {}

   ::siemens::bt::channel::Device* success;
   ::siemens::bt::error::BaException baException;

  _PllinkService_resetDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PllinkServiceClient : virtual public PllinkServiceIf, public  ::siemens::bt::channel::ChannelServiceClient {
 public:
  PllinkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::siemens::bt::channel::ChannelServiceClient(prot, prot) {}
  PllinkServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::siemens::bt::channel::ChannelServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t identifyDevice(const std::string& authToken, const int32_t devKey);
  void send_identifyDevice(const std::string& authToken, const int32_t devKey);
  int32_t recv_identifyDevice();
  void resetDevice( ::siemens::bt::channel::Device& _return, const std::string& authToken, const int32_t devKey);
  void send_resetDevice(const std::string& authToken, const int32_t devKey);
  void recv_resetDevice( ::siemens::bt::channel::Device& _return);
};

class PllinkServiceProcessor : public  ::siemens::bt::channel::ChannelServiceProcessor {
 protected:
  boost::shared_ptr<PllinkServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PllinkServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_identifyDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resetDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PllinkServiceProcessor(boost::shared_ptr<PllinkServiceIf> iface) :
     ::siemens::bt::channel::ChannelServiceProcessor(iface),
    iface_(iface) {
    processMap_["identifyDevice"] = &PllinkServiceProcessor::process_identifyDevice;
    processMap_["resetDevice"] = &PllinkServiceProcessor::process_resetDevice;
  }

  virtual ~PllinkServiceProcessor() {}
};

class PllinkServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PllinkServiceProcessorFactory(const ::boost::shared_ptr< PllinkServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PllinkServiceIfFactory > handlerFactory_;
};

class PllinkServiceMultiface : virtual public PllinkServiceIf, public  ::siemens::bt::channel::ChannelServiceMultiface {
 public:
  PllinkServiceMultiface(std::vector<boost::shared_ptr<PllinkServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<PllinkServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::siemens::bt::channel::ChannelServiceMultiface::add(*iter);
    }
  }
  virtual ~PllinkServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PllinkServiceIf> > ifaces_;
  PllinkServiceMultiface() {}
  void add(boost::shared_ptr<PllinkServiceIf> iface) {
     ::siemens::bt::channel::ChannelServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  int32_t identifyDevice(const std::string& authToken, const int32_t devKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->identifyDevice(authToken, devKey);
    }
    return ifaces_[i]->identifyDevice(authToken, devKey);
  }

  void resetDevice( ::siemens::bt::channel::Device& _return, const std::string& authToken, const int32_t devKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resetDevice(_return, authToken, devKey);
    }
    ifaces_[i]->resetDevice(_return, authToken, devKey);
    return;
  }

};

}}} // namespace

#endif
