/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Diagnostic_TYPES_H
#define Diagnostic_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"
#include "Errors_types.h"


namespace siemens { namespace bt { namespace diagnostic {

typedef struct _StatLog__isset {
  _StatLog__isset() : facility(false), timeStamp(false), ParamName(false), ParamValue(false) {}
  bool facility;
  bool timeStamp;
  bool ParamName;
  bool ParamValue;
} _StatLog__isset;

class StatLog {
 public:

  static const char* ascii_fingerprint; // = "8FA3A8CA1DD97FF671F3B861898C5270";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0xA3,0xA8,0xCA,0x1D,0xD9,0x7F,0xF6,0x71,0xF3,0xB8,0x61,0x89,0x8C,0x52,0x70};

  StatLog() : facility(), timeStamp(0) {
  }

  virtual ~StatLog() throw() {}

  std::string facility;
  int32_t timeStamp;
  std::vector<std::string>  ParamName;
  std::vector<int32_t>  ParamValue;

  _StatLog__isset __isset;

  void __set_facility(const std::string& val) {
    facility = val;
  }

  void __set_timeStamp(const int32_t val) {
    timeStamp = val;
  }

  void __set_ParamName(const std::vector<std::string> & val) {
    ParamName = val;
  }

  void __set_ParamValue(const std::vector<int32_t> & val) {
    ParamValue = val;
  }

  bool operator == (const StatLog & rhs) const
  {
    if (!(facility == rhs.facility))
      return false;
    if (!(timeStamp == rhs.timeStamp))
      return false;
    if (!(ParamName == rhs.ParamName))
      return false;
    if (!(ParamValue == rhs.ParamValue))
      return false;
    return true;
  }
  bool operator != (const StatLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StatLog &a, StatLog &b);

typedef struct _DiagLog__isset {
  _DiagLog__isset() : facility(false), timeStamp(false), severity(false), message(false) {}
  bool facility;
  bool timeStamp;
  bool severity;
  bool message;
} _DiagLog__isset;

class DiagLog {
 public:

  static const char* ascii_fingerprint; // = "D5082811F603CA229965DA45DAFDD5B7";
  static const uint8_t binary_fingerprint[16]; // = {0xD5,0x08,0x28,0x11,0xF6,0x03,0xCA,0x22,0x99,0x65,0xDA,0x45,0xDA,0xFD,0xD5,0xB7};

  DiagLog() : facility(), timeStamp(), severity() {
  }

  virtual ~DiagLog() throw() {}

  std::string facility;
  std::string timeStamp;
  std::string severity;
  std::vector<std::string>  message;

  _DiagLog__isset __isset;

  void __set_facility(const std::string& val) {
    facility = val;
  }

  void __set_timeStamp(const std::string& val) {
    timeStamp = val;
  }

  void __set_severity(const std::string& val) {
    severity = val;
  }

  void __set_message(const std::vector<std::string> & val) {
    message = val;
  }

  bool operator == (const DiagLog & rhs) const
  {
    if (!(facility == rhs.facility))
      return false;
    if (!(timeStamp == rhs.timeStamp))
      return false;
    if (!(severity == rhs.severity))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const DiagLog &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagLog & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DiagLog &a, DiagLog &b);

}}} // namespace

#endif
