/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Trend_TYPES_H
#define Trend_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace siemens { namespace bt { namespace trend {

struct XAxisResolutionType {
  enum type {
    ALL = 0,
    ONE_HOUR = 1,
    SIX_HOUR = 2,
    TWELVE_HOUR = 3,
    ONE_DAY = 4,
    ONE_WEEK = 5,
    ONE_MONTH = 6,
    THREE_MONTH = 7
  };
};

extern const std::map<int, const char*> _XAxisResolutionType_VALUES_TO_NAMES;

struct YMode {
  enum type {
    MANUAL = 0,
    AUTOMATIC = 1
  };
};

extern const std::map<int, const char*> _YMode_VALUES_TO_NAMES;

struct Trend_Command_Type {
  enum type {
    CMD_MODIFY_X_AXIS = 0,
    CMD_MODIFY_Y_AXIS = 1
  };
};

extern const std::map<int, const char*> _Trend_Command_Type_VALUES_TO_NAMES;

struct TrendObjectState {
  enum type {
    STATE_EMPTY = 0,
    STATE_UPDATING = 1,
    STATE_READY = 2,
    STATE_ERROR = 3
  };
};

extern const std::map<int, const char*> _TrendObjectState_VALUES_TO_NAMES;

typedef struct _GetTrendLogDataParamaters__isset {
  _GetTrendLogDataParamaters__isset() : startTime(false), endTime(false), maxNrOfLogEntries(false), refreshLogBuffer(false) {}
  bool startTime;
  bool endTime;
  bool maxNrOfLogEntries;
  bool refreshLogBuffer;
} _GetTrendLogDataParamaters__isset;

class GetTrendLogDataParamaters {
 public:

  static const char* ascii_fingerprint; // = "8AFCF6019F8EF241A32C84F2A05839CD";
  static const uint8_t binary_fingerprint[16]; // = {0x8A,0xFC,0xF6,0x01,0x9F,0x8E,0xF2,0x41,0xA3,0x2C,0x84,0xF2,0xA0,0x58,0x39,0xCD};

  GetTrendLogDataParamaters() : startTime(0), endTime(0), maxNrOfLogEntries(0), refreshLogBuffer(0) {
  }

  virtual ~GetTrendLogDataParamaters() throw() {}

  int32_t startTime;
  int32_t endTime;
  int32_t maxNrOfLogEntries;
  bool refreshLogBuffer;

  _GetTrendLogDataParamaters__isset __isset;

  void __set_startTime(const int32_t val) {
    startTime = val;
    __isset.startTime = true;
  }

  void __set_endTime(const int32_t val) {
    endTime = val;
    __isset.endTime = true;
  }

  void __set_maxNrOfLogEntries(const int32_t val) {
    maxNrOfLogEntries = val;
    __isset.maxNrOfLogEntries = true;
  }

  void __set_refreshLogBuffer(const bool val) {
    refreshLogBuffer = val;
    __isset.refreshLogBuffer = true;
  }

  bool operator == (const GetTrendLogDataParamaters & rhs) const
  {
    if (__isset.startTime != rhs.__isset.startTime)
      return false;
    else if (__isset.startTime && !(startTime == rhs.startTime))
      return false;
    if (__isset.endTime != rhs.__isset.endTime)
      return false;
    else if (__isset.endTime && !(endTime == rhs.endTime))
      return false;
    if (__isset.maxNrOfLogEntries != rhs.__isset.maxNrOfLogEntries)
      return false;
    else if (__isset.maxNrOfLogEntries && !(maxNrOfLogEntries == rhs.maxNrOfLogEntries))
      return false;
    if (__isset.refreshLogBuffer != rhs.__isset.refreshLogBuffer)
      return false;
    else if (__isset.refreshLogBuffer && !(refreshLogBuffer == rhs.refreshLogBuffer))
      return false;
    return true;
  }
  bool operator != (const GetTrendLogDataParamaters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetTrendLogDataParamaters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GetTrendLogDataParamaters &a, GetTrendLogDataParamaters &b);

typedef struct _ModifyXAxisSettingsParameters__isset {
  _ModifyXAxisSettingsParameters__isset() : xResolution(false) {}
  bool xResolution;
} _ModifyXAxisSettingsParameters__isset;

class ModifyXAxisSettingsParameters {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  ModifyXAxisSettingsParameters() : xResolution((XAxisResolutionType::type)0) {
  }

  virtual ~ModifyXAxisSettingsParameters() throw() {}

  XAxisResolutionType::type xResolution;

  _ModifyXAxisSettingsParameters__isset __isset;

  void __set_xResolution(const XAxisResolutionType::type val) {
    xResolution = val;
  }

  bool operator == (const ModifyXAxisSettingsParameters & rhs) const
  {
    if (!(xResolution == rhs.xResolution))
      return false;
    return true;
  }
  bool operator != (const ModifyXAxisSettingsParameters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModifyXAxisSettingsParameters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ModifyXAxisSettingsParameters &a, ModifyXAxisSettingsParameters &b);

typedef struct _ModifyYAxisSettingsParameters__isset {
  _ModifyYAxisSettingsParameters__isset() : yMode(false), yMinValue(false), yMaxValue(false) {}
  bool yMode;
  bool yMinValue;
  bool yMaxValue;
} _ModifyYAxisSettingsParameters__isset;

class ModifyYAxisSettingsParameters {
 public:

  static const char* ascii_fingerprint; // = "89DC30E1A7350BDC62BD9B5A0154D469";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0xDC,0x30,0xE1,0xA7,0x35,0x0B,0xDC,0x62,0xBD,0x9B,0x5A,0x01,0x54,0xD4,0x69};

  ModifyYAxisSettingsParameters() : yMode((YMode::type)0), yMinValue(0), yMaxValue(0) {
  }

  virtual ~ModifyYAxisSettingsParameters() throw() {}

  YMode::type yMode;
  double yMinValue;
  double yMaxValue;

  _ModifyYAxisSettingsParameters__isset __isset;

  void __set_yMode(const YMode::type val) {
    yMode = val;
  }

  void __set_yMinValue(const double val) {
    yMinValue = val;
    __isset.yMinValue = true;
  }

  void __set_yMaxValue(const double val) {
    yMaxValue = val;
    __isset.yMaxValue = true;
  }

  bool operator == (const ModifyYAxisSettingsParameters & rhs) const
  {
    if (!(yMode == rhs.yMode))
      return false;
    if (__isset.yMinValue != rhs.__isset.yMinValue)
      return false;
    else if (__isset.yMinValue && !(yMinValue == rhs.yMinValue))
      return false;
    if (__isset.yMaxValue != rhs.__isset.yMaxValue)
      return false;
    else if (__isset.yMaxValue && !(yMaxValue == rhs.yMaxValue))
      return false;
    return true;
  }
  bool operator != (const ModifyYAxisSettingsParameters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModifyYAxisSettingsParameters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ModifyYAxisSettingsParameters &a, ModifyYAxisSettingsParameters &b);

typedef struct _ModifyAxisSettingsParameters__isset {
  _ModifyAxisSettingsParameters__isset() : modifyXAxisSettingsParameters(false), modifyYAxisSettingsParameters(false) {}
  bool modifyXAxisSettingsParameters;
  bool modifyYAxisSettingsParameters;
} _ModifyAxisSettingsParameters__isset;

class ModifyAxisSettingsParameters {
 public:

  static const char* ascii_fingerprint; // = "0CA20551A0AE27256CF12E39E439ACB5";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0xA2,0x05,0x51,0xA0,0xAE,0x27,0x25,0x6C,0xF1,0x2E,0x39,0xE4,0x39,0xAC,0xB5};

  ModifyAxisSettingsParameters() {
  }

  virtual ~ModifyAxisSettingsParameters() throw() {}

  ModifyXAxisSettingsParameters modifyXAxisSettingsParameters;
  ModifyYAxisSettingsParameters modifyYAxisSettingsParameters;

  _ModifyAxisSettingsParameters__isset __isset;

  void __set_modifyXAxisSettingsParameters(const ModifyXAxisSettingsParameters& val) {
    modifyXAxisSettingsParameters = val;
    __isset.modifyXAxisSettingsParameters = true;
  }

  void __set_modifyYAxisSettingsParameters(const ModifyYAxisSettingsParameters& val) {
    modifyYAxisSettingsParameters = val;
    __isset.modifyYAxisSettingsParameters = true;
  }

  bool operator == (const ModifyAxisSettingsParameters & rhs) const
  {
    if (__isset.modifyXAxisSettingsParameters != rhs.__isset.modifyXAxisSettingsParameters)
      return false;
    else if (__isset.modifyXAxisSettingsParameters && !(modifyXAxisSettingsParameters == rhs.modifyXAxisSettingsParameters))
      return false;
    if (__isset.modifyYAxisSettingsParameters != rhs.__isset.modifyYAxisSettingsParameters)
      return false;
    else if (__isset.modifyYAxisSettingsParameters && !(modifyYAxisSettingsParameters == rhs.modifyYAxisSettingsParameters))
      return false;
    return true;
  }
  bool operator != (const ModifyAxisSettingsParameters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ModifyAxisSettingsParameters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ModifyAxisSettingsParameters &a, ModifyAxisSettingsParameters &b);

typedef struct _TrendParameters__isset {
  _TrendParameters__isset() : trendId(false), command(false), getTrendLogDataParamaters(false), modifyAxisSettingsParameters(false) {}
  bool trendId;
  bool command;
  bool getTrendLogDataParamaters;
  bool modifyAxisSettingsParameters;
} _TrendParameters__isset;

class TrendParameters {
 public:

  static const char* ascii_fingerprint; // = "C5958B8079EE9B7493AD6AE38A34799B";
  static const uint8_t binary_fingerprint[16]; // = {0xC5,0x95,0x8B,0x80,0x79,0xEE,0x9B,0x74,0x93,0xAD,0x6A,0xE3,0x8A,0x34,0x79,0x9B};

  TrendParameters() : trendId(), command((Trend_Command_Type::type)0) {
  }

  virtual ~TrendParameters() throw() {}

  std::string trendId;
  Trend_Command_Type::type command;
  GetTrendLogDataParamaters getTrendLogDataParamaters;
  ModifyAxisSettingsParameters modifyAxisSettingsParameters;

  _TrendParameters__isset __isset;

  void __set_trendId(const std::string& val) {
    trendId = val;
  }

  void __set_command(const Trend_Command_Type::type val) {
    command = val;
    __isset.command = true;
  }

  void __set_getTrendLogDataParamaters(const GetTrendLogDataParamaters& val) {
    getTrendLogDataParamaters = val;
    __isset.getTrendLogDataParamaters = true;
  }

  void __set_modifyAxisSettingsParameters(const ModifyAxisSettingsParameters& val) {
    modifyAxisSettingsParameters = val;
    __isset.modifyAxisSettingsParameters = true;
  }

  bool operator == (const TrendParameters & rhs) const
  {
    if (!(trendId == rhs.trendId))
      return false;
    if (__isset.command != rhs.__isset.command)
      return false;
    else if (__isset.command && !(command == rhs.command))
      return false;
    if (__isset.getTrendLogDataParamaters != rhs.__isset.getTrendLogDataParamaters)
      return false;
    else if (__isset.getTrendLogDataParamaters && !(getTrendLogDataParamaters == rhs.getTrendLogDataParamaters))
      return false;
    if (__isset.modifyAxisSettingsParameters != rhs.__isset.modifyAxisSettingsParameters)
      return false;
    else if (__isset.modifyAxisSettingsParameters && !(modifyAxisSettingsParameters == rhs.modifyAxisSettingsParameters))
      return false;
    return true;
  }
  bool operator != (const TrendParameters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TrendParameters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TrendParameters &a, TrendParameters &b);

}}} // namespace

#endif
