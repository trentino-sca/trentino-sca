/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DiagnosticService_H
#define DiagnosticService_H

#include <thrift/TDispatchProcessor.h>
#include "Diagnostic_types.h"

namespace siemens { namespace bt { namespace diagnostic {

class DiagnosticServiceIf {
 public:
  virtual ~DiagnosticServiceIf() {}
  virtual void getInterfaceVersion(std::string& _return) = 0;
  virtual void getFacilities(std::vector<std::string> & _return, const std::string& authenticationToken) = 0;
  virtual void getSeverities(std::vector<std::string> & _return, const std::string& authenticationToken) = 0;
  virtual void getStatByFacility(std::vector<StatLog> & _return, const std::string& authenticationToken, const std::string& facility) = 0;
  virtual void getAllStatistics(std::vector<StatLog> & _return, const std::string& authenticationToken) = 0;
  virtual void getDiagByFacility(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& facility) = 0;
  virtual void getDiagBySeverity(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& severity) = 0;
  virtual void getAllDiagnostics(std::vector<DiagLog> & _return, const std::string& authenticationToken) = 0;
};

class DiagnosticServiceIfFactory {
 public:
  typedef DiagnosticServiceIf Handler;

  virtual ~DiagnosticServiceIfFactory() {}

  virtual DiagnosticServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DiagnosticServiceIf* /* handler */) = 0;
};

class DiagnosticServiceIfSingletonFactory : virtual public DiagnosticServiceIfFactory {
 public:
  DiagnosticServiceIfSingletonFactory(const boost::shared_ptr<DiagnosticServiceIf>& iface) : iface_(iface) {}
  virtual ~DiagnosticServiceIfSingletonFactory() {}

  virtual DiagnosticServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DiagnosticServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DiagnosticServiceIf> iface_;
};

class DiagnosticServiceNull : virtual public DiagnosticServiceIf {
 public:
  virtual ~DiagnosticServiceNull() {}
  void getInterfaceVersion(std::string& /* _return */) {
    return;
  }
  void getFacilities(std::vector<std::string> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getSeverities(std::vector<std::string> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getStatByFacility(std::vector<StatLog> & /* _return */, const std::string& /* authenticationToken */, const std::string& /* facility */) {
    return;
  }
  void getAllStatistics(std::vector<StatLog> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getDiagByFacility(std::vector<DiagLog> & /* _return */, const std::string& /* authenticationToken */, const std::string& /* facility */) {
    return;
  }
  void getDiagBySeverity(std::vector<DiagLog> & /* _return */, const std::string& /* authenticationToken */, const std::string& /* severity */) {
    return;
  }
  void getAllDiagnostics(std::vector<DiagLog> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
};


class DiagnosticService_getInterfaceVersion_args {
 public:

  DiagnosticService_getInterfaceVersion_args() {
  }

  virtual ~DiagnosticService_getInterfaceVersion_args() throw() {}


  bool operator == (const DiagnosticService_getInterfaceVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DiagnosticService_getInterfaceVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getInterfaceVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getInterfaceVersion_pargs {
 public:


  virtual ~DiagnosticService_getInterfaceVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getInterfaceVersion_result__isset {
  _DiagnosticService_getInterfaceVersion_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getInterfaceVersion_result__isset;

class DiagnosticService_getInterfaceVersion_result {
 public:

  DiagnosticService_getInterfaceVersion_result() : success() {
  }

  virtual ~DiagnosticService_getInterfaceVersion_result() throw() {}

  std::string success;

  _DiagnosticService_getInterfaceVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getInterfaceVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getInterfaceVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getInterfaceVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getInterfaceVersion_presult__isset {
  _DiagnosticService_getInterfaceVersion_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getInterfaceVersion_presult__isset;

class DiagnosticService_getInterfaceVersion_presult {
 public:


  virtual ~DiagnosticService_getInterfaceVersion_presult() throw() {}

  std::string* success;

  _DiagnosticService_getInterfaceVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getFacilities_args__isset {
  _DiagnosticService_getFacilities_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DiagnosticService_getFacilities_args__isset;

class DiagnosticService_getFacilities_args {
 public:

  DiagnosticService_getFacilities_args() : authenticationToken() {
  }

  virtual ~DiagnosticService_getFacilities_args() throw() {}

  std::string authenticationToken;

  _DiagnosticService_getFacilities_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DiagnosticService_getFacilities_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getFacilities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getFacilities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getFacilities_pargs {
 public:


  virtual ~DiagnosticService_getFacilities_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getFacilities_result__isset {
  _DiagnosticService_getFacilities_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getFacilities_result__isset;

class DiagnosticService_getFacilities_result {
 public:

  DiagnosticService_getFacilities_result() {
  }

  virtual ~DiagnosticService_getFacilities_result() throw() {}

  std::vector<std::string>  success;

  _DiagnosticService_getFacilities_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getFacilities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getFacilities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getFacilities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getFacilities_presult__isset {
  _DiagnosticService_getFacilities_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getFacilities_presult__isset;

class DiagnosticService_getFacilities_presult {
 public:


  virtual ~DiagnosticService_getFacilities_presult() throw() {}

  std::vector<std::string> * success;

  _DiagnosticService_getFacilities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getSeverities_args__isset {
  _DiagnosticService_getSeverities_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DiagnosticService_getSeverities_args__isset;

class DiagnosticService_getSeverities_args {
 public:

  DiagnosticService_getSeverities_args() : authenticationToken() {
  }

  virtual ~DiagnosticService_getSeverities_args() throw() {}

  std::string authenticationToken;

  _DiagnosticService_getSeverities_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DiagnosticService_getSeverities_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getSeverities_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getSeverities_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getSeverities_pargs {
 public:


  virtual ~DiagnosticService_getSeverities_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getSeverities_result__isset {
  _DiagnosticService_getSeverities_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getSeverities_result__isset;

class DiagnosticService_getSeverities_result {
 public:

  DiagnosticService_getSeverities_result() {
  }

  virtual ~DiagnosticService_getSeverities_result() throw() {}

  std::vector<std::string>  success;

  _DiagnosticService_getSeverities_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getSeverities_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getSeverities_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getSeverities_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getSeverities_presult__isset {
  _DiagnosticService_getSeverities_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getSeverities_presult__isset;

class DiagnosticService_getSeverities_presult {
 public:


  virtual ~DiagnosticService_getSeverities_presult() throw() {}

  std::vector<std::string> * success;

  _DiagnosticService_getSeverities_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getStatByFacility_args__isset {
  _DiagnosticService_getStatByFacility_args__isset() : authenticationToken(false), facility(false) {}
  bool authenticationToken;
  bool facility;
} _DiagnosticService_getStatByFacility_args__isset;

class DiagnosticService_getStatByFacility_args {
 public:

  DiagnosticService_getStatByFacility_args() : authenticationToken(), facility() {
  }

  virtual ~DiagnosticService_getStatByFacility_args() throw() {}

  std::string authenticationToken;
  std::string facility;

  _DiagnosticService_getStatByFacility_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_facility(const std::string& val) {
    facility = val;
  }

  bool operator == (const DiagnosticService_getStatByFacility_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(facility == rhs.facility))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getStatByFacility_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getStatByFacility_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getStatByFacility_pargs {
 public:


  virtual ~DiagnosticService_getStatByFacility_pargs() throw() {}

  const std::string* authenticationToken;
  const std::string* facility;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getStatByFacility_result__isset {
  _DiagnosticService_getStatByFacility_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getStatByFacility_result__isset;

class DiagnosticService_getStatByFacility_result {
 public:

  DiagnosticService_getStatByFacility_result() {
  }

  virtual ~DiagnosticService_getStatByFacility_result() throw() {}

  std::vector<StatLog>  success;

  _DiagnosticService_getStatByFacility_result__isset __isset;

  void __set_success(const std::vector<StatLog> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getStatByFacility_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getStatByFacility_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getStatByFacility_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getStatByFacility_presult__isset {
  _DiagnosticService_getStatByFacility_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getStatByFacility_presult__isset;

class DiagnosticService_getStatByFacility_presult {
 public:


  virtual ~DiagnosticService_getStatByFacility_presult() throw() {}

  std::vector<StatLog> * success;

  _DiagnosticService_getStatByFacility_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getAllStatistics_args__isset {
  _DiagnosticService_getAllStatistics_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DiagnosticService_getAllStatistics_args__isset;

class DiagnosticService_getAllStatistics_args {
 public:

  DiagnosticService_getAllStatistics_args() : authenticationToken() {
  }

  virtual ~DiagnosticService_getAllStatistics_args() throw() {}

  std::string authenticationToken;

  _DiagnosticService_getAllStatistics_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DiagnosticService_getAllStatistics_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getAllStatistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getAllStatistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getAllStatistics_pargs {
 public:


  virtual ~DiagnosticService_getAllStatistics_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getAllStatistics_result__isset {
  _DiagnosticService_getAllStatistics_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getAllStatistics_result__isset;

class DiagnosticService_getAllStatistics_result {
 public:

  DiagnosticService_getAllStatistics_result() {
  }

  virtual ~DiagnosticService_getAllStatistics_result() throw() {}

  std::vector<StatLog>  success;

  _DiagnosticService_getAllStatistics_result__isset __isset;

  void __set_success(const std::vector<StatLog> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getAllStatistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getAllStatistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getAllStatistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getAllStatistics_presult__isset {
  _DiagnosticService_getAllStatistics_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getAllStatistics_presult__isset;

class DiagnosticService_getAllStatistics_presult {
 public:


  virtual ~DiagnosticService_getAllStatistics_presult() throw() {}

  std::vector<StatLog> * success;

  _DiagnosticService_getAllStatistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getDiagByFacility_args__isset {
  _DiagnosticService_getDiagByFacility_args__isset() : authenticationToken(false), facility(false) {}
  bool authenticationToken;
  bool facility;
} _DiagnosticService_getDiagByFacility_args__isset;

class DiagnosticService_getDiagByFacility_args {
 public:

  DiagnosticService_getDiagByFacility_args() : authenticationToken(), facility() {
  }

  virtual ~DiagnosticService_getDiagByFacility_args() throw() {}

  std::string authenticationToken;
  std::string facility;

  _DiagnosticService_getDiagByFacility_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_facility(const std::string& val) {
    facility = val;
  }

  bool operator == (const DiagnosticService_getDiagByFacility_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(facility == rhs.facility))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getDiagByFacility_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getDiagByFacility_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getDiagByFacility_pargs {
 public:


  virtual ~DiagnosticService_getDiagByFacility_pargs() throw() {}

  const std::string* authenticationToken;
  const std::string* facility;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getDiagByFacility_result__isset {
  _DiagnosticService_getDiagByFacility_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getDiagByFacility_result__isset;

class DiagnosticService_getDiagByFacility_result {
 public:

  DiagnosticService_getDiagByFacility_result() {
  }

  virtual ~DiagnosticService_getDiagByFacility_result() throw() {}

  std::vector<DiagLog>  success;

  _DiagnosticService_getDiagByFacility_result__isset __isset;

  void __set_success(const std::vector<DiagLog> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getDiagByFacility_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getDiagByFacility_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getDiagByFacility_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getDiagByFacility_presult__isset {
  _DiagnosticService_getDiagByFacility_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getDiagByFacility_presult__isset;

class DiagnosticService_getDiagByFacility_presult {
 public:


  virtual ~DiagnosticService_getDiagByFacility_presult() throw() {}

  std::vector<DiagLog> * success;

  _DiagnosticService_getDiagByFacility_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getDiagBySeverity_args__isset {
  _DiagnosticService_getDiagBySeverity_args__isset() : authenticationToken(false), severity(false) {}
  bool authenticationToken;
  bool severity;
} _DiagnosticService_getDiagBySeverity_args__isset;

class DiagnosticService_getDiagBySeverity_args {
 public:

  DiagnosticService_getDiagBySeverity_args() : authenticationToken(), severity() {
  }

  virtual ~DiagnosticService_getDiagBySeverity_args() throw() {}

  std::string authenticationToken;
  std::string severity;

  _DiagnosticService_getDiagBySeverity_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_severity(const std::string& val) {
    severity = val;
  }

  bool operator == (const DiagnosticService_getDiagBySeverity_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(severity == rhs.severity))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getDiagBySeverity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getDiagBySeverity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getDiagBySeverity_pargs {
 public:


  virtual ~DiagnosticService_getDiagBySeverity_pargs() throw() {}

  const std::string* authenticationToken;
  const std::string* severity;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getDiagBySeverity_result__isset {
  _DiagnosticService_getDiagBySeverity_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getDiagBySeverity_result__isset;

class DiagnosticService_getDiagBySeverity_result {
 public:

  DiagnosticService_getDiagBySeverity_result() {
  }

  virtual ~DiagnosticService_getDiagBySeverity_result() throw() {}

  std::vector<DiagLog>  success;

  _DiagnosticService_getDiagBySeverity_result__isset __isset;

  void __set_success(const std::vector<DiagLog> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getDiagBySeverity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getDiagBySeverity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getDiagBySeverity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getDiagBySeverity_presult__isset {
  _DiagnosticService_getDiagBySeverity_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getDiagBySeverity_presult__isset;

class DiagnosticService_getDiagBySeverity_presult {
 public:


  virtual ~DiagnosticService_getDiagBySeverity_presult() throw() {}

  std::vector<DiagLog> * success;

  _DiagnosticService_getDiagBySeverity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DiagnosticService_getAllDiagnostics_args__isset {
  _DiagnosticService_getAllDiagnostics_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _DiagnosticService_getAllDiagnostics_args__isset;

class DiagnosticService_getAllDiagnostics_args {
 public:

  DiagnosticService_getAllDiagnostics_args() : authenticationToken() {
  }

  virtual ~DiagnosticService_getAllDiagnostics_args() throw() {}

  std::string authenticationToken;

  _DiagnosticService_getAllDiagnostics_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const DiagnosticService_getAllDiagnostics_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getAllDiagnostics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getAllDiagnostics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DiagnosticService_getAllDiagnostics_pargs {
 public:


  virtual ~DiagnosticService_getAllDiagnostics_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getAllDiagnostics_result__isset {
  _DiagnosticService_getAllDiagnostics_result__isset() : success(false) {}
  bool success;
} _DiagnosticService_getAllDiagnostics_result__isset;

class DiagnosticService_getAllDiagnostics_result {
 public:

  DiagnosticService_getAllDiagnostics_result() {
  }

  virtual ~DiagnosticService_getAllDiagnostics_result() throw() {}

  std::vector<DiagLog>  success;

  _DiagnosticService_getAllDiagnostics_result__isset __isset;

  void __set_success(const std::vector<DiagLog> & val) {
    success = val;
  }

  bool operator == (const DiagnosticService_getAllDiagnostics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DiagnosticService_getAllDiagnostics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DiagnosticService_getAllDiagnostics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DiagnosticService_getAllDiagnostics_presult__isset {
  _DiagnosticService_getAllDiagnostics_presult__isset() : success(false) {}
  bool success;
} _DiagnosticService_getAllDiagnostics_presult__isset;

class DiagnosticService_getAllDiagnostics_presult {
 public:


  virtual ~DiagnosticService_getAllDiagnostics_presult() throw() {}

  std::vector<DiagLog> * success;

  _DiagnosticService_getAllDiagnostics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DiagnosticServiceClient : virtual public DiagnosticServiceIf {
 public:
  DiagnosticServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DiagnosticServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getInterfaceVersion(std::string& _return);
  void send_getInterfaceVersion();
  void recv_getInterfaceVersion(std::string& _return);
  void getFacilities(std::vector<std::string> & _return, const std::string& authenticationToken);
  void send_getFacilities(const std::string& authenticationToken);
  void recv_getFacilities(std::vector<std::string> & _return);
  void getSeverities(std::vector<std::string> & _return, const std::string& authenticationToken);
  void send_getSeverities(const std::string& authenticationToken);
  void recv_getSeverities(std::vector<std::string> & _return);
  void getStatByFacility(std::vector<StatLog> & _return, const std::string& authenticationToken, const std::string& facility);
  void send_getStatByFacility(const std::string& authenticationToken, const std::string& facility);
  void recv_getStatByFacility(std::vector<StatLog> & _return);
  void getAllStatistics(std::vector<StatLog> & _return, const std::string& authenticationToken);
  void send_getAllStatistics(const std::string& authenticationToken);
  void recv_getAllStatistics(std::vector<StatLog> & _return);
  void getDiagByFacility(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& facility);
  void send_getDiagByFacility(const std::string& authenticationToken, const std::string& facility);
  void recv_getDiagByFacility(std::vector<DiagLog> & _return);
  void getDiagBySeverity(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& severity);
  void send_getDiagBySeverity(const std::string& authenticationToken, const std::string& severity);
  void recv_getDiagBySeverity(std::vector<DiagLog> & _return);
  void getAllDiagnostics(std::vector<DiagLog> & _return, const std::string& authenticationToken);
  void send_getAllDiagnostics(const std::string& authenticationToken);
  void recv_getAllDiagnostics(std::vector<DiagLog> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DiagnosticServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DiagnosticServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DiagnosticServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getInterfaceVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFacilities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSeverities(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatByFacility(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllStatistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDiagByFacility(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDiagBySeverity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllDiagnostics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DiagnosticServiceProcessor(boost::shared_ptr<DiagnosticServiceIf> iface) :
    iface_(iface) {
    processMap_["getInterfaceVersion"] = &DiagnosticServiceProcessor::process_getInterfaceVersion;
    processMap_["getFacilities"] = &DiagnosticServiceProcessor::process_getFacilities;
    processMap_["getSeverities"] = &DiagnosticServiceProcessor::process_getSeverities;
    processMap_["getStatByFacility"] = &DiagnosticServiceProcessor::process_getStatByFacility;
    processMap_["getAllStatistics"] = &DiagnosticServiceProcessor::process_getAllStatistics;
    processMap_["getDiagByFacility"] = &DiagnosticServiceProcessor::process_getDiagByFacility;
    processMap_["getDiagBySeverity"] = &DiagnosticServiceProcessor::process_getDiagBySeverity;
    processMap_["getAllDiagnostics"] = &DiagnosticServiceProcessor::process_getAllDiagnostics;
  }

  virtual ~DiagnosticServiceProcessor() {}
};

class DiagnosticServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DiagnosticServiceProcessorFactory(const ::boost::shared_ptr< DiagnosticServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DiagnosticServiceIfFactory > handlerFactory_;
};

class DiagnosticServiceMultiface : virtual public DiagnosticServiceIf {
 public:
  DiagnosticServiceMultiface(std::vector<boost::shared_ptr<DiagnosticServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DiagnosticServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DiagnosticServiceIf> > ifaces_;
  DiagnosticServiceMultiface() {}
  void add(boost::shared_ptr<DiagnosticServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getInterfaceVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInterfaceVersion(_return);
    }
    ifaces_[i]->getInterfaceVersion(_return);
    return;
  }

  void getFacilities(std::vector<std::string> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFacilities(_return, authenticationToken);
    }
    ifaces_[i]->getFacilities(_return, authenticationToken);
    return;
  }

  void getSeverities(std::vector<std::string> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSeverities(_return, authenticationToken);
    }
    ifaces_[i]->getSeverities(_return, authenticationToken);
    return;
  }

  void getStatByFacility(std::vector<StatLog> & _return, const std::string& authenticationToken, const std::string& facility) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatByFacility(_return, authenticationToken, facility);
    }
    ifaces_[i]->getStatByFacility(_return, authenticationToken, facility);
    return;
  }

  void getAllStatistics(std::vector<StatLog> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllStatistics(_return, authenticationToken);
    }
    ifaces_[i]->getAllStatistics(_return, authenticationToken);
    return;
  }

  void getDiagByFacility(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& facility) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDiagByFacility(_return, authenticationToken, facility);
    }
    ifaces_[i]->getDiagByFacility(_return, authenticationToken, facility);
    return;
  }

  void getDiagBySeverity(std::vector<DiagLog> & _return, const std::string& authenticationToken, const std::string& severity) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDiagBySeverity(_return, authenticationToken, severity);
    }
    ifaces_[i]->getDiagBySeverity(_return, authenticationToken, severity);
    return;
  }

  void getAllDiagnostics(std::vector<DiagLog> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllDiagnostics(_return, authenticationToken);
    }
    ifaces_[i]->getAllDiagnostics(_return, authenticationToken);
    return;
  }

};

}}} // namespace

#endif
