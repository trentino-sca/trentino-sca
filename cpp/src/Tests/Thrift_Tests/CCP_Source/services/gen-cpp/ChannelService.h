/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChannelService_H
#define ChannelService_H

#include <thrift/TDispatchProcessor.h>
#include "Channel_types.h"

namespace siemens { namespace bt { namespace channel {

class ChannelServiceIf {
 public:
  virtual ~ChannelServiceIf() {}
  virtual void getInterfaceVersion(std::string& _return) = 0;
  virtual bool isAvailable() = 0;
  virtual void getBusStatus(BusStatus& _return, const std::string& authToken) = 0;
  virtual void getBusOverview(OverviewData& _return, const std::string& authToken) = 0;
  virtual bool reset(const std::string& authToken) = 0;
  virtual bool stop(const std::string& authToken) = 0;
  virtual bool start(const std::string& authToken) = 0;
  virtual void getDevices(std::vector<Device> & _return, const std::string& authToken) = 0;
  virtual void getDevice(Device& _return, const std::string& authToken, const int32_t devKey) = 0;
  virtual int32_t countConnectedDevices(const std::string& authToken) = 0;
  virtual int32_t countConfiguredDevices(const std::string& authToken) = 0;
  virtual void getDeviceListStatus(BusStatus& _return, const std::string& authToken) = 0;
  virtual void readOrphanList(std::vector<std::string> & _return, const std::string& authToken) = 0;
  virtual void getTests(std::vector<PointTest> & _return, const std::string& authToken) = 0;
  virtual int32_t releaseOverwrite(const std::string& authToken) = 0;
  virtual void incrementValue(std::string& _return, const std::string& authToken, const int32_t key) = 0;
  virtual void decrementValue(std::string& _return, const std::string& authToken, const int32_t key) = 0;
  virtual void setTestValue(std::string& _return, const std::string& authToken, const int32_t key, const double value) = 0;
  virtual void getTestValue(std::string& _return, const std::string& authToken, const int32_t key) = 0;
  virtual int32_t setState(const std::string& authToken, const int32_t key, const int32_t state) = 0;
  virtual void setComment(std::string& _return, const std::string& authToken, const int32_t key, const std::string& value) = 0;
};

class ChannelServiceIfFactory {
 public:
  typedef ChannelServiceIf Handler;

  virtual ~ChannelServiceIfFactory() {}

  virtual ChannelServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChannelServiceIf* /* handler */) = 0;
};

class ChannelServiceIfSingletonFactory : virtual public ChannelServiceIfFactory {
 public:
  ChannelServiceIfSingletonFactory(const boost::shared_ptr<ChannelServiceIf>& iface) : iface_(iface) {}
  virtual ~ChannelServiceIfSingletonFactory() {}

  virtual ChannelServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChannelServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChannelServiceIf> iface_;
};

class ChannelServiceNull : virtual public ChannelServiceIf {
 public:
  virtual ~ChannelServiceNull() {}
  void getInterfaceVersion(std::string& /* _return */) {
    return;
  }
  bool isAvailable() {
    bool _return = false;
    return _return;
  }
  void getBusStatus(BusStatus& /* _return */, const std::string& /* authToken */) {
    return;
  }
  void getBusOverview(OverviewData& /* _return */, const std::string& /* authToken */) {
    return;
  }
  bool reset(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  bool stop(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  bool start(const std::string& /* authToken */) {
    bool _return = false;
    return _return;
  }
  void getDevices(std::vector<Device> & /* _return */, const std::string& /* authToken */) {
    return;
  }
  void getDevice(Device& /* _return */, const std::string& /* authToken */, const int32_t /* devKey */) {
    return;
  }
  int32_t countConnectedDevices(const std::string& /* authToken */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t countConfiguredDevices(const std::string& /* authToken */) {
    int32_t _return = 0;
    return _return;
  }
  void getDeviceListStatus(BusStatus& /* _return */, const std::string& /* authToken */) {
    return;
  }
  void readOrphanList(std::vector<std::string> & /* _return */, const std::string& /* authToken */) {
    return;
  }
  void getTests(std::vector<PointTest> & /* _return */, const std::string& /* authToken */) {
    return;
  }
  int32_t releaseOverwrite(const std::string& /* authToken */) {
    int32_t _return = 0;
    return _return;
  }
  void incrementValue(std::string& /* _return */, const std::string& /* authToken */, const int32_t /* key */) {
    return;
  }
  void decrementValue(std::string& /* _return */, const std::string& /* authToken */, const int32_t /* key */) {
    return;
  }
  void setTestValue(std::string& /* _return */, const std::string& /* authToken */, const int32_t /* key */, const double /* value */) {
    return;
  }
  void getTestValue(std::string& /* _return */, const std::string& /* authToken */, const int32_t /* key */) {
    return;
  }
  int32_t setState(const std::string& /* authToken */, const int32_t /* key */, const int32_t /* state */) {
    int32_t _return = 0;
    return _return;
  }
  void setComment(std::string& /* _return */, const std::string& /* authToken */, const int32_t /* key */, const std::string& /* value */) {
    return;
  }
};


class ChannelService_getInterfaceVersion_args {
 public:

  ChannelService_getInterfaceVersion_args() {
  }

  virtual ~ChannelService_getInterfaceVersion_args() throw() {}


  bool operator == (const ChannelService_getInterfaceVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_getInterfaceVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getInterfaceVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getInterfaceVersion_pargs {
 public:


  virtual ~ChannelService_getInterfaceVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getInterfaceVersion_result__isset {
  _ChannelService_getInterfaceVersion_result__isset() : success(false) {}
  bool success;
} _ChannelService_getInterfaceVersion_result__isset;

class ChannelService_getInterfaceVersion_result {
 public:

  ChannelService_getInterfaceVersion_result() : success() {
  }

  virtual ~ChannelService_getInterfaceVersion_result() throw() {}

  std::string success;

  _ChannelService_getInterfaceVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ChannelService_getInterfaceVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getInterfaceVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getInterfaceVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getInterfaceVersion_presult__isset {
  _ChannelService_getInterfaceVersion_presult__isset() : success(false) {}
  bool success;
} _ChannelService_getInterfaceVersion_presult__isset;

class ChannelService_getInterfaceVersion_presult {
 public:


  virtual ~ChannelService_getInterfaceVersion_presult() throw() {}

  std::string* success;

  _ChannelService_getInterfaceVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChannelService_isAvailable_args {
 public:

  ChannelService_isAvailable_args() {
  }

  virtual ~ChannelService_isAvailable_args() throw() {}


  bool operator == (const ChannelService_isAvailable_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChannelService_isAvailable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_isAvailable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_isAvailable_pargs {
 public:


  virtual ~ChannelService_isAvailable_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_isAvailable_result__isset {
  _ChannelService_isAvailable_result__isset() : success(false) {}
  bool success;
} _ChannelService_isAvailable_result__isset;

class ChannelService_isAvailable_result {
 public:

  ChannelService_isAvailable_result() : success(0) {
  }

  virtual ~ChannelService_isAvailable_result() throw() {}

  bool success;

  _ChannelService_isAvailable_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ChannelService_isAvailable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_isAvailable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_isAvailable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_isAvailable_presult__isset {
  _ChannelService_isAvailable_presult__isset() : success(false) {}
  bool success;
} _ChannelService_isAvailable_presult__isset;

class ChannelService_isAvailable_presult {
 public:


  virtual ~ChannelService_isAvailable_presult() throw() {}

  bool* success;

  _ChannelService_isAvailable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getBusStatus_args__isset {
  _ChannelService_getBusStatus_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_getBusStatus_args__isset;

class ChannelService_getBusStatus_args {
 public:

  ChannelService_getBusStatus_args() : authToken() {
  }

  virtual ~ChannelService_getBusStatus_args() throw() {}

  std::string authToken;

  _ChannelService_getBusStatus_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_getBusStatus_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getBusStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getBusStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getBusStatus_pargs {
 public:


  virtual ~ChannelService_getBusStatus_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getBusStatus_result__isset {
  _ChannelService_getBusStatus_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getBusStatus_result__isset;

class ChannelService_getBusStatus_result {
 public:

  ChannelService_getBusStatus_result() {
  }

  virtual ~ChannelService_getBusStatus_result() throw() {}

  BusStatus success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getBusStatus_result__isset __isset;

  void __set_success(const BusStatus& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_getBusStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getBusStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getBusStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getBusStatus_presult__isset {
  _ChannelService_getBusStatus_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getBusStatus_presult__isset;

class ChannelService_getBusStatus_presult {
 public:


  virtual ~ChannelService_getBusStatus_presult() throw() {}

  BusStatus* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getBusStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getBusOverview_args__isset {
  _ChannelService_getBusOverview_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_getBusOverview_args__isset;

class ChannelService_getBusOverview_args {
 public:

  ChannelService_getBusOverview_args() : authToken() {
  }

  virtual ~ChannelService_getBusOverview_args() throw() {}

  std::string authToken;

  _ChannelService_getBusOverview_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_getBusOverview_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getBusOverview_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getBusOverview_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getBusOverview_pargs {
 public:


  virtual ~ChannelService_getBusOverview_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getBusOverview_result__isset {
  _ChannelService_getBusOverview_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getBusOverview_result__isset;

class ChannelService_getBusOverview_result {
 public:

  ChannelService_getBusOverview_result() {
  }

  virtual ~ChannelService_getBusOverview_result() throw() {}

  OverviewData success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getBusOverview_result__isset __isset;

  void __set_success(const OverviewData& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_getBusOverview_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getBusOverview_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getBusOverview_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getBusOverview_presult__isset {
  _ChannelService_getBusOverview_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getBusOverview_presult__isset;

class ChannelService_getBusOverview_presult {
 public:


  virtual ~ChannelService_getBusOverview_presult() throw() {}

  OverviewData* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getBusOverview_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_reset_args__isset {
  _ChannelService_reset_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_reset_args__isset;

class ChannelService_reset_args {
 public:

  ChannelService_reset_args() : authToken() {
  }

  virtual ~ChannelService_reset_args() throw() {}

  std::string authToken;

  _ChannelService_reset_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_reset_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_reset_pargs {
 public:


  virtual ~ChannelService_reset_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_reset_result__isset {
  _ChannelService_reset_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_reset_result__isset;

class ChannelService_reset_result {
 public:

  ChannelService_reset_result() : success(0) {
  }

  virtual ~ChannelService_reset_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_reset_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_reset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_reset_presult__isset {
  _ChannelService_reset_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_reset_presult__isset;

class ChannelService_reset_presult {
 public:


  virtual ~ChannelService_reset_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_stop_args__isset {
  _ChannelService_stop_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_stop_args__isset;

class ChannelService_stop_args {
 public:

  ChannelService_stop_args() : authToken() {
  }

  virtual ~ChannelService_stop_args() throw() {}

  std::string authToken;

  _ChannelService_stop_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_stop_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_stop_pargs {
 public:


  virtual ~ChannelService_stop_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_stop_result__isset {
  _ChannelService_stop_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_stop_result__isset;

class ChannelService_stop_result {
 public:

  ChannelService_stop_result() : success(0) {
  }

  virtual ~ChannelService_stop_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_stop_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_stop_presult__isset {
  _ChannelService_stop_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_stop_presult__isset;

class ChannelService_stop_presult {
 public:


  virtual ~ChannelService_stop_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_start_args__isset {
  _ChannelService_start_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_start_args__isset;

class ChannelService_start_args {
 public:

  ChannelService_start_args() : authToken() {
  }

  virtual ~ChannelService_start_args() throw() {}

  std::string authToken;

  _ChannelService_start_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_start_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_start_pargs {
 public:


  virtual ~ChannelService_start_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_start_result__isset {
  _ChannelService_start_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_start_result__isset;

class ChannelService_start_result {
 public:

  ChannelService_start_result() : success(0) {
  }

  virtual ~ChannelService_start_result() throw() {}

  bool success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_start_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_start_presult__isset {
  _ChannelService_start_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_start_presult__isset;

class ChannelService_start_presult {
 public:


  virtual ~ChannelService_start_presult() throw() {}

  bool* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getDevices_args__isset {
  _ChannelService_getDevices_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_getDevices_args__isset;

class ChannelService_getDevices_args {
 public:

  ChannelService_getDevices_args() : authToken() {
  }

  virtual ~ChannelService_getDevices_args() throw() {}

  std::string authToken;

  _ChannelService_getDevices_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_getDevices_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDevices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getDevices_pargs {
 public:


  virtual ~ChannelService_getDevices_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDevices_result__isset {
  _ChannelService_getDevices_result__isset() : success(false) {}
  bool success;
} _ChannelService_getDevices_result__isset;

class ChannelService_getDevices_result {
 public:

  ChannelService_getDevices_result() {
  }

  virtual ~ChannelService_getDevices_result() throw() {}

  std::vector<Device>  success;

  _ChannelService_getDevices_result__isset __isset;

  void __set_success(const std::vector<Device> & val) {
    success = val;
  }

  bool operator == (const ChannelService_getDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDevices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDevices_presult__isset {
  _ChannelService_getDevices_presult__isset() : success(false) {}
  bool success;
} _ChannelService_getDevices_presult__isset;

class ChannelService_getDevices_presult {
 public:


  virtual ~ChannelService_getDevices_presult() throw() {}

  std::vector<Device> * success;

  _ChannelService_getDevices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getDevice_args__isset {
  _ChannelService_getDevice_args__isset() : authToken(false), devKey(false) {}
  bool authToken;
  bool devKey;
} _ChannelService_getDevice_args__isset;

class ChannelService_getDevice_args {
 public:

  ChannelService_getDevice_args() : authToken(), devKey(0) {
  }

  virtual ~ChannelService_getDevice_args() throw() {}

  std::string authToken;
  int32_t devKey;

  _ChannelService_getDevice_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_devKey(const int32_t val) {
    devKey = val;
  }

  bool operator == (const ChannelService_getDevice_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(devKey == rhs.devKey))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getDevice_pargs {
 public:


  virtual ~ChannelService_getDevice_pargs() throw() {}

  const std::string* authToken;
  const int32_t* devKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDevice_result__isset {
  _ChannelService_getDevice_result__isset() : success(false), baException(false), cmdException(false) {}
  bool success;
  bool baException;
  bool cmdException;
} _ChannelService_getDevice_result__isset;

class ChannelService_getDevice_result {
 public:

  ChannelService_getDevice_result() {
  }

  virtual ~ChannelService_getDevice_result() throw() {}

  Device success;
   ::siemens::bt::error::BaException baException;
  DeviceCmdException cmdException;

  _ChannelService_getDevice_result__isset __isset;

  void __set_success(const Device& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  void __set_cmdException(const DeviceCmdException& val) {
    cmdException = val;
  }

  bool operator == (const ChannelService_getDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    if (!(cmdException == rhs.cmdException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDevice_presult__isset {
  _ChannelService_getDevice_presult__isset() : success(false), baException(false), cmdException(false) {}
  bool success;
  bool baException;
  bool cmdException;
} _ChannelService_getDevice_presult__isset;

class ChannelService_getDevice_presult {
 public:


  virtual ~ChannelService_getDevice_presult() throw() {}

  Device* success;
   ::siemens::bt::error::BaException baException;
  DeviceCmdException cmdException;

  _ChannelService_getDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_countConnectedDevices_args__isset {
  _ChannelService_countConnectedDevices_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_countConnectedDevices_args__isset;

class ChannelService_countConnectedDevices_args {
 public:

  ChannelService_countConnectedDevices_args() : authToken() {
  }

  virtual ~ChannelService_countConnectedDevices_args() throw() {}

  std::string authToken;

  _ChannelService_countConnectedDevices_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_countConnectedDevices_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_countConnectedDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_countConnectedDevices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_countConnectedDevices_pargs {
 public:


  virtual ~ChannelService_countConnectedDevices_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_countConnectedDevices_result__isset {
  _ChannelService_countConnectedDevices_result__isset() : success(false) {}
  bool success;
} _ChannelService_countConnectedDevices_result__isset;

class ChannelService_countConnectedDevices_result {
 public:

  ChannelService_countConnectedDevices_result() : success(0) {
  }

  virtual ~ChannelService_countConnectedDevices_result() throw() {}

  int32_t success;

  _ChannelService_countConnectedDevices_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ChannelService_countConnectedDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_countConnectedDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_countConnectedDevices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_countConnectedDevices_presult__isset {
  _ChannelService_countConnectedDevices_presult__isset() : success(false) {}
  bool success;
} _ChannelService_countConnectedDevices_presult__isset;

class ChannelService_countConnectedDevices_presult {
 public:


  virtual ~ChannelService_countConnectedDevices_presult() throw() {}

  int32_t* success;

  _ChannelService_countConnectedDevices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_countConfiguredDevices_args__isset {
  _ChannelService_countConfiguredDevices_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_countConfiguredDevices_args__isset;

class ChannelService_countConfiguredDevices_args {
 public:

  ChannelService_countConfiguredDevices_args() : authToken() {
  }

  virtual ~ChannelService_countConfiguredDevices_args() throw() {}

  std::string authToken;

  _ChannelService_countConfiguredDevices_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_countConfiguredDevices_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_countConfiguredDevices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_countConfiguredDevices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_countConfiguredDevices_pargs {
 public:


  virtual ~ChannelService_countConfiguredDevices_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_countConfiguredDevices_result__isset {
  _ChannelService_countConfiguredDevices_result__isset() : success(false) {}
  bool success;
} _ChannelService_countConfiguredDevices_result__isset;

class ChannelService_countConfiguredDevices_result {
 public:

  ChannelService_countConfiguredDevices_result() : success(0) {
  }

  virtual ~ChannelService_countConfiguredDevices_result() throw() {}

  int32_t success;

  _ChannelService_countConfiguredDevices_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ChannelService_countConfiguredDevices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_countConfiguredDevices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_countConfiguredDevices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_countConfiguredDevices_presult__isset {
  _ChannelService_countConfiguredDevices_presult__isset() : success(false) {}
  bool success;
} _ChannelService_countConfiguredDevices_presult__isset;

class ChannelService_countConfiguredDevices_presult {
 public:


  virtual ~ChannelService_countConfiguredDevices_presult() throw() {}

  int32_t* success;

  _ChannelService_countConfiguredDevices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getDeviceListStatus_args__isset {
  _ChannelService_getDeviceListStatus_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_getDeviceListStatus_args__isset;

class ChannelService_getDeviceListStatus_args {
 public:

  ChannelService_getDeviceListStatus_args() : authToken() {
  }

  virtual ~ChannelService_getDeviceListStatus_args() throw() {}

  std::string authToken;

  _ChannelService_getDeviceListStatus_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_getDeviceListStatus_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDeviceListStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDeviceListStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getDeviceListStatus_pargs {
 public:


  virtual ~ChannelService_getDeviceListStatus_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDeviceListStatus_result__isset {
  _ChannelService_getDeviceListStatus_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getDeviceListStatus_result__isset;

class ChannelService_getDeviceListStatus_result {
 public:

  ChannelService_getDeviceListStatus_result() {
  }

  virtual ~ChannelService_getDeviceListStatus_result() throw() {}

  BusStatus success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getDeviceListStatus_result__isset __isset;

  void __set_success(const BusStatus& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_getDeviceListStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getDeviceListStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getDeviceListStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getDeviceListStatus_presult__isset {
  _ChannelService_getDeviceListStatus_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getDeviceListStatus_presult__isset;

class ChannelService_getDeviceListStatus_presult {
 public:


  virtual ~ChannelService_getDeviceListStatus_presult() throw() {}

  BusStatus* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getDeviceListStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_readOrphanList_args__isset {
  _ChannelService_readOrphanList_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_readOrphanList_args__isset;

class ChannelService_readOrphanList_args {
 public:

  ChannelService_readOrphanList_args() : authToken() {
  }

  virtual ~ChannelService_readOrphanList_args() throw() {}

  std::string authToken;

  _ChannelService_readOrphanList_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_readOrphanList_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_readOrphanList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_readOrphanList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_readOrphanList_pargs {
 public:


  virtual ~ChannelService_readOrphanList_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_readOrphanList_result__isset {
  _ChannelService_readOrphanList_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_readOrphanList_result__isset;

class ChannelService_readOrphanList_result {
 public:

  ChannelService_readOrphanList_result() {
  }

  virtual ~ChannelService_readOrphanList_result() throw() {}

  std::vector<std::string>  success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_readOrphanList_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_readOrphanList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_readOrphanList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_readOrphanList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_readOrphanList_presult__isset {
  _ChannelService_readOrphanList_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_readOrphanList_presult__isset;

class ChannelService_readOrphanList_presult {
 public:


  virtual ~ChannelService_readOrphanList_presult() throw() {}

  std::vector<std::string> * success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_readOrphanList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getTests_args__isset {
  _ChannelService_getTests_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_getTests_args__isset;

class ChannelService_getTests_args {
 public:

  ChannelService_getTests_args() : authToken() {
  }

  virtual ~ChannelService_getTests_args() throw() {}

  std::string authToken;

  _ChannelService_getTests_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_getTests_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getTests_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getTests_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getTests_pargs {
 public:


  virtual ~ChannelService_getTests_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getTests_result__isset {
  _ChannelService_getTests_result__isset() : success(false) {}
  bool success;
} _ChannelService_getTests_result__isset;

class ChannelService_getTests_result {
 public:

  ChannelService_getTests_result() {
  }

  virtual ~ChannelService_getTests_result() throw() {}

  std::vector<PointTest>  success;

  _ChannelService_getTests_result__isset __isset;

  void __set_success(const std::vector<PointTest> & val) {
    success = val;
  }

  bool operator == (const ChannelService_getTests_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getTests_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getTests_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getTests_presult__isset {
  _ChannelService_getTests_presult__isset() : success(false) {}
  bool success;
} _ChannelService_getTests_presult__isset;

class ChannelService_getTests_presult {
 public:


  virtual ~ChannelService_getTests_presult() throw() {}

  std::vector<PointTest> * success;

  _ChannelService_getTests_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_releaseOverwrite_args__isset {
  _ChannelService_releaseOverwrite_args__isset() : authToken(false) {}
  bool authToken;
} _ChannelService_releaseOverwrite_args__isset;

class ChannelService_releaseOverwrite_args {
 public:

  ChannelService_releaseOverwrite_args() : authToken() {
  }

  virtual ~ChannelService_releaseOverwrite_args() throw() {}

  std::string authToken;

  _ChannelService_releaseOverwrite_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  bool operator == (const ChannelService_releaseOverwrite_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    return true;
  }
  bool operator != (const ChannelService_releaseOverwrite_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_releaseOverwrite_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_releaseOverwrite_pargs {
 public:


  virtual ~ChannelService_releaseOverwrite_pargs() throw() {}

  const std::string* authToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_releaseOverwrite_result__isset {
  _ChannelService_releaseOverwrite_result__isset() : success(false) {}
  bool success;
} _ChannelService_releaseOverwrite_result__isset;

class ChannelService_releaseOverwrite_result {
 public:

  ChannelService_releaseOverwrite_result() : success(0) {
  }

  virtual ~ChannelService_releaseOverwrite_result() throw() {}

  int32_t success;

  _ChannelService_releaseOverwrite_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ChannelService_releaseOverwrite_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChannelService_releaseOverwrite_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_releaseOverwrite_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_releaseOverwrite_presult__isset {
  _ChannelService_releaseOverwrite_presult__isset() : success(false) {}
  bool success;
} _ChannelService_releaseOverwrite_presult__isset;

class ChannelService_releaseOverwrite_presult {
 public:


  virtual ~ChannelService_releaseOverwrite_presult() throw() {}

  int32_t* success;

  _ChannelService_releaseOverwrite_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_incrementValue_args__isset {
  _ChannelService_incrementValue_args__isset() : authToken(false), key(false) {}
  bool authToken;
  bool key;
} _ChannelService_incrementValue_args__isset;

class ChannelService_incrementValue_args {
 public:

  ChannelService_incrementValue_args() : authToken(), key(0) {
  }

  virtual ~ChannelService_incrementValue_args() throw() {}

  std::string authToken;
  int32_t key;

  _ChannelService_incrementValue_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_key(const int32_t val) {
    key = val;
  }

  bool operator == (const ChannelService_incrementValue_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const ChannelService_incrementValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_incrementValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_incrementValue_pargs {
 public:


  virtual ~ChannelService_incrementValue_pargs() throw() {}

  const std::string* authToken;
  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_incrementValue_result__isset {
  _ChannelService_incrementValue_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_incrementValue_result__isset;

class ChannelService_incrementValue_result {
 public:

  ChannelService_incrementValue_result() : success() {
  }

  virtual ~ChannelService_incrementValue_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_incrementValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_incrementValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_incrementValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_incrementValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_incrementValue_presult__isset {
  _ChannelService_incrementValue_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_incrementValue_presult__isset;

class ChannelService_incrementValue_presult {
 public:


  virtual ~ChannelService_incrementValue_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_incrementValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_decrementValue_args__isset {
  _ChannelService_decrementValue_args__isset() : authToken(false), key(false) {}
  bool authToken;
  bool key;
} _ChannelService_decrementValue_args__isset;

class ChannelService_decrementValue_args {
 public:

  ChannelService_decrementValue_args() : authToken(), key(0) {
  }

  virtual ~ChannelService_decrementValue_args() throw() {}

  std::string authToken;
  int32_t key;

  _ChannelService_decrementValue_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_key(const int32_t val) {
    key = val;
  }

  bool operator == (const ChannelService_decrementValue_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const ChannelService_decrementValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_decrementValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_decrementValue_pargs {
 public:


  virtual ~ChannelService_decrementValue_pargs() throw() {}

  const std::string* authToken;
  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_decrementValue_result__isset {
  _ChannelService_decrementValue_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_decrementValue_result__isset;

class ChannelService_decrementValue_result {
 public:

  ChannelService_decrementValue_result() : success() {
  }

  virtual ~ChannelService_decrementValue_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_decrementValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_decrementValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_decrementValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_decrementValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_decrementValue_presult__isset {
  _ChannelService_decrementValue_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_decrementValue_presult__isset;

class ChannelService_decrementValue_presult {
 public:


  virtual ~ChannelService_decrementValue_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_decrementValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_setTestValue_args__isset {
  _ChannelService_setTestValue_args__isset() : authToken(false), key(false), value(false) {}
  bool authToken;
  bool key;
  bool value;
} _ChannelService_setTestValue_args__isset;

class ChannelService_setTestValue_args {
 public:

  ChannelService_setTestValue_args() : authToken(), key(0), value(0) {
  }

  virtual ~ChannelService_setTestValue_args() throw() {}

  std::string authToken;
  int32_t key;
  double value;

  _ChannelService_setTestValue_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_value(const double val) {
    value = val;
  }

  bool operator == (const ChannelService_setTestValue_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ChannelService_setTestValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_setTestValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_setTestValue_pargs {
 public:


  virtual ~ChannelService_setTestValue_pargs() throw() {}

  const std::string* authToken;
  const int32_t* key;
  const double* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_setTestValue_result__isset {
  _ChannelService_setTestValue_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_setTestValue_result__isset;

class ChannelService_setTestValue_result {
 public:

  ChannelService_setTestValue_result() : success() {
  }

  virtual ~ChannelService_setTestValue_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_setTestValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_setTestValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_setTestValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_setTestValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_setTestValue_presult__isset {
  _ChannelService_setTestValue_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_setTestValue_presult__isset;

class ChannelService_setTestValue_presult {
 public:


  virtual ~ChannelService_setTestValue_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_setTestValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_getTestValue_args__isset {
  _ChannelService_getTestValue_args__isset() : authToken(false), key(false) {}
  bool authToken;
  bool key;
} _ChannelService_getTestValue_args__isset;

class ChannelService_getTestValue_args {
 public:

  ChannelService_getTestValue_args() : authToken(), key(0) {
  }

  virtual ~ChannelService_getTestValue_args() throw() {}

  std::string authToken;
  int32_t key;

  _ChannelService_getTestValue_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_key(const int32_t val) {
    key = val;
  }

  bool operator == (const ChannelService_getTestValue_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getTestValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getTestValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_getTestValue_pargs {
 public:


  virtual ~ChannelService_getTestValue_pargs() throw() {}

  const std::string* authToken;
  const int32_t* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getTestValue_result__isset {
  _ChannelService_getTestValue_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getTestValue_result__isset;

class ChannelService_getTestValue_result {
 public:

  ChannelService_getTestValue_result() : success() {
  }

  virtual ~ChannelService_getTestValue_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getTestValue_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_getTestValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_getTestValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_getTestValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_getTestValue_presult__isset {
  _ChannelService_getTestValue_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_getTestValue_presult__isset;

class ChannelService_getTestValue_presult {
 public:


  virtual ~ChannelService_getTestValue_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_getTestValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_setState_args__isset {
  _ChannelService_setState_args__isset() : authToken(false), key(false), state(false) {}
  bool authToken;
  bool key;
  bool state;
} _ChannelService_setState_args__isset;

class ChannelService_setState_args {
 public:

  ChannelService_setState_args() : authToken(), key(0), state(0) {
  }

  virtual ~ChannelService_setState_args() throw() {}

  std::string authToken;
  int32_t key;
  int32_t state;

  _ChannelService_setState_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_state(const int32_t val) {
    state = val;
  }

  bool operator == (const ChannelService_setState_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const ChannelService_setState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_setState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_setState_pargs {
 public:


  virtual ~ChannelService_setState_pargs() throw() {}

  const std::string* authToken;
  const int32_t* key;
  const int32_t* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_setState_result__isset {
  _ChannelService_setState_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_setState_result__isset;

class ChannelService_setState_result {
 public:

  ChannelService_setState_result() : success(0) {
  }

  virtual ~ChannelService_setState_result() throw() {}

  int32_t success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_setState_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_setState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_setState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_setState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_setState_presult__isset {
  _ChannelService_setState_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_setState_presult__isset;

class ChannelService_setState_presult {
 public:


  virtual ~ChannelService_setState_presult() throw() {}

  int32_t* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_setState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChannelService_setComment_args__isset {
  _ChannelService_setComment_args__isset() : authToken(false), key(false), value(false) {}
  bool authToken;
  bool key;
  bool value;
} _ChannelService_setComment_args__isset;

class ChannelService_setComment_args {
 public:

  ChannelService_setComment_args() : authToken(), key(0), value() {
  }

  virtual ~ChannelService_setComment_args() throw() {}

  std::string authToken;
  int32_t key;
  std::string value;

  _ChannelService_setComment_args__isset __isset;

  void __set_authToken(const std::string& val) {
    authToken = val;
  }

  void __set_key(const int32_t val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const ChannelService_setComment_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ChannelService_setComment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_setComment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChannelService_setComment_pargs {
 public:


  virtual ~ChannelService_setComment_pargs() throw() {}

  const std::string* authToken;
  const int32_t* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_setComment_result__isset {
  _ChannelService_setComment_result__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_setComment_result__isset;

class ChannelService_setComment_result {
 public:

  ChannelService_setComment_result() : success() {
  }

  virtual ~ChannelService_setComment_result() throw() {}

  std::string success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_setComment_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_baException(const  ::siemens::bt::error::BaException& val) {
    baException = val;
  }

  bool operator == (const ChannelService_setComment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(baException == rhs.baException))
      return false;
    return true;
  }
  bool operator != (const ChannelService_setComment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChannelService_setComment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChannelService_setComment_presult__isset {
  _ChannelService_setComment_presult__isset() : success(false), baException(false) {}
  bool success;
  bool baException;
} _ChannelService_setComment_presult__isset;

class ChannelService_setComment_presult {
 public:


  virtual ~ChannelService_setComment_presult() throw() {}

  std::string* success;
   ::siemens::bt::error::BaException baException;

  _ChannelService_setComment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChannelServiceClient : virtual public ChannelServiceIf {
 public:
  ChannelServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChannelServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getInterfaceVersion(std::string& _return);
  void send_getInterfaceVersion();
  void recv_getInterfaceVersion(std::string& _return);
  bool isAvailable();
  void send_isAvailable();
  bool recv_isAvailable();
  void getBusStatus(BusStatus& _return, const std::string& authToken);
  void send_getBusStatus(const std::string& authToken);
  void recv_getBusStatus(BusStatus& _return);
  void getBusOverview(OverviewData& _return, const std::string& authToken);
  void send_getBusOverview(const std::string& authToken);
  void recv_getBusOverview(OverviewData& _return);
  bool reset(const std::string& authToken);
  void send_reset(const std::string& authToken);
  bool recv_reset();
  bool stop(const std::string& authToken);
  void send_stop(const std::string& authToken);
  bool recv_stop();
  bool start(const std::string& authToken);
  void send_start(const std::string& authToken);
  bool recv_start();
  void getDevices(std::vector<Device> & _return, const std::string& authToken);
  void send_getDevices(const std::string& authToken);
  void recv_getDevices(std::vector<Device> & _return);
  void getDevice(Device& _return, const std::string& authToken, const int32_t devKey);
  void send_getDevice(const std::string& authToken, const int32_t devKey);
  void recv_getDevice(Device& _return);
  int32_t countConnectedDevices(const std::string& authToken);
  void send_countConnectedDevices(const std::string& authToken);
  int32_t recv_countConnectedDevices();
  int32_t countConfiguredDevices(const std::string& authToken);
  void send_countConfiguredDevices(const std::string& authToken);
  int32_t recv_countConfiguredDevices();
  void getDeviceListStatus(BusStatus& _return, const std::string& authToken);
  void send_getDeviceListStatus(const std::string& authToken);
  void recv_getDeviceListStatus(BusStatus& _return);
  void readOrphanList(std::vector<std::string> & _return, const std::string& authToken);
  void send_readOrphanList(const std::string& authToken);
  void recv_readOrphanList(std::vector<std::string> & _return);
  void getTests(std::vector<PointTest> & _return, const std::string& authToken);
  void send_getTests(const std::string& authToken);
  void recv_getTests(std::vector<PointTest> & _return);
  int32_t releaseOverwrite(const std::string& authToken);
  void send_releaseOverwrite(const std::string& authToken);
  int32_t recv_releaseOverwrite();
  void incrementValue(std::string& _return, const std::string& authToken, const int32_t key);
  void send_incrementValue(const std::string& authToken, const int32_t key);
  void recv_incrementValue(std::string& _return);
  void decrementValue(std::string& _return, const std::string& authToken, const int32_t key);
  void send_decrementValue(const std::string& authToken, const int32_t key);
  void recv_decrementValue(std::string& _return);
  void setTestValue(std::string& _return, const std::string& authToken, const int32_t key, const double value);
  void send_setTestValue(const std::string& authToken, const int32_t key, const double value);
  void recv_setTestValue(std::string& _return);
  void getTestValue(std::string& _return, const std::string& authToken, const int32_t key);
  void send_getTestValue(const std::string& authToken, const int32_t key);
  void recv_getTestValue(std::string& _return);
  int32_t setState(const std::string& authToken, const int32_t key, const int32_t state);
  void send_setState(const std::string& authToken, const int32_t key, const int32_t state);
  int32_t recv_setState();
  void setComment(std::string& _return, const std::string& authToken, const int32_t key, const std::string& value);
  void send_setComment(const std::string& authToken, const int32_t key, const std::string& value);
  void recv_setComment(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChannelServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChannelServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChannelServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getInterfaceVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isAvailable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBusStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBusOverview(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDevices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countConnectedDevices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_countConfiguredDevices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceListStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readOrphanList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTests(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_releaseOverwrite(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_incrementValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_decrementValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTestValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTestValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setComment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChannelServiceProcessor(boost::shared_ptr<ChannelServiceIf> iface) :
    iface_(iface) {
    processMap_["getInterfaceVersion"] = &ChannelServiceProcessor::process_getInterfaceVersion;
    processMap_["isAvailable"] = &ChannelServiceProcessor::process_isAvailable;
    processMap_["getBusStatus"] = &ChannelServiceProcessor::process_getBusStatus;
    processMap_["getBusOverview"] = &ChannelServiceProcessor::process_getBusOverview;
    processMap_["reset"] = &ChannelServiceProcessor::process_reset;
    processMap_["stop"] = &ChannelServiceProcessor::process_stop;
    processMap_["start"] = &ChannelServiceProcessor::process_start;
    processMap_["getDevices"] = &ChannelServiceProcessor::process_getDevices;
    processMap_["getDevice"] = &ChannelServiceProcessor::process_getDevice;
    processMap_["countConnectedDevices"] = &ChannelServiceProcessor::process_countConnectedDevices;
    processMap_["countConfiguredDevices"] = &ChannelServiceProcessor::process_countConfiguredDevices;
    processMap_["getDeviceListStatus"] = &ChannelServiceProcessor::process_getDeviceListStatus;
    processMap_["readOrphanList"] = &ChannelServiceProcessor::process_readOrphanList;
    processMap_["getTests"] = &ChannelServiceProcessor::process_getTests;
    processMap_["releaseOverwrite"] = &ChannelServiceProcessor::process_releaseOverwrite;
    processMap_["incrementValue"] = &ChannelServiceProcessor::process_incrementValue;
    processMap_["decrementValue"] = &ChannelServiceProcessor::process_decrementValue;
    processMap_["setTestValue"] = &ChannelServiceProcessor::process_setTestValue;
    processMap_["getTestValue"] = &ChannelServiceProcessor::process_getTestValue;
    processMap_["setState"] = &ChannelServiceProcessor::process_setState;
    processMap_["setComment"] = &ChannelServiceProcessor::process_setComment;
  }

  virtual ~ChannelServiceProcessor() {}
};

class ChannelServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChannelServiceProcessorFactory(const ::boost::shared_ptr< ChannelServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChannelServiceIfFactory > handlerFactory_;
};

class ChannelServiceMultiface : virtual public ChannelServiceIf {
 public:
  ChannelServiceMultiface(std::vector<boost::shared_ptr<ChannelServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChannelServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChannelServiceIf> > ifaces_;
  ChannelServiceMultiface() {}
  void add(boost::shared_ptr<ChannelServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getInterfaceVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInterfaceVersion(_return);
    }
    ifaces_[i]->getInterfaceVersion(_return);
    return;
  }

  bool isAvailable() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isAvailable();
    }
    return ifaces_[i]->isAvailable();
  }

  void getBusStatus(BusStatus& _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBusStatus(_return, authToken);
    }
    ifaces_[i]->getBusStatus(_return, authToken);
    return;
  }

  void getBusOverview(OverviewData& _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBusOverview(_return, authToken);
    }
    ifaces_[i]->getBusOverview(_return, authToken);
    return;
  }

  bool reset(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset(authToken);
    }
    return ifaces_[i]->reset(authToken);
  }

  bool stop(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop(authToken);
    }
    return ifaces_[i]->stop(authToken);
  }

  bool start(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(authToken);
    }
    return ifaces_[i]->start(authToken);
  }

  void getDevices(std::vector<Device> & _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDevices(_return, authToken);
    }
    ifaces_[i]->getDevices(_return, authToken);
    return;
  }

  void getDevice(Device& _return, const std::string& authToken, const int32_t devKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDevice(_return, authToken, devKey);
    }
    ifaces_[i]->getDevice(_return, authToken, devKey);
    return;
  }

  int32_t countConnectedDevices(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countConnectedDevices(authToken);
    }
    return ifaces_[i]->countConnectedDevices(authToken);
  }

  int32_t countConfiguredDevices(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->countConfiguredDevices(authToken);
    }
    return ifaces_[i]->countConfiguredDevices(authToken);
  }

  void getDeviceListStatus(BusStatus& _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceListStatus(_return, authToken);
    }
    ifaces_[i]->getDeviceListStatus(_return, authToken);
    return;
  }

  void readOrphanList(std::vector<std::string> & _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readOrphanList(_return, authToken);
    }
    ifaces_[i]->readOrphanList(_return, authToken);
    return;
  }

  void getTests(std::vector<PointTest> & _return, const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTests(_return, authToken);
    }
    ifaces_[i]->getTests(_return, authToken);
    return;
  }

  int32_t releaseOverwrite(const std::string& authToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->releaseOverwrite(authToken);
    }
    return ifaces_[i]->releaseOverwrite(authToken);
  }

  void incrementValue(std::string& _return, const std::string& authToken, const int32_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->incrementValue(_return, authToken, key);
    }
    ifaces_[i]->incrementValue(_return, authToken, key);
    return;
  }

  void decrementValue(std::string& _return, const std::string& authToken, const int32_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->decrementValue(_return, authToken, key);
    }
    ifaces_[i]->decrementValue(_return, authToken, key);
    return;
  }

  void setTestValue(std::string& _return, const std::string& authToken, const int32_t key, const double value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTestValue(_return, authToken, key, value);
    }
    ifaces_[i]->setTestValue(_return, authToken, key, value);
    return;
  }

  void getTestValue(std::string& _return, const std::string& authToken, const int32_t key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTestValue(_return, authToken, key);
    }
    ifaces_[i]->getTestValue(_return, authToken, key);
    return;
  }

  int32_t setState(const std::string& authToken, const int32_t key, const int32_t state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setState(authToken, key, state);
    }
    return ifaces_[i]->setState(authToken, key, state);
  }

  void setComment(std::string& _return, const std::string& authToken, const int32_t key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setComment(_return, authToken, key, value);
    }
    ifaces_[i]->setComment(_return, authToken, key, value);
    return;
  }

};

}}} // namespace

#endif
