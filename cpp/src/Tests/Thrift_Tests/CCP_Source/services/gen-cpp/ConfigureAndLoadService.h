/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ConfigureAndLoadService_H
#define ConfigureAndLoadService_H

#include <thrift/TDispatchProcessor.h>
#include "ConfigureAndLoad_types.h"

namespace siemens { namespace bt { namespace configureandload {

class ConfigureAndLoadServiceIf {
 public:
  virtual ~ConfigureAndLoadServiceIf() {}
  virtual void getInterfaceVersion(std::string& _return) = 0;
  virtual void readConfiguration(ConfigureData& _return, const std::string& authenticationToken) = 0;
  virtual void writeConfiguration(const std::string& authenticationToken, const ConfigureData& config) = 0;
  virtual void setNwConfig(const std::string& authenticationToken, const std::vector< ::dicp::NwItf> & nwItf) = 0;
  virtual void getNwConfig(std::vector< ::dicp::NwItf> & _return, const std::string& authenticationToken) = 0;
  virtual void setBaDevConfig(const std::string& authenticationToken, const  ::dicp::BaDev& dev, const  ::dicp::BaPar& apdu) = 0;
  virtual void getBaDevConfig( ::dicp::BaDev& _return, const std::string& authenticationToken) = 0;
  virtual void getBaParConfig( ::dicp::BaPar& _return, const std::string& authenticationToken) = 0;
  virtual void setBaNwConfig(const std::string& authenticationToken, const  ::dicp::BaNw& network, const std::vector< ::dicp::BaPort> & ports) = 0;
  virtual void getBaNwConfig( ::dicp::BaNw& _return, const std::string& authenticationToken) = 0;
  virtual void getBaPortConfig(std::vector< ::dicp::BaPort> & _return, const std::string& authenticationToken) = 0;
  virtual void setUTCTime(const std::string& authenticationToken, const int64_t utctime) = 0;
  virtual int64_t getUTCTime(const std::string& authenticationToken) = 0;
  virtual bool processPackAndGo(const std::string& authenticationToken, const std::string& path) = 0;
  virtual int32_t getPackAndGoStatus(const std::string& authenticationToken) = 0;
  virtual bool createBackup(const std::string& authenticationToken, const std::string& path) = 0;
  virtual int32_t getBackupStatus(const std::string& authenticationToken) = 0;
  virtual void activateConfigData(const std::string& authenticationToken, const bool activate) = 0;
  virtual void setDeviceConfigParameter(const std::string& authenticationToken, const DeviceConfigParameter& devConfig) = 0;
  virtual void getDeviceConfigParameter(DeviceConfigParameter& _return, const std::string& authenticationToken) = 0;
  virtual void setTimeZone(const std::string& authenticationToken, const  ::dicp::TimeSet& tz) = 0;
  virtual void getTimeZone( ::dicp::TimeSet& _return, const std::string& authenticationToken) = 0;
  virtual void addIPPort( ::dicp::IPport& _return, const std::string& authenticationToken, const  ::dicp::Lan& lanNwItf) = 0;
  virtual void addLONPort( ::dicp::LONport& _return, const std::string& authenticationToken, const  ::dicp::Eia709& eia709NwItf) = 0;
  virtual void addMSTPPort( ::dicp::MSTPport& _return, const std::string& authenticationToken, const  ::dicp::Rs485& rs485NwItf) = 0;
  virtual void addLanItf( ::dicp::Lan& _return, const std::string& authenticationToken) = 0;
  virtual void addEia709Itf( ::dicp::Eia709& _return, const std::string& authenticationToken) = 0;
  virtual void addRs485Itf( ::dicp::Rs485& _return, const std::string& authenticationToken) = 0;
  virtual int32_t IsMSTPSupported(const std::string& authenticationToken) = 0;
  virtual int32_t IsLONSupported(const std::string& authenticationToken) = 0;
  virtual bool getStateSSH(const std::string& authenticationToken) = 0;
  virtual bool startSSH(const std::string& authenticationToken) = 0;
  virtual bool stopSSH(const std::string& authenticationToken) = 0;
};

class ConfigureAndLoadServiceIfFactory {
 public:
  typedef ConfigureAndLoadServiceIf Handler;

  virtual ~ConfigureAndLoadServiceIfFactory() {}

  virtual ConfigureAndLoadServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ConfigureAndLoadServiceIf* /* handler */) = 0;
};

class ConfigureAndLoadServiceIfSingletonFactory : virtual public ConfigureAndLoadServiceIfFactory {
 public:
  ConfigureAndLoadServiceIfSingletonFactory(const boost::shared_ptr<ConfigureAndLoadServiceIf>& iface) : iface_(iface) {}
  virtual ~ConfigureAndLoadServiceIfSingletonFactory() {}

  virtual ConfigureAndLoadServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ConfigureAndLoadServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ConfigureAndLoadServiceIf> iface_;
};

class ConfigureAndLoadServiceNull : virtual public ConfigureAndLoadServiceIf {
 public:
  virtual ~ConfigureAndLoadServiceNull() {}
  void getInterfaceVersion(std::string& /* _return */) {
    return;
  }
  void readConfiguration(ConfigureData& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void writeConfiguration(const std::string& /* authenticationToken */, const ConfigureData& /* config */) {
    return;
  }
  void setNwConfig(const std::string& /* authenticationToken */, const std::vector< ::dicp::NwItf> & /* nwItf */) {
    return;
  }
  void getNwConfig(std::vector< ::dicp::NwItf> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void setBaDevConfig(const std::string& /* authenticationToken */, const  ::dicp::BaDev& /* dev */, const  ::dicp::BaPar& /* apdu */) {
    return;
  }
  void getBaDevConfig( ::dicp::BaDev& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getBaParConfig( ::dicp::BaPar& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void setBaNwConfig(const std::string& /* authenticationToken */, const  ::dicp::BaNw& /* network */, const std::vector< ::dicp::BaPort> & /* ports */) {
    return;
  }
  void getBaNwConfig( ::dicp::BaNw& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void getBaPortConfig(std::vector< ::dicp::BaPort> & /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void setUTCTime(const std::string& /* authenticationToken */, const int64_t /* utctime */) {
    return;
  }
  int64_t getUTCTime(const std::string& /* authenticationToken */) {
    int64_t _return = 0;
    return _return;
  }
  bool processPackAndGo(const std::string& /* authenticationToken */, const std::string& /* path */) {
    bool _return = false;
    return _return;
  }
  int32_t getPackAndGoStatus(const std::string& /* authenticationToken */) {
    int32_t _return = 0;
    return _return;
  }
  bool createBackup(const std::string& /* authenticationToken */, const std::string& /* path */) {
    bool _return = false;
    return _return;
  }
  int32_t getBackupStatus(const std::string& /* authenticationToken */) {
    int32_t _return = 0;
    return _return;
  }
  void activateConfigData(const std::string& /* authenticationToken */, const bool /* activate */) {
    return;
  }
  void setDeviceConfigParameter(const std::string& /* authenticationToken */, const DeviceConfigParameter& /* devConfig */) {
    return;
  }
  void getDeviceConfigParameter(DeviceConfigParameter& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void setTimeZone(const std::string& /* authenticationToken */, const  ::dicp::TimeSet& /* tz */) {
    return;
  }
  void getTimeZone( ::dicp::TimeSet& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void addIPPort( ::dicp::IPport& /* _return */, const std::string& /* authenticationToken */, const  ::dicp::Lan& /* lanNwItf */) {
    return;
  }
  void addLONPort( ::dicp::LONport& /* _return */, const std::string& /* authenticationToken */, const  ::dicp::Eia709& /* eia709NwItf */) {
    return;
  }
  void addMSTPPort( ::dicp::MSTPport& /* _return */, const std::string& /* authenticationToken */, const  ::dicp::Rs485& /* rs485NwItf */) {
    return;
  }
  void addLanItf( ::dicp::Lan& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void addEia709Itf( ::dicp::Eia709& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  void addRs485Itf( ::dicp::Rs485& /* _return */, const std::string& /* authenticationToken */) {
    return;
  }
  int32_t IsMSTPSupported(const std::string& /* authenticationToken */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t IsLONSupported(const std::string& /* authenticationToken */) {
    int32_t _return = 0;
    return _return;
  }
  bool getStateSSH(const std::string& /* authenticationToken */) {
    bool _return = false;
    return _return;
  }
  bool startSSH(const std::string& /* authenticationToken */) {
    bool _return = false;
    return _return;
  }
  bool stopSSH(const std::string& /* authenticationToken */) {
    bool _return = false;
    return _return;
  }
};


class ConfigureAndLoadService_getInterfaceVersion_args {
 public:

  ConfigureAndLoadService_getInterfaceVersion_args() {
  }

  virtual ~ConfigureAndLoadService_getInterfaceVersion_args() throw() {}


  bool operator == (const ConfigureAndLoadService_getInterfaceVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getInterfaceVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getInterfaceVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getInterfaceVersion_pargs {
 public:


  virtual ~ConfigureAndLoadService_getInterfaceVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getInterfaceVersion_result__isset {
  _ConfigureAndLoadService_getInterfaceVersion_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getInterfaceVersion_result__isset;

class ConfigureAndLoadService_getInterfaceVersion_result {
 public:

  ConfigureAndLoadService_getInterfaceVersion_result() : success() {
  }

  virtual ~ConfigureAndLoadService_getInterfaceVersion_result() throw() {}

  std::string success;

  _ConfigureAndLoadService_getInterfaceVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getInterfaceVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getInterfaceVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getInterfaceVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getInterfaceVersion_presult__isset {
  _ConfigureAndLoadService_getInterfaceVersion_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getInterfaceVersion_presult__isset;

class ConfigureAndLoadService_getInterfaceVersion_presult {
 public:


  virtual ~ConfigureAndLoadService_getInterfaceVersion_presult() throw() {}

  std::string* success;

  _ConfigureAndLoadService_getInterfaceVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_readConfiguration_args__isset {
  _ConfigureAndLoadService_readConfiguration_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_readConfiguration_args__isset;

class ConfigureAndLoadService_readConfiguration_args {
 public:

  ConfigureAndLoadService_readConfiguration_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_readConfiguration_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_readConfiguration_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_readConfiguration_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_readConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_readConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_readConfiguration_pargs {
 public:


  virtual ~ConfigureAndLoadService_readConfiguration_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_readConfiguration_result__isset {
  _ConfigureAndLoadService_readConfiguration_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_readConfiguration_result__isset;

class ConfigureAndLoadService_readConfiguration_result {
 public:

  ConfigureAndLoadService_readConfiguration_result() {
  }

  virtual ~ConfigureAndLoadService_readConfiguration_result() throw() {}

  ConfigureData success;

  _ConfigureAndLoadService_readConfiguration_result__isset __isset;

  void __set_success(const ConfigureData& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_readConfiguration_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_readConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_readConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_readConfiguration_presult__isset {
  _ConfigureAndLoadService_readConfiguration_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_readConfiguration_presult__isset;

class ConfigureAndLoadService_readConfiguration_presult {
 public:


  virtual ~ConfigureAndLoadService_readConfiguration_presult() throw() {}

  ConfigureData* success;

  _ConfigureAndLoadService_readConfiguration_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_writeConfiguration_args__isset {
  _ConfigureAndLoadService_writeConfiguration_args__isset() : authenticationToken(false), config(false) {}
  bool authenticationToken;
  bool config;
} _ConfigureAndLoadService_writeConfiguration_args__isset;

class ConfigureAndLoadService_writeConfiguration_args {
 public:

  ConfigureAndLoadService_writeConfiguration_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_writeConfiguration_args() throw() {}

  std::string authenticationToken;
  ConfigureData config;

  _ConfigureAndLoadService_writeConfiguration_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_config(const ConfigureData& val) {
    config = val;
  }

  bool operator == (const ConfigureAndLoadService_writeConfiguration_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_writeConfiguration_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_writeConfiguration_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_writeConfiguration_pargs {
 public:


  virtual ~ConfigureAndLoadService_writeConfiguration_pargs() throw() {}

  const std::string* authenticationToken;
  const ConfigureData* config;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_writeConfiguration_result {
 public:

  ConfigureAndLoadService_writeConfiguration_result() {
  }

  virtual ~ConfigureAndLoadService_writeConfiguration_result() throw() {}


  bool operator == (const ConfigureAndLoadService_writeConfiguration_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_writeConfiguration_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_writeConfiguration_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_writeConfiguration_presult {
 public:


  virtual ~ConfigureAndLoadService_writeConfiguration_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_setNwConfig_args__isset {
  _ConfigureAndLoadService_setNwConfig_args__isset() : authenticationToken(false), nwItf(false) {}
  bool authenticationToken;
  bool nwItf;
} _ConfigureAndLoadService_setNwConfig_args__isset;

class ConfigureAndLoadService_setNwConfig_args {
 public:

  ConfigureAndLoadService_setNwConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_setNwConfig_args() throw() {}

  std::string authenticationToken;
  std::vector< ::dicp::NwItf>  nwItf;

  _ConfigureAndLoadService_setNwConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_nwItf(const std::vector< ::dicp::NwItf> & val) {
    nwItf = val;
  }

  bool operator == (const ConfigureAndLoadService_setNwConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(nwItf == rhs.nwItf))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setNwConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setNwConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setNwConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_setNwConfig_pargs() throw() {}

  const std::string* authenticationToken;
  const std::vector< ::dicp::NwItf> * nwItf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setNwConfig_result {
 public:

  ConfigureAndLoadService_setNwConfig_result() {
  }

  virtual ~ConfigureAndLoadService_setNwConfig_result() throw() {}


  bool operator == (const ConfigureAndLoadService_setNwConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setNwConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setNwConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setNwConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_setNwConfig_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getNwConfig_args__isset {
  _ConfigureAndLoadService_getNwConfig_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getNwConfig_args__isset;

class ConfigureAndLoadService_getNwConfig_args {
 public:

  ConfigureAndLoadService_getNwConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getNwConfig_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getNwConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getNwConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getNwConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getNwConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getNwConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_getNwConfig_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getNwConfig_result__isset {
  _ConfigureAndLoadService_getNwConfig_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getNwConfig_result__isset;

class ConfigureAndLoadService_getNwConfig_result {
 public:

  ConfigureAndLoadService_getNwConfig_result() {
  }

  virtual ~ConfigureAndLoadService_getNwConfig_result() throw() {}

  std::vector< ::dicp::NwItf>  success;

  _ConfigureAndLoadService_getNwConfig_result__isset __isset;

  void __set_success(const std::vector< ::dicp::NwItf> & val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getNwConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getNwConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getNwConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getNwConfig_presult__isset {
  _ConfigureAndLoadService_getNwConfig_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getNwConfig_presult__isset;

class ConfigureAndLoadService_getNwConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_getNwConfig_presult() throw() {}

  std::vector< ::dicp::NwItf> * success;

  _ConfigureAndLoadService_getNwConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_setBaDevConfig_args__isset {
  _ConfigureAndLoadService_setBaDevConfig_args__isset() : authenticationToken(false), dev(false), apdu(false) {}
  bool authenticationToken;
  bool dev;
  bool apdu;
} _ConfigureAndLoadService_setBaDevConfig_args__isset;

class ConfigureAndLoadService_setBaDevConfig_args {
 public:

  ConfigureAndLoadService_setBaDevConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_setBaDevConfig_args() throw() {}

  std::string authenticationToken;
   ::dicp::BaDev dev;
   ::dicp::BaPar apdu;

  _ConfigureAndLoadService_setBaDevConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_dev(const  ::dicp::BaDev& val) {
    dev = val;
  }

  void __set_apdu(const  ::dicp::BaPar& val) {
    apdu = val;
  }

  bool operator == (const ConfigureAndLoadService_setBaDevConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(dev == rhs.dev))
      return false;
    if (!(apdu == rhs.apdu))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setBaDevConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setBaDevConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setBaDevConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_setBaDevConfig_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::dicp::BaDev* dev;
  const  ::dicp::BaPar* apdu;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setBaDevConfig_result {
 public:

  ConfigureAndLoadService_setBaDevConfig_result() {
  }

  virtual ~ConfigureAndLoadService_setBaDevConfig_result() throw() {}


  bool operator == (const ConfigureAndLoadService_setBaDevConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setBaDevConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setBaDevConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setBaDevConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_setBaDevConfig_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getBaDevConfig_args__isset {
  _ConfigureAndLoadService_getBaDevConfig_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getBaDevConfig_args__isset;

class ConfigureAndLoadService_getBaDevConfig_args {
 public:

  ConfigureAndLoadService_getBaDevConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getBaDevConfig_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getBaDevConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaDevConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaDevConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaDevConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getBaDevConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_getBaDevConfig_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaDevConfig_result__isset {
  _ConfigureAndLoadService_getBaDevConfig_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaDevConfig_result__isset;

class ConfigureAndLoadService_getBaDevConfig_result {
 public:

  ConfigureAndLoadService_getBaDevConfig_result() {
  }

  virtual ~ConfigureAndLoadService_getBaDevConfig_result() throw() {}

   ::dicp::BaDev success;

  _ConfigureAndLoadService_getBaDevConfig_result__isset __isset;

  void __set_success(const  ::dicp::BaDev& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaDevConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaDevConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaDevConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaDevConfig_presult__isset {
  _ConfigureAndLoadService_getBaDevConfig_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaDevConfig_presult__isset;

class ConfigureAndLoadService_getBaDevConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_getBaDevConfig_presult() throw() {}

   ::dicp::BaDev* success;

  _ConfigureAndLoadService_getBaDevConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getBaParConfig_args__isset {
  _ConfigureAndLoadService_getBaParConfig_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getBaParConfig_args__isset;

class ConfigureAndLoadService_getBaParConfig_args {
 public:

  ConfigureAndLoadService_getBaParConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getBaParConfig_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getBaParConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaParConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaParConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaParConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getBaParConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_getBaParConfig_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaParConfig_result__isset {
  _ConfigureAndLoadService_getBaParConfig_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaParConfig_result__isset;

class ConfigureAndLoadService_getBaParConfig_result {
 public:

  ConfigureAndLoadService_getBaParConfig_result() {
  }

  virtual ~ConfigureAndLoadService_getBaParConfig_result() throw() {}

   ::dicp::BaPar success;

  _ConfigureAndLoadService_getBaParConfig_result__isset __isset;

  void __set_success(const  ::dicp::BaPar& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaParConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaParConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaParConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaParConfig_presult__isset {
  _ConfigureAndLoadService_getBaParConfig_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaParConfig_presult__isset;

class ConfigureAndLoadService_getBaParConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_getBaParConfig_presult() throw() {}

   ::dicp::BaPar* success;

  _ConfigureAndLoadService_getBaParConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_setBaNwConfig_args__isset {
  _ConfigureAndLoadService_setBaNwConfig_args__isset() : authenticationToken(false), network(false), ports(false) {}
  bool authenticationToken;
  bool network;
  bool ports;
} _ConfigureAndLoadService_setBaNwConfig_args__isset;

class ConfigureAndLoadService_setBaNwConfig_args {
 public:

  ConfigureAndLoadService_setBaNwConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_setBaNwConfig_args() throw() {}

  std::string authenticationToken;
   ::dicp::BaNw network;
  std::vector< ::dicp::BaPort>  ports;

  _ConfigureAndLoadService_setBaNwConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_network(const  ::dicp::BaNw& val) {
    network = val;
  }

  void __set_ports(const std::vector< ::dicp::BaPort> & val) {
    ports = val;
  }

  bool operator == (const ConfigureAndLoadService_setBaNwConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(network == rhs.network))
      return false;
    if (!(ports == rhs.ports))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setBaNwConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setBaNwConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setBaNwConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_setBaNwConfig_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::dicp::BaNw* network;
  const std::vector< ::dicp::BaPort> * ports;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setBaNwConfig_result {
 public:

  ConfigureAndLoadService_setBaNwConfig_result() {
  }

  virtual ~ConfigureAndLoadService_setBaNwConfig_result() throw() {}


  bool operator == (const ConfigureAndLoadService_setBaNwConfig_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setBaNwConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setBaNwConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setBaNwConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_setBaNwConfig_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getBaNwConfig_args__isset {
  _ConfigureAndLoadService_getBaNwConfig_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getBaNwConfig_args__isset;

class ConfigureAndLoadService_getBaNwConfig_args {
 public:

  ConfigureAndLoadService_getBaNwConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getBaNwConfig_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getBaNwConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaNwConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaNwConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaNwConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getBaNwConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_getBaNwConfig_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaNwConfig_result__isset {
  _ConfigureAndLoadService_getBaNwConfig_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaNwConfig_result__isset;

class ConfigureAndLoadService_getBaNwConfig_result {
 public:

  ConfigureAndLoadService_getBaNwConfig_result() {
  }

  virtual ~ConfigureAndLoadService_getBaNwConfig_result() throw() {}

   ::dicp::BaNw success;

  _ConfigureAndLoadService_getBaNwConfig_result__isset __isset;

  void __set_success(const  ::dicp::BaNw& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaNwConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaNwConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaNwConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaNwConfig_presult__isset {
  _ConfigureAndLoadService_getBaNwConfig_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaNwConfig_presult__isset;

class ConfigureAndLoadService_getBaNwConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_getBaNwConfig_presult() throw() {}

   ::dicp::BaNw* success;

  _ConfigureAndLoadService_getBaNwConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getBaPortConfig_args__isset {
  _ConfigureAndLoadService_getBaPortConfig_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getBaPortConfig_args__isset;

class ConfigureAndLoadService_getBaPortConfig_args {
 public:

  ConfigureAndLoadService_getBaPortConfig_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getBaPortConfig_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getBaPortConfig_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaPortConfig_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaPortConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaPortConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getBaPortConfig_pargs {
 public:


  virtual ~ConfigureAndLoadService_getBaPortConfig_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaPortConfig_result__isset {
  _ConfigureAndLoadService_getBaPortConfig_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaPortConfig_result__isset;

class ConfigureAndLoadService_getBaPortConfig_result {
 public:

  ConfigureAndLoadService_getBaPortConfig_result() {
  }

  virtual ~ConfigureAndLoadService_getBaPortConfig_result() throw() {}

  std::vector< ::dicp::BaPort>  success;

  _ConfigureAndLoadService_getBaPortConfig_result__isset __isset;

  void __set_success(const std::vector< ::dicp::BaPort> & val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getBaPortConfig_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBaPortConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBaPortConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBaPortConfig_presult__isset {
  _ConfigureAndLoadService_getBaPortConfig_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getBaPortConfig_presult__isset;

class ConfigureAndLoadService_getBaPortConfig_presult {
 public:


  virtual ~ConfigureAndLoadService_getBaPortConfig_presult() throw() {}

  std::vector< ::dicp::BaPort> * success;

  _ConfigureAndLoadService_getBaPortConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_setUTCTime_args__isset {
  _ConfigureAndLoadService_setUTCTime_args__isset() : authenticationToken(false), utctime(false) {}
  bool authenticationToken;
  bool utctime;
} _ConfigureAndLoadService_setUTCTime_args__isset;

class ConfigureAndLoadService_setUTCTime_args {
 public:

  ConfigureAndLoadService_setUTCTime_args() : authenticationToken(), utctime(0) {
  }

  virtual ~ConfigureAndLoadService_setUTCTime_args() throw() {}

  std::string authenticationToken;
  int64_t utctime;

  _ConfigureAndLoadService_setUTCTime_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_utctime(const int64_t val) {
    utctime = val;
  }

  bool operator == (const ConfigureAndLoadService_setUTCTime_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(utctime == rhs.utctime))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setUTCTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setUTCTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setUTCTime_pargs {
 public:


  virtual ~ConfigureAndLoadService_setUTCTime_pargs() throw() {}

  const std::string* authenticationToken;
  const int64_t* utctime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setUTCTime_result {
 public:

  ConfigureAndLoadService_setUTCTime_result() {
  }

  virtual ~ConfigureAndLoadService_setUTCTime_result() throw() {}


  bool operator == (const ConfigureAndLoadService_setUTCTime_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setUTCTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setUTCTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setUTCTime_presult {
 public:


  virtual ~ConfigureAndLoadService_setUTCTime_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getUTCTime_args__isset {
  _ConfigureAndLoadService_getUTCTime_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getUTCTime_args__isset;

class ConfigureAndLoadService_getUTCTime_args {
 public:

  ConfigureAndLoadService_getUTCTime_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getUTCTime_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getUTCTime_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getUTCTime_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getUTCTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getUTCTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getUTCTime_pargs {
 public:


  virtual ~ConfigureAndLoadService_getUTCTime_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getUTCTime_result__isset {
  _ConfigureAndLoadService_getUTCTime_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getUTCTime_result__isset;

class ConfigureAndLoadService_getUTCTime_result {
 public:

  ConfigureAndLoadService_getUTCTime_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_getUTCTime_result() throw() {}

  int64_t success;

  _ConfigureAndLoadService_getUTCTime_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getUTCTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getUTCTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getUTCTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getUTCTime_presult__isset {
  _ConfigureAndLoadService_getUTCTime_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getUTCTime_presult__isset;

class ConfigureAndLoadService_getUTCTime_presult {
 public:


  virtual ~ConfigureAndLoadService_getUTCTime_presult() throw() {}

  int64_t* success;

  _ConfigureAndLoadService_getUTCTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_processPackAndGo_args__isset {
  _ConfigureAndLoadService_processPackAndGo_args__isset() : authenticationToken(false), path(false) {}
  bool authenticationToken;
  bool path;
} _ConfigureAndLoadService_processPackAndGo_args__isset;

class ConfigureAndLoadService_processPackAndGo_args {
 public:

  ConfigureAndLoadService_processPackAndGo_args() : authenticationToken(), path() {
  }

  virtual ~ConfigureAndLoadService_processPackAndGo_args() throw() {}

  std::string authenticationToken;
  std::string path;

  _ConfigureAndLoadService_processPackAndGo_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const ConfigureAndLoadService_processPackAndGo_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_processPackAndGo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_processPackAndGo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_processPackAndGo_pargs {
 public:


  virtual ~ConfigureAndLoadService_processPackAndGo_pargs() throw() {}

  const std::string* authenticationToken;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_processPackAndGo_result__isset {
  _ConfigureAndLoadService_processPackAndGo_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_processPackAndGo_result__isset;

class ConfigureAndLoadService_processPackAndGo_result {
 public:

  ConfigureAndLoadService_processPackAndGo_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_processPackAndGo_result() throw() {}

  bool success;

  _ConfigureAndLoadService_processPackAndGo_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_processPackAndGo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_processPackAndGo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_processPackAndGo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_processPackAndGo_presult__isset {
  _ConfigureAndLoadService_processPackAndGo_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_processPackAndGo_presult__isset;

class ConfigureAndLoadService_processPackAndGo_presult {
 public:


  virtual ~ConfigureAndLoadService_processPackAndGo_presult() throw() {}

  bool* success;

  _ConfigureAndLoadService_processPackAndGo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getPackAndGoStatus_args__isset {
  _ConfigureAndLoadService_getPackAndGoStatus_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getPackAndGoStatus_args__isset;

class ConfigureAndLoadService_getPackAndGoStatus_args {
 public:

  ConfigureAndLoadService_getPackAndGoStatus_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getPackAndGoStatus_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getPackAndGoStatus_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getPackAndGoStatus_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getPackAndGoStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getPackAndGoStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getPackAndGoStatus_pargs {
 public:


  virtual ~ConfigureAndLoadService_getPackAndGoStatus_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getPackAndGoStatus_result__isset {
  _ConfigureAndLoadService_getPackAndGoStatus_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getPackAndGoStatus_result__isset;

class ConfigureAndLoadService_getPackAndGoStatus_result {
 public:

  ConfigureAndLoadService_getPackAndGoStatus_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_getPackAndGoStatus_result() throw() {}

  int32_t success;

  _ConfigureAndLoadService_getPackAndGoStatus_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getPackAndGoStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getPackAndGoStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getPackAndGoStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getPackAndGoStatus_presult__isset {
  _ConfigureAndLoadService_getPackAndGoStatus_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getPackAndGoStatus_presult__isset;

class ConfigureAndLoadService_getPackAndGoStatus_presult {
 public:


  virtual ~ConfigureAndLoadService_getPackAndGoStatus_presult() throw() {}

  int32_t* success;

  _ConfigureAndLoadService_getPackAndGoStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_createBackup_args__isset {
  _ConfigureAndLoadService_createBackup_args__isset() : authenticationToken(false), path(false) {}
  bool authenticationToken;
  bool path;
} _ConfigureAndLoadService_createBackup_args__isset;

class ConfigureAndLoadService_createBackup_args {
 public:

  ConfigureAndLoadService_createBackup_args() : authenticationToken(), path() {
  }

  virtual ~ConfigureAndLoadService_createBackup_args() throw() {}

  std::string authenticationToken;
  std::string path;

  _ConfigureAndLoadService_createBackup_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_path(const std::string& val) {
    path = val;
  }

  bool operator == (const ConfigureAndLoadService_createBackup_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_createBackup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_createBackup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_createBackup_pargs {
 public:


  virtual ~ConfigureAndLoadService_createBackup_pargs() throw() {}

  const std::string* authenticationToken;
  const std::string* path;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_createBackup_result__isset {
  _ConfigureAndLoadService_createBackup_result__isset() : success(false), userException(false) {}
  bool success;
  bool userException;
} _ConfigureAndLoadService_createBackup_result__isset;

class ConfigureAndLoadService_createBackup_result {
 public:

  ConfigureAndLoadService_createBackup_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_createBackup_result() throw() {}

  bool success;
   ::siemens::bt::error::UserException userException;

  _ConfigureAndLoadService_createBackup_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  bool operator == (const ConfigureAndLoadService_createBackup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(userException == rhs.userException))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_createBackup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_createBackup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_createBackup_presult__isset {
  _ConfigureAndLoadService_createBackup_presult__isset() : success(false), userException(false) {}
  bool success;
  bool userException;
} _ConfigureAndLoadService_createBackup_presult__isset;

class ConfigureAndLoadService_createBackup_presult {
 public:


  virtual ~ConfigureAndLoadService_createBackup_presult() throw() {}

  bool* success;
   ::siemens::bt::error::UserException userException;

  _ConfigureAndLoadService_createBackup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getBackupStatus_args__isset {
  _ConfigureAndLoadService_getBackupStatus_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getBackupStatus_args__isset;

class ConfigureAndLoadService_getBackupStatus_args {
 public:

  ConfigureAndLoadService_getBackupStatus_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getBackupStatus_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getBackupStatus_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getBackupStatus_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBackupStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBackupStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getBackupStatus_pargs {
 public:


  virtual ~ConfigureAndLoadService_getBackupStatus_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBackupStatus_result__isset {
  _ConfigureAndLoadService_getBackupStatus_result__isset() : success(false), userException(false) {}
  bool success;
  bool userException;
} _ConfigureAndLoadService_getBackupStatus_result__isset;

class ConfigureAndLoadService_getBackupStatus_result {
 public:

  ConfigureAndLoadService_getBackupStatus_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_getBackupStatus_result() throw() {}

  int32_t success;
   ::siemens::bt::error::UserException userException;

  _ConfigureAndLoadService_getBackupStatus_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_userException(const  ::siemens::bt::error::UserException& val) {
    userException = val;
  }

  bool operator == (const ConfigureAndLoadService_getBackupStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(userException == rhs.userException))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getBackupStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getBackupStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getBackupStatus_presult__isset {
  _ConfigureAndLoadService_getBackupStatus_presult__isset() : success(false), userException(false) {}
  bool success;
  bool userException;
} _ConfigureAndLoadService_getBackupStatus_presult__isset;

class ConfigureAndLoadService_getBackupStatus_presult {
 public:


  virtual ~ConfigureAndLoadService_getBackupStatus_presult() throw() {}

  int32_t* success;
   ::siemens::bt::error::UserException userException;

  _ConfigureAndLoadService_getBackupStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_activateConfigData_args__isset {
  _ConfigureAndLoadService_activateConfigData_args__isset() : authenticationToken(false), activate(false) {}
  bool authenticationToken;
  bool activate;
} _ConfigureAndLoadService_activateConfigData_args__isset;

class ConfigureAndLoadService_activateConfigData_args {
 public:

  ConfigureAndLoadService_activateConfigData_args() : authenticationToken(), activate(0) {
  }

  virtual ~ConfigureAndLoadService_activateConfigData_args() throw() {}

  std::string authenticationToken;
  bool activate;

  _ConfigureAndLoadService_activateConfigData_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_activate(const bool val) {
    activate = val;
  }

  bool operator == (const ConfigureAndLoadService_activateConfigData_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(activate == rhs.activate))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_activateConfigData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_activateConfigData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_activateConfigData_pargs {
 public:


  virtual ~ConfigureAndLoadService_activateConfigData_pargs() throw() {}

  const std::string* authenticationToken;
  const bool* activate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_activateConfigData_result {
 public:

  ConfigureAndLoadService_activateConfigData_result() {
  }

  virtual ~ConfigureAndLoadService_activateConfigData_result() throw() {}


  bool operator == (const ConfigureAndLoadService_activateConfigData_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_activateConfigData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_activateConfigData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_activateConfigData_presult {
 public:


  virtual ~ConfigureAndLoadService_activateConfigData_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_setDeviceConfigParameter_args__isset {
  _ConfigureAndLoadService_setDeviceConfigParameter_args__isset() : authenticationToken(false), devConfig(false) {}
  bool authenticationToken;
  bool devConfig;
} _ConfigureAndLoadService_setDeviceConfigParameter_args__isset;

class ConfigureAndLoadService_setDeviceConfigParameter_args {
 public:

  ConfigureAndLoadService_setDeviceConfigParameter_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_setDeviceConfigParameter_args() throw() {}

  std::string authenticationToken;
  DeviceConfigParameter devConfig;

  _ConfigureAndLoadService_setDeviceConfigParameter_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_devConfig(const DeviceConfigParameter& val) {
    devConfig = val;
  }

  bool operator == (const ConfigureAndLoadService_setDeviceConfigParameter_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(devConfig == rhs.devConfig))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setDeviceConfigParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setDeviceConfigParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setDeviceConfigParameter_pargs {
 public:


  virtual ~ConfigureAndLoadService_setDeviceConfigParameter_pargs() throw() {}

  const std::string* authenticationToken;
  const DeviceConfigParameter* devConfig;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setDeviceConfigParameter_result {
 public:

  ConfigureAndLoadService_setDeviceConfigParameter_result() {
  }

  virtual ~ConfigureAndLoadService_setDeviceConfigParameter_result() throw() {}


  bool operator == (const ConfigureAndLoadService_setDeviceConfigParameter_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setDeviceConfigParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setDeviceConfigParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setDeviceConfigParameter_presult {
 public:


  virtual ~ConfigureAndLoadService_setDeviceConfigParameter_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getDeviceConfigParameter_args__isset {
  _ConfigureAndLoadService_getDeviceConfigParameter_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getDeviceConfigParameter_args__isset;

class ConfigureAndLoadService_getDeviceConfigParameter_args {
 public:

  ConfigureAndLoadService_getDeviceConfigParameter_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getDeviceConfigParameter_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getDeviceConfigParameter_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getDeviceConfigParameter_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getDeviceConfigParameter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getDeviceConfigParameter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getDeviceConfigParameter_pargs {
 public:


  virtual ~ConfigureAndLoadService_getDeviceConfigParameter_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getDeviceConfigParameter_result__isset {
  _ConfigureAndLoadService_getDeviceConfigParameter_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getDeviceConfigParameter_result__isset;

class ConfigureAndLoadService_getDeviceConfigParameter_result {
 public:

  ConfigureAndLoadService_getDeviceConfigParameter_result() {
  }

  virtual ~ConfigureAndLoadService_getDeviceConfigParameter_result() throw() {}

  DeviceConfigParameter success;

  _ConfigureAndLoadService_getDeviceConfigParameter_result__isset __isset;

  void __set_success(const DeviceConfigParameter& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getDeviceConfigParameter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getDeviceConfigParameter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getDeviceConfigParameter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getDeviceConfigParameter_presult__isset {
  _ConfigureAndLoadService_getDeviceConfigParameter_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getDeviceConfigParameter_presult__isset;

class ConfigureAndLoadService_getDeviceConfigParameter_presult {
 public:


  virtual ~ConfigureAndLoadService_getDeviceConfigParameter_presult() throw() {}

  DeviceConfigParameter* success;

  _ConfigureAndLoadService_getDeviceConfigParameter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_setTimeZone_args__isset {
  _ConfigureAndLoadService_setTimeZone_args__isset() : authenticationToken(false), tz(false) {}
  bool authenticationToken;
  bool tz;
} _ConfigureAndLoadService_setTimeZone_args__isset;

class ConfigureAndLoadService_setTimeZone_args {
 public:

  ConfigureAndLoadService_setTimeZone_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_setTimeZone_args() throw() {}

  std::string authenticationToken;
   ::dicp::TimeSet tz;

  _ConfigureAndLoadService_setTimeZone_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_tz(const  ::dicp::TimeSet& val) {
    tz = val;
  }

  bool operator == (const ConfigureAndLoadService_setTimeZone_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(tz == rhs.tz))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setTimeZone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setTimeZone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setTimeZone_pargs {
 public:


  virtual ~ConfigureAndLoadService_setTimeZone_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::dicp::TimeSet* tz;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setTimeZone_result {
 public:

  ConfigureAndLoadService_setTimeZone_result() {
  }

  virtual ~ConfigureAndLoadService_setTimeZone_result() throw() {}


  bool operator == (const ConfigureAndLoadService_setTimeZone_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigureAndLoadService_setTimeZone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_setTimeZone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_setTimeZone_presult {
 public:


  virtual ~ConfigureAndLoadService_setTimeZone_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getTimeZone_args__isset {
  _ConfigureAndLoadService_getTimeZone_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getTimeZone_args__isset;

class ConfigureAndLoadService_getTimeZone_args {
 public:

  ConfigureAndLoadService_getTimeZone_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getTimeZone_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getTimeZone_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getTimeZone_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getTimeZone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getTimeZone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getTimeZone_pargs {
 public:


  virtual ~ConfigureAndLoadService_getTimeZone_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getTimeZone_result__isset {
  _ConfigureAndLoadService_getTimeZone_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getTimeZone_result__isset;

class ConfigureAndLoadService_getTimeZone_result {
 public:

  ConfigureAndLoadService_getTimeZone_result() {
  }

  virtual ~ConfigureAndLoadService_getTimeZone_result() throw() {}

   ::dicp::TimeSet success;

  _ConfigureAndLoadService_getTimeZone_result__isset __isset;

  void __set_success(const  ::dicp::TimeSet& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getTimeZone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getTimeZone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getTimeZone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getTimeZone_presult__isset {
  _ConfigureAndLoadService_getTimeZone_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getTimeZone_presult__isset;

class ConfigureAndLoadService_getTimeZone_presult {
 public:


  virtual ~ConfigureAndLoadService_getTimeZone_presult() throw() {}

   ::dicp::TimeSet* success;

  _ConfigureAndLoadService_getTimeZone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_addIPPort_args__isset {
  _ConfigureAndLoadService_addIPPort_args__isset() : authenticationToken(false), lanNwItf(false) {}
  bool authenticationToken;
  bool lanNwItf;
} _ConfigureAndLoadService_addIPPort_args__isset;

class ConfigureAndLoadService_addIPPort_args {
 public:

  ConfigureAndLoadService_addIPPort_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_addIPPort_args() throw() {}

  std::string authenticationToken;
   ::dicp::Lan lanNwItf;

  _ConfigureAndLoadService_addIPPort_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_lanNwItf(const  ::dicp::Lan& val) {
    lanNwItf = val;
  }

  bool operator == (const ConfigureAndLoadService_addIPPort_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(lanNwItf == rhs.lanNwItf))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addIPPort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addIPPort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_addIPPort_pargs {
 public:


  virtual ~ConfigureAndLoadService_addIPPort_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::dicp::Lan* lanNwItf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addIPPort_result__isset {
  _ConfigureAndLoadService_addIPPort_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addIPPort_result__isset;

class ConfigureAndLoadService_addIPPort_result {
 public:

  ConfigureAndLoadService_addIPPort_result() {
  }

  virtual ~ConfigureAndLoadService_addIPPort_result() throw() {}

   ::dicp::IPport success;

  _ConfigureAndLoadService_addIPPort_result__isset __isset;

  void __set_success(const  ::dicp::IPport& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_addIPPort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addIPPort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addIPPort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addIPPort_presult__isset {
  _ConfigureAndLoadService_addIPPort_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addIPPort_presult__isset;

class ConfigureAndLoadService_addIPPort_presult {
 public:


  virtual ~ConfigureAndLoadService_addIPPort_presult() throw() {}

   ::dicp::IPport* success;

  _ConfigureAndLoadService_addIPPort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_addLONPort_args__isset {
  _ConfigureAndLoadService_addLONPort_args__isset() : authenticationToken(false), eia709NwItf(false) {}
  bool authenticationToken;
  bool eia709NwItf;
} _ConfigureAndLoadService_addLONPort_args__isset;

class ConfigureAndLoadService_addLONPort_args {
 public:

  ConfigureAndLoadService_addLONPort_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_addLONPort_args() throw() {}

  std::string authenticationToken;
   ::dicp::Eia709 eia709NwItf;

  _ConfigureAndLoadService_addLONPort_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_eia709NwItf(const  ::dicp::Eia709& val) {
    eia709NwItf = val;
  }

  bool operator == (const ConfigureAndLoadService_addLONPort_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(eia709NwItf == rhs.eia709NwItf))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addLONPort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addLONPort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_addLONPort_pargs {
 public:


  virtual ~ConfigureAndLoadService_addLONPort_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::dicp::Eia709* eia709NwItf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addLONPort_result__isset {
  _ConfigureAndLoadService_addLONPort_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addLONPort_result__isset;

class ConfigureAndLoadService_addLONPort_result {
 public:

  ConfigureAndLoadService_addLONPort_result() {
  }

  virtual ~ConfigureAndLoadService_addLONPort_result() throw() {}

   ::dicp::LONport success;

  _ConfigureAndLoadService_addLONPort_result__isset __isset;

  void __set_success(const  ::dicp::LONport& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_addLONPort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addLONPort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addLONPort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addLONPort_presult__isset {
  _ConfigureAndLoadService_addLONPort_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addLONPort_presult__isset;

class ConfigureAndLoadService_addLONPort_presult {
 public:


  virtual ~ConfigureAndLoadService_addLONPort_presult() throw() {}

   ::dicp::LONport* success;

  _ConfigureAndLoadService_addLONPort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_addMSTPPort_args__isset {
  _ConfigureAndLoadService_addMSTPPort_args__isset() : authenticationToken(false), rs485NwItf(false) {}
  bool authenticationToken;
  bool rs485NwItf;
} _ConfigureAndLoadService_addMSTPPort_args__isset;

class ConfigureAndLoadService_addMSTPPort_args {
 public:

  ConfigureAndLoadService_addMSTPPort_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_addMSTPPort_args() throw() {}

  std::string authenticationToken;
   ::dicp::Rs485 rs485NwItf;

  _ConfigureAndLoadService_addMSTPPort_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  void __set_rs485NwItf(const  ::dicp::Rs485& val) {
    rs485NwItf = val;
  }

  bool operator == (const ConfigureAndLoadService_addMSTPPort_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    if (!(rs485NwItf == rhs.rs485NwItf))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addMSTPPort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addMSTPPort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_addMSTPPort_pargs {
 public:


  virtual ~ConfigureAndLoadService_addMSTPPort_pargs() throw() {}

  const std::string* authenticationToken;
  const  ::dicp::Rs485* rs485NwItf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addMSTPPort_result__isset {
  _ConfigureAndLoadService_addMSTPPort_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addMSTPPort_result__isset;

class ConfigureAndLoadService_addMSTPPort_result {
 public:

  ConfigureAndLoadService_addMSTPPort_result() {
  }

  virtual ~ConfigureAndLoadService_addMSTPPort_result() throw() {}

   ::dicp::MSTPport success;

  _ConfigureAndLoadService_addMSTPPort_result__isset __isset;

  void __set_success(const  ::dicp::MSTPport& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_addMSTPPort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addMSTPPort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addMSTPPort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addMSTPPort_presult__isset {
  _ConfigureAndLoadService_addMSTPPort_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addMSTPPort_presult__isset;

class ConfigureAndLoadService_addMSTPPort_presult {
 public:


  virtual ~ConfigureAndLoadService_addMSTPPort_presult() throw() {}

   ::dicp::MSTPport* success;

  _ConfigureAndLoadService_addMSTPPort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_addLanItf_args__isset {
  _ConfigureAndLoadService_addLanItf_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_addLanItf_args__isset;

class ConfigureAndLoadService_addLanItf_args {
 public:

  ConfigureAndLoadService_addLanItf_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_addLanItf_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_addLanItf_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_addLanItf_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addLanItf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addLanItf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_addLanItf_pargs {
 public:


  virtual ~ConfigureAndLoadService_addLanItf_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addLanItf_result__isset {
  _ConfigureAndLoadService_addLanItf_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addLanItf_result__isset;

class ConfigureAndLoadService_addLanItf_result {
 public:

  ConfigureAndLoadService_addLanItf_result() {
  }

  virtual ~ConfigureAndLoadService_addLanItf_result() throw() {}

   ::dicp::Lan success;

  _ConfigureAndLoadService_addLanItf_result__isset __isset;

  void __set_success(const  ::dicp::Lan& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_addLanItf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addLanItf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addLanItf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addLanItf_presult__isset {
  _ConfigureAndLoadService_addLanItf_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addLanItf_presult__isset;

class ConfigureAndLoadService_addLanItf_presult {
 public:


  virtual ~ConfigureAndLoadService_addLanItf_presult() throw() {}

   ::dicp::Lan* success;

  _ConfigureAndLoadService_addLanItf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_addEia709Itf_args__isset {
  _ConfigureAndLoadService_addEia709Itf_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_addEia709Itf_args__isset;

class ConfigureAndLoadService_addEia709Itf_args {
 public:

  ConfigureAndLoadService_addEia709Itf_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_addEia709Itf_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_addEia709Itf_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_addEia709Itf_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addEia709Itf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addEia709Itf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_addEia709Itf_pargs {
 public:


  virtual ~ConfigureAndLoadService_addEia709Itf_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addEia709Itf_result__isset {
  _ConfigureAndLoadService_addEia709Itf_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addEia709Itf_result__isset;

class ConfigureAndLoadService_addEia709Itf_result {
 public:

  ConfigureAndLoadService_addEia709Itf_result() {
  }

  virtual ~ConfigureAndLoadService_addEia709Itf_result() throw() {}

   ::dicp::Eia709 success;

  _ConfigureAndLoadService_addEia709Itf_result__isset __isset;

  void __set_success(const  ::dicp::Eia709& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_addEia709Itf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addEia709Itf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addEia709Itf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addEia709Itf_presult__isset {
  _ConfigureAndLoadService_addEia709Itf_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addEia709Itf_presult__isset;

class ConfigureAndLoadService_addEia709Itf_presult {
 public:


  virtual ~ConfigureAndLoadService_addEia709Itf_presult() throw() {}

   ::dicp::Eia709* success;

  _ConfigureAndLoadService_addEia709Itf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_addRs485Itf_args__isset {
  _ConfigureAndLoadService_addRs485Itf_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_addRs485Itf_args__isset;

class ConfigureAndLoadService_addRs485Itf_args {
 public:

  ConfigureAndLoadService_addRs485Itf_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_addRs485Itf_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_addRs485Itf_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_addRs485Itf_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addRs485Itf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addRs485Itf_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_addRs485Itf_pargs {
 public:


  virtual ~ConfigureAndLoadService_addRs485Itf_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addRs485Itf_result__isset {
  _ConfigureAndLoadService_addRs485Itf_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addRs485Itf_result__isset;

class ConfigureAndLoadService_addRs485Itf_result {
 public:

  ConfigureAndLoadService_addRs485Itf_result() {
  }

  virtual ~ConfigureAndLoadService_addRs485Itf_result() throw() {}

   ::dicp::Rs485 success;

  _ConfigureAndLoadService_addRs485Itf_result__isset __isset;

  void __set_success(const  ::dicp::Rs485& val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_addRs485Itf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_addRs485Itf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_addRs485Itf_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_addRs485Itf_presult__isset {
  _ConfigureAndLoadService_addRs485Itf_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_addRs485Itf_presult__isset;

class ConfigureAndLoadService_addRs485Itf_presult {
 public:


  virtual ~ConfigureAndLoadService_addRs485Itf_presult() throw() {}

   ::dicp::Rs485* success;

  _ConfigureAndLoadService_addRs485Itf_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_IsMSTPSupported_args__isset {
  _ConfigureAndLoadService_IsMSTPSupported_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_IsMSTPSupported_args__isset;

class ConfigureAndLoadService_IsMSTPSupported_args {
 public:

  ConfigureAndLoadService_IsMSTPSupported_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_IsMSTPSupported_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_IsMSTPSupported_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_IsMSTPSupported_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_IsMSTPSupported_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_IsMSTPSupported_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_IsMSTPSupported_pargs {
 public:


  virtual ~ConfigureAndLoadService_IsMSTPSupported_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_IsMSTPSupported_result__isset {
  _ConfigureAndLoadService_IsMSTPSupported_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_IsMSTPSupported_result__isset;

class ConfigureAndLoadService_IsMSTPSupported_result {
 public:

  ConfigureAndLoadService_IsMSTPSupported_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_IsMSTPSupported_result() throw() {}

  int32_t success;

  _ConfigureAndLoadService_IsMSTPSupported_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_IsMSTPSupported_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_IsMSTPSupported_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_IsMSTPSupported_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_IsMSTPSupported_presult__isset {
  _ConfigureAndLoadService_IsMSTPSupported_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_IsMSTPSupported_presult__isset;

class ConfigureAndLoadService_IsMSTPSupported_presult {
 public:


  virtual ~ConfigureAndLoadService_IsMSTPSupported_presult() throw() {}

  int32_t* success;

  _ConfigureAndLoadService_IsMSTPSupported_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_IsLONSupported_args__isset {
  _ConfigureAndLoadService_IsLONSupported_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_IsLONSupported_args__isset;

class ConfigureAndLoadService_IsLONSupported_args {
 public:

  ConfigureAndLoadService_IsLONSupported_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_IsLONSupported_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_IsLONSupported_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_IsLONSupported_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_IsLONSupported_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_IsLONSupported_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_IsLONSupported_pargs {
 public:


  virtual ~ConfigureAndLoadService_IsLONSupported_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_IsLONSupported_result__isset {
  _ConfigureAndLoadService_IsLONSupported_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_IsLONSupported_result__isset;

class ConfigureAndLoadService_IsLONSupported_result {
 public:

  ConfigureAndLoadService_IsLONSupported_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_IsLONSupported_result() throw() {}

  int32_t success;

  _ConfigureAndLoadService_IsLONSupported_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_IsLONSupported_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_IsLONSupported_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_IsLONSupported_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_IsLONSupported_presult__isset {
  _ConfigureAndLoadService_IsLONSupported_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_IsLONSupported_presult__isset;

class ConfigureAndLoadService_IsLONSupported_presult {
 public:


  virtual ~ConfigureAndLoadService_IsLONSupported_presult() throw() {}

  int32_t* success;

  _ConfigureAndLoadService_IsLONSupported_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_getStateSSH_args__isset {
  _ConfigureAndLoadService_getStateSSH_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_getStateSSH_args__isset;

class ConfigureAndLoadService_getStateSSH_args {
 public:

  ConfigureAndLoadService_getStateSSH_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_getStateSSH_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_getStateSSH_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_getStateSSH_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getStateSSH_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getStateSSH_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_getStateSSH_pargs {
 public:


  virtual ~ConfigureAndLoadService_getStateSSH_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getStateSSH_result__isset {
  _ConfigureAndLoadService_getStateSSH_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getStateSSH_result__isset;

class ConfigureAndLoadService_getStateSSH_result {
 public:

  ConfigureAndLoadService_getStateSSH_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_getStateSSH_result() throw() {}

  bool success;

  _ConfigureAndLoadService_getStateSSH_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_getStateSSH_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_getStateSSH_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_getStateSSH_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_getStateSSH_presult__isset {
  _ConfigureAndLoadService_getStateSSH_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_getStateSSH_presult__isset;

class ConfigureAndLoadService_getStateSSH_presult {
 public:


  virtual ~ConfigureAndLoadService_getStateSSH_presult() throw() {}

  bool* success;

  _ConfigureAndLoadService_getStateSSH_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_startSSH_args__isset {
  _ConfigureAndLoadService_startSSH_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_startSSH_args__isset;

class ConfigureAndLoadService_startSSH_args {
 public:

  ConfigureAndLoadService_startSSH_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_startSSH_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_startSSH_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_startSSH_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_startSSH_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_startSSH_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_startSSH_pargs {
 public:


  virtual ~ConfigureAndLoadService_startSSH_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_startSSH_result__isset {
  _ConfigureAndLoadService_startSSH_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_startSSH_result__isset;

class ConfigureAndLoadService_startSSH_result {
 public:

  ConfigureAndLoadService_startSSH_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_startSSH_result() throw() {}

  bool success;

  _ConfigureAndLoadService_startSSH_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_startSSH_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_startSSH_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_startSSH_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_startSSH_presult__isset {
  _ConfigureAndLoadService_startSSH_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_startSSH_presult__isset;

class ConfigureAndLoadService_startSSH_presult {
 public:


  virtual ~ConfigureAndLoadService_startSSH_presult() throw() {}

  bool* success;

  _ConfigureAndLoadService_startSSH_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigureAndLoadService_stopSSH_args__isset {
  _ConfigureAndLoadService_stopSSH_args__isset() : authenticationToken(false) {}
  bool authenticationToken;
} _ConfigureAndLoadService_stopSSH_args__isset;

class ConfigureAndLoadService_stopSSH_args {
 public:

  ConfigureAndLoadService_stopSSH_args() : authenticationToken() {
  }

  virtual ~ConfigureAndLoadService_stopSSH_args() throw() {}

  std::string authenticationToken;

  _ConfigureAndLoadService_stopSSH_args__isset __isset;

  void __set_authenticationToken(const std::string& val) {
    authenticationToken = val;
  }

  bool operator == (const ConfigureAndLoadService_stopSSH_args & rhs) const
  {
    if (!(authenticationToken == rhs.authenticationToken))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_stopSSH_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_stopSSH_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigureAndLoadService_stopSSH_pargs {
 public:


  virtual ~ConfigureAndLoadService_stopSSH_pargs() throw() {}

  const std::string* authenticationToken;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_stopSSH_result__isset {
  _ConfigureAndLoadService_stopSSH_result__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_stopSSH_result__isset;

class ConfigureAndLoadService_stopSSH_result {
 public:

  ConfigureAndLoadService_stopSSH_result() : success(0) {
  }

  virtual ~ConfigureAndLoadService_stopSSH_result() throw() {}

  bool success;

  _ConfigureAndLoadService_stopSSH_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ConfigureAndLoadService_stopSSH_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigureAndLoadService_stopSSH_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigureAndLoadService_stopSSH_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigureAndLoadService_stopSSH_presult__isset {
  _ConfigureAndLoadService_stopSSH_presult__isset() : success(false) {}
  bool success;
} _ConfigureAndLoadService_stopSSH_presult__isset;

class ConfigureAndLoadService_stopSSH_presult {
 public:


  virtual ~ConfigureAndLoadService_stopSSH_presult() throw() {}

  bool* success;

  _ConfigureAndLoadService_stopSSH_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ConfigureAndLoadServiceClient : virtual public ConfigureAndLoadServiceIf {
 public:
  ConfigureAndLoadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ConfigureAndLoadServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getInterfaceVersion(std::string& _return);
  void send_getInterfaceVersion();
  void recv_getInterfaceVersion(std::string& _return);
  void readConfiguration(ConfigureData& _return, const std::string& authenticationToken);
  void send_readConfiguration(const std::string& authenticationToken);
  void recv_readConfiguration(ConfigureData& _return);
  void writeConfiguration(const std::string& authenticationToken, const ConfigureData& config);
  void send_writeConfiguration(const std::string& authenticationToken, const ConfigureData& config);
  void recv_writeConfiguration();
  void setNwConfig(const std::string& authenticationToken, const std::vector< ::dicp::NwItf> & nwItf);
  void send_setNwConfig(const std::string& authenticationToken, const std::vector< ::dicp::NwItf> & nwItf);
  void recv_setNwConfig();
  void getNwConfig(std::vector< ::dicp::NwItf> & _return, const std::string& authenticationToken);
  void send_getNwConfig(const std::string& authenticationToken);
  void recv_getNwConfig(std::vector< ::dicp::NwItf> & _return);
  void setBaDevConfig(const std::string& authenticationToken, const  ::dicp::BaDev& dev, const  ::dicp::BaPar& apdu);
  void send_setBaDevConfig(const std::string& authenticationToken, const  ::dicp::BaDev& dev, const  ::dicp::BaPar& apdu);
  void recv_setBaDevConfig();
  void getBaDevConfig( ::dicp::BaDev& _return, const std::string& authenticationToken);
  void send_getBaDevConfig(const std::string& authenticationToken);
  void recv_getBaDevConfig( ::dicp::BaDev& _return);
  void getBaParConfig( ::dicp::BaPar& _return, const std::string& authenticationToken);
  void send_getBaParConfig(const std::string& authenticationToken);
  void recv_getBaParConfig( ::dicp::BaPar& _return);
  void setBaNwConfig(const std::string& authenticationToken, const  ::dicp::BaNw& network, const std::vector< ::dicp::BaPort> & ports);
  void send_setBaNwConfig(const std::string& authenticationToken, const  ::dicp::BaNw& network, const std::vector< ::dicp::BaPort> & ports);
  void recv_setBaNwConfig();
  void getBaNwConfig( ::dicp::BaNw& _return, const std::string& authenticationToken);
  void send_getBaNwConfig(const std::string& authenticationToken);
  void recv_getBaNwConfig( ::dicp::BaNw& _return);
  void getBaPortConfig(std::vector< ::dicp::BaPort> & _return, const std::string& authenticationToken);
  void send_getBaPortConfig(const std::string& authenticationToken);
  void recv_getBaPortConfig(std::vector< ::dicp::BaPort> & _return);
  void setUTCTime(const std::string& authenticationToken, const int64_t utctime);
  void send_setUTCTime(const std::string& authenticationToken, const int64_t utctime);
  void recv_setUTCTime();
  int64_t getUTCTime(const std::string& authenticationToken);
  void send_getUTCTime(const std::string& authenticationToken);
  int64_t recv_getUTCTime();
  bool processPackAndGo(const std::string& authenticationToken, const std::string& path);
  void send_processPackAndGo(const std::string& authenticationToken, const std::string& path);
  bool recv_processPackAndGo();
  int32_t getPackAndGoStatus(const std::string& authenticationToken);
  void send_getPackAndGoStatus(const std::string& authenticationToken);
  int32_t recv_getPackAndGoStatus();
  bool createBackup(const std::string& authenticationToken, const std::string& path);
  void send_createBackup(const std::string& authenticationToken, const std::string& path);
  bool recv_createBackup();
  int32_t getBackupStatus(const std::string& authenticationToken);
  void send_getBackupStatus(const std::string& authenticationToken);
  int32_t recv_getBackupStatus();
  void activateConfigData(const std::string& authenticationToken, const bool activate);
  void send_activateConfigData(const std::string& authenticationToken, const bool activate);
  void recv_activateConfigData();
  void setDeviceConfigParameter(const std::string& authenticationToken, const DeviceConfigParameter& devConfig);
  void send_setDeviceConfigParameter(const std::string& authenticationToken, const DeviceConfigParameter& devConfig);
  void recv_setDeviceConfigParameter();
  void getDeviceConfigParameter(DeviceConfigParameter& _return, const std::string& authenticationToken);
  void send_getDeviceConfigParameter(const std::string& authenticationToken);
  void recv_getDeviceConfigParameter(DeviceConfigParameter& _return);
  void setTimeZone(const std::string& authenticationToken, const  ::dicp::TimeSet& tz);
  void send_setTimeZone(const std::string& authenticationToken, const  ::dicp::TimeSet& tz);
  void recv_setTimeZone();
  void getTimeZone( ::dicp::TimeSet& _return, const std::string& authenticationToken);
  void send_getTimeZone(const std::string& authenticationToken);
  void recv_getTimeZone( ::dicp::TimeSet& _return);
  void addIPPort( ::dicp::IPport& _return, const std::string& authenticationToken, const  ::dicp::Lan& lanNwItf);
  void send_addIPPort(const std::string& authenticationToken, const  ::dicp::Lan& lanNwItf);
  void recv_addIPPort( ::dicp::IPport& _return);
  void addLONPort( ::dicp::LONport& _return, const std::string& authenticationToken, const  ::dicp::Eia709& eia709NwItf);
  void send_addLONPort(const std::string& authenticationToken, const  ::dicp::Eia709& eia709NwItf);
  void recv_addLONPort( ::dicp::LONport& _return);
  void addMSTPPort( ::dicp::MSTPport& _return, const std::string& authenticationToken, const  ::dicp::Rs485& rs485NwItf);
  void send_addMSTPPort(const std::string& authenticationToken, const  ::dicp::Rs485& rs485NwItf);
  void recv_addMSTPPort( ::dicp::MSTPport& _return);
  void addLanItf( ::dicp::Lan& _return, const std::string& authenticationToken);
  void send_addLanItf(const std::string& authenticationToken);
  void recv_addLanItf( ::dicp::Lan& _return);
  void addEia709Itf( ::dicp::Eia709& _return, const std::string& authenticationToken);
  void send_addEia709Itf(const std::string& authenticationToken);
  void recv_addEia709Itf( ::dicp::Eia709& _return);
  void addRs485Itf( ::dicp::Rs485& _return, const std::string& authenticationToken);
  void send_addRs485Itf(const std::string& authenticationToken);
  void recv_addRs485Itf( ::dicp::Rs485& _return);
  int32_t IsMSTPSupported(const std::string& authenticationToken);
  void send_IsMSTPSupported(const std::string& authenticationToken);
  int32_t recv_IsMSTPSupported();
  int32_t IsLONSupported(const std::string& authenticationToken);
  void send_IsLONSupported(const std::string& authenticationToken);
  int32_t recv_IsLONSupported();
  bool getStateSSH(const std::string& authenticationToken);
  void send_getStateSSH(const std::string& authenticationToken);
  bool recv_getStateSSH();
  bool startSSH(const std::string& authenticationToken);
  void send_startSSH(const std::string& authenticationToken);
  bool recv_startSSH();
  bool stopSSH(const std::string& authenticationToken);
  void send_stopSSH(const std::string& authenticationToken);
  bool recv_stopSSH();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ConfigureAndLoadServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ConfigureAndLoadServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ConfigureAndLoadServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getInterfaceVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeConfiguration(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNwConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNwConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setBaDevConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBaDevConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBaParConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setBaNwConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBaNwConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBaPortConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setUTCTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUTCTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_processPackAndGo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPackAndGoStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createBackup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBackupStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_activateConfigData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setDeviceConfigParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDeviceConfigParameter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTimeZone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTimeZone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addIPPort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLONPort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addMSTPPort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addLanItf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addEia709Itf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRs485Itf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsMSTPSupported(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_IsLONSupported(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStateSSH(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startSSH(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopSSH(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ConfigureAndLoadServiceProcessor(boost::shared_ptr<ConfigureAndLoadServiceIf> iface) :
    iface_(iface) {
    processMap_["getInterfaceVersion"] = &ConfigureAndLoadServiceProcessor::process_getInterfaceVersion;
    processMap_["readConfiguration"] = &ConfigureAndLoadServiceProcessor::process_readConfiguration;
    processMap_["writeConfiguration"] = &ConfigureAndLoadServiceProcessor::process_writeConfiguration;
    processMap_["setNwConfig"] = &ConfigureAndLoadServiceProcessor::process_setNwConfig;
    processMap_["getNwConfig"] = &ConfigureAndLoadServiceProcessor::process_getNwConfig;
    processMap_["setBaDevConfig"] = &ConfigureAndLoadServiceProcessor::process_setBaDevConfig;
    processMap_["getBaDevConfig"] = &ConfigureAndLoadServiceProcessor::process_getBaDevConfig;
    processMap_["getBaParConfig"] = &ConfigureAndLoadServiceProcessor::process_getBaParConfig;
    processMap_["setBaNwConfig"] = &ConfigureAndLoadServiceProcessor::process_setBaNwConfig;
    processMap_["getBaNwConfig"] = &ConfigureAndLoadServiceProcessor::process_getBaNwConfig;
    processMap_["getBaPortConfig"] = &ConfigureAndLoadServiceProcessor::process_getBaPortConfig;
    processMap_["setUTCTime"] = &ConfigureAndLoadServiceProcessor::process_setUTCTime;
    processMap_["getUTCTime"] = &ConfigureAndLoadServiceProcessor::process_getUTCTime;
    processMap_["processPackAndGo"] = &ConfigureAndLoadServiceProcessor::process_processPackAndGo;
    processMap_["getPackAndGoStatus"] = &ConfigureAndLoadServiceProcessor::process_getPackAndGoStatus;
    processMap_["createBackup"] = &ConfigureAndLoadServiceProcessor::process_createBackup;
    processMap_["getBackupStatus"] = &ConfigureAndLoadServiceProcessor::process_getBackupStatus;
    processMap_["activateConfigData"] = &ConfigureAndLoadServiceProcessor::process_activateConfigData;
    processMap_["setDeviceConfigParameter"] = &ConfigureAndLoadServiceProcessor::process_setDeviceConfigParameter;
    processMap_["getDeviceConfigParameter"] = &ConfigureAndLoadServiceProcessor::process_getDeviceConfigParameter;
    processMap_["setTimeZone"] = &ConfigureAndLoadServiceProcessor::process_setTimeZone;
    processMap_["getTimeZone"] = &ConfigureAndLoadServiceProcessor::process_getTimeZone;
    processMap_["addIPPort"] = &ConfigureAndLoadServiceProcessor::process_addIPPort;
    processMap_["addLONPort"] = &ConfigureAndLoadServiceProcessor::process_addLONPort;
    processMap_["addMSTPPort"] = &ConfigureAndLoadServiceProcessor::process_addMSTPPort;
    processMap_["addLanItf"] = &ConfigureAndLoadServiceProcessor::process_addLanItf;
    processMap_["addEia709Itf"] = &ConfigureAndLoadServiceProcessor::process_addEia709Itf;
    processMap_["addRs485Itf"] = &ConfigureAndLoadServiceProcessor::process_addRs485Itf;
    processMap_["IsMSTPSupported"] = &ConfigureAndLoadServiceProcessor::process_IsMSTPSupported;
    processMap_["IsLONSupported"] = &ConfigureAndLoadServiceProcessor::process_IsLONSupported;
    processMap_["getStateSSH"] = &ConfigureAndLoadServiceProcessor::process_getStateSSH;
    processMap_["startSSH"] = &ConfigureAndLoadServiceProcessor::process_startSSH;
    processMap_["stopSSH"] = &ConfigureAndLoadServiceProcessor::process_stopSSH;
  }

  virtual ~ConfigureAndLoadServiceProcessor() {}
};

class ConfigureAndLoadServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ConfigureAndLoadServiceProcessorFactory(const ::boost::shared_ptr< ConfigureAndLoadServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ConfigureAndLoadServiceIfFactory > handlerFactory_;
};

class ConfigureAndLoadServiceMultiface : virtual public ConfigureAndLoadServiceIf {
 public:
  ConfigureAndLoadServiceMultiface(std::vector<boost::shared_ptr<ConfigureAndLoadServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ConfigureAndLoadServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ConfigureAndLoadServiceIf> > ifaces_;
  ConfigureAndLoadServiceMultiface() {}
  void add(boost::shared_ptr<ConfigureAndLoadServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getInterfaceVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInterfaceVersion(_return);
    }
    ifaces_[i]->getInterfaceVersion(_return);
    return;
  }

  void readConfiguration(ConfigureData& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readConfiguration(_return, authenticationToken);
    }
    ifaces_[i]->readConfiguration(_return, authenticationToken);
    return;
  }

  void writeConfiguration(const std::string& authenticationToken, const ConfigureData& config) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeConfiguration(authenticationToken, config);
    }
    ifaces_[i]->writeConfiguration(authenticationToken, config);
  }

  void setNwConfig(const std::string& authenticationToken, const std::vector< ::dicp::NwItf> & nwItf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNwConfig(authenticationToken, nwItf);
    }
    ifaces_[i]->setNwConfig(authenticationToken, nwItf);
  }

  void getNwConfig(std::vector< ::dicp::NwItf> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNwConfig(_return, authenticationToken);
    }
    ifaces_[i]->getNwConfig(_return, authenticationToken);
    return;
  }

  void setBaDevConfig(const std::string& authenticationToken, const  ::dicp::BaDev& dev, const  ::dicp::BaPar& apdu) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBaDevConfig(authenticationToken, dev, apdu);
    }
    ifaces_[i]->setBaDevConfig(authenticationToken, dev, apdu);
  }

  void getBaDevConfig( ::dicp::BaDev& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBaDevConfig(_return, authenticationToken);
    }
    ifaces_[i]->getBaDevConfig(_return, authenticationToken);
    return;
  }

  void getBaParConfig( ::dicp::BaPar& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBaParConfig(_return, authenticationToken);
    }
    ifaces_[i]->getBaParConfig(_return, authenticationToken);
    return;
  }

  void setBaNwConfig(const std::string& authenticationToken, const  ::dicp::BaNw& network, const std::vector< ::dicp::BaPort> & ports) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBaNwConfig(authenticationToken, network, ports);
    }
    ifaces_[i]->setBaNwConfig(authenticationToken, network, ports);
  }

  void getBaNwConfig( ::dicp::BaNw& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBaNwConfig(_return, authenticationToken);
    }
    ifaces_[i]->getBaNwConfig(_return, authenticationToken);
    return;
  }

  void getBaPortConfig(std::vector< ::dicp::BaPort> & _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBaPortConfig(_return, authenticationToken);
    }
    ifaces_[i]->getBaPortConfig(_return, authenticationToken);
    return;
  }

  void setUTCTime(const std::string& authenticationToken, const int64_t utctime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUTCTime(authenticationToken, utctime);
    }
    ifaces_[i]->setUTCTime(authenticationToken, utctime);
  }

  int64_t getUTCTime(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUTCTime(authenticationToken);
    }
    return ifaces_[i]->getUTCTime(authenticationToken);
  }

  bool processPackAndGo(const std::string& authenticationToken, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->processPackAndGo(authenticationToken, path);
    }
    return ifaces_[i]->processPackAndGo(authenticationToken, path);
  }

  int32_t getPackAndGoStatus(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPackAndGoStatus(authenticationToken);
    }
    return ifaces_[i]->getPackAndGoStatus(authenticationToken);
  }

  bool createBackup(const std::string& authenticationToken, const std::string& path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createBackup(authenticationToken, path);
    }
    return ifaces_[i]->createBackup(authenticationToken, path);
  }

  int32_t getBackupStatus(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBackupStatus(authenticationToken);
    }
    return ifaces_[i]->getBackupStatus(authenticationToken);
  }

  void activateConfigData(const std::string& authenticationToken, const bool activate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->activateConfigData(authenticationToken, activate);
    }
    ifaces_[i]->activateConfigData(authenticationToken, activate);
  }

  void setDeviceConfigParameter(const std::string& authenticationToken, const DeviceConfigParameter& devConfig) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setDeviceConfigParameter(authenticationToken, devConfig);
    }
    ifaces_[i]->setDeviceConfigParameter(authenticationToken, devConfig);
  }

  void getDeviceConfigParameter(DeviceConfigParameter& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDeviceConfigParameter(_return, authenticationToken);
    }
    ifaces_[i]->getDeviceConfigParameter(_return, authenticationToken);
    return;
  }

  void setTimeZone(const std::string& authenticationToken, const  ::dicp::TimeSet& tz) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTimeZone(authenticationToken, tz);
    }
    ifaces_[i]->setTimeZone(authenticationToken, tz);
  }

  void getTimeZone( ::dicp::TimeSet& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTimeZone(_return, authenticationToken);
    }
    ifaces_[i]->getTimeZone(_return, authenticationToken);
    return;
  }

  void addIPPort( ::dicp::IPport& _return, const std::string& authenticationToken, const  ::dicp::Lan& lanNwItf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addIPPort(_return, authenticationToken, lanNwItf);
    }
    ifaces_[i]->addIPPort(_return, authenticationToken, lanNwItf);
    return;
  }

  void addLONPort( ::dicp::LONport& _return, const std::string& authenticationToken, const  ::dicp::Eia709& eia709NwItf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLONPort(_return, authenticationToken, eia709NwItf);
    }
    ifaces_[i]->addLONPort(_return, authenticationToken, eia709NwItf);
    return;
  }

  void addMSTPPort( ::dicp::MSTPport& _return, const std::string& authenticationToken, const  ::dicp::Rs485& rs485NwItf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addMSTPPort(_return, authenticationToken, rs485NwItf);
    }
    ifaces_[i]->addMSTPPort(_return, authenticationToken, rs485NwItf);
    return;
  }

  void addLanItf( ::dicp::Lan& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addLanItf(_return, authenticationToken);
    }
    ifaces_[i]->addLanItf(_return, authenticationToken);
    return;
  }

  void addEia709Itf( ::dicp::Eia709& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addEia709Itf(_return, authenticationToken);
    }
    ifaces_[i]->addEia709Itf(_return, authenticationToken);
    return;
  }

  void addRs485Itf( ::dicp::Rs485& _return, const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRs485Itf(_return, authenticationToken);
    }
    ifaces_[i]->addRs485Itf(_return, authenticationToken);
    return;
  }

  int32_t IsMSTPSupported(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsMSTPSupported(authenticationToken);
    }
    return ifaces_[i]->IsMSTPSupported(authenticationToken);
  }

  int32_t IsLONSupported(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->IsLONSupported(authenticationToken);
    }
    return ifaces_[i]->IsLONSupported(authenticationToken);
  }

  bool getStateSSH(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStateSSH(authenticationToken);
    }
    return ifaces_[i]->getStateSSH(authenticationToken);
  }

  bool startSSH(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startSSH(authenticationToken);
    }
    return ifaces_[i]->startSSH(authenticationToken);
  }

  bool stopSSH(const std::string& authenticationToken) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopSSH(authenticationToken);
    }
    return ifaces_[i]->stopSSH(authenticationToken);
  }

};

}}} // namespace

#endif
