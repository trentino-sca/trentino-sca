// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DICPService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::dicp;

class DICPServiceHandler : virtual public DICPServiceIf {
 public:
  DICPServiceHandler() {
    // Your initialization goes here
  }

  void discover(const DiscoverServiceData& data) {
    // Your implementation goes here
    printf("discover\n");
  }

  void wink(const WinkServiceData& data) {
    // Your implementation goes here
    printf("wink\n");
  }

  void configure(const ConfigureServiceData& data) {
    // Your implementation goes here
    printf("configure\n");
  }

  void unconfigure(const UnconfigureServiceData& data) {
    // Your implementation goes here
    printf("unconfigure\n");
  }

  void settime(const SetTimeServiceData& data) {
    // Your implementation goes here
    printf("settime\n");
  }

  void setpassword(const SetPasswordServiceData& data) {
    // Your implementation goes here
    printf("setpassword\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DICPServiceHandler> handler(new DICPServiceHandler());
  shared_ptr<TProcessor> processor(new DICPServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

