// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ConfigureAndLoadService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::siemens::bt::configureandload;

class ConfigureAndLoadServiceHandler : virtual public ConfigureAndLoadServiceIf {
 public:
  ConfigureAndLoadServiceHandler() {
    // Your initialization goes here
  }

  void getInterfaceVersion(std::string& _return) {
    // Your implementation goes here
    printf("getInterfaceVersion\n");
  }

  void readConfiguration(ConfigureData& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("readConfiguration\n");
  }

  void writeConfiguration(const std::string& authenticationToken, const ConfigureData& config) {
    // Your implementation goes here
    printf("writeConfiguration\n");
  }

  void setNwConfig(const std::string& authenticationToken, const std::vector< ::dicp::NwItf> & nwItf) {
    // Your implementation goes here
    printf("setNwConfig\n");
  }

  void getNwConfig(std::vector< ::dicp::NwItf> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getNwConfig\n");
  }

  void setBaDevConfig(const std::string& authenticationToken, const  ::dicp::BaDev& dev, const  ::dicp::BaPar& apdu) {
    // Your implementation goes here
    printf("setBaDevConfig\n");
  }

  void getBaDevConfig( ::dicp::BaDev& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getBaDevConfig\n");
  }

  void getBaParConfig( ::dicp::BaPar& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getBaParConfig\n");
  }

  void setBaNwConfig(const std::string& authenticationToken, const  ::dicp::BaNw& network, const std::vector< ::dicp::BaPort> & ports) {
    // Your implementation goes here
    printf("setBaNwConfig\n");
  }

  void getBaNwConfig( ::dicp::BaNw& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getBaNwConfig\n");
  }

  void getBaPortConfig(std::vector< ::dicp::BaPort> & _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getBaPortConfig\n");
  }

  void setUTCTime(const std::string& authenticationToken, const int64_t utctime) {
    // Your implementation goes here
    printf("setUTCTime\n");
  }

  int64_t getUTCTime(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getUTCTime\n");
  }

  bool processPackAndGo(const std::string& authenticationToken, const std::string& path) {
    // Your implementation goes here
    printf("processPackAndGo\n");
  }

  int32_t getPackAndGoStatus(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getPackAndGoStatus\n");
  }

  bool createBackup(const std::string& authenticationToken, const std::string& path) {
    // Your implementation goes here
    printf("createBackup\n");
  }

  int32_t getBackupStatus(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getBackupStatus\n");
  }

  void activateConfigData(const std::string& authenticationToken, const bool activate) {
    // Your implementation goes here
    printf("activateConfigData\n");
  }

  void setDeviceConfigParameter(const std::string& authenticationToken, const DeviceConfigParameter& devConfig) {
    // Your implementation goes here
    printf("setDeviceConfigParameter\n");
  }

  void getDeviceConfigParameter(DeviceConfigParameter& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getDeviceConfigParameter\n");
  }

  void setTimeZone(const std::string& authenticationToken, const  ::dicp::TimeSet& tz) {
    // Your implementation goes here
    printf("setTimeZone\n");
  }

  void getTimeZone( ::dicp::TimeSet& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getTimeZone\n");
  }

  void addIPPort( ::dicp::IPport& _return, const std::string& authenticationToken, const  ::dicp::Lan& lanNwItf) {
    // Your implementation goes here
    printf("addIPPort\n");
  }

  void addLONPort( ::dicp::LONport& _return, const std::string& authenticationToken, const  ::dicp::Eia709& eia709NwItf) {
    // Your implementation goes here
    printf("addLONPort\n");
  }

  void addMSTPPort( ::dicp::MSTPport& _return, const std::string& authenticationToken, const  ::dicp::Rs485& rs485NwItf) {
    // Your implementation goes here
    printf("addMSTPPort\n");
  }

  void addLanItf( ::dicp::Lan& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("addLanItf\n");
  }

  void addEia709Itf( ::dicp::Eia709& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("addEia709Itf\n");
  }

  void addRs485Itf( ::dicp::Rs485& _return, const std::string& authenticationToken) {
    // Your implementation goes here
    printf("addRs485Itf\n");
  }

  int32_t IsMSTPSupported(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("IsMSTPSupported\n");
  }

  int32_t IsLONSupported(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("IsLONSupported\n");
  }

  bool getStateSSH(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("getStateSSH\n");
  }

  bool startSSH(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("startSSH\n");
  }

  bool stopSSH(const std::string& authenticationToken) {
    // Your implementation goes here
    printf("stopSSH\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ConfigureAndLoadServiceHandler> handler(new ConfigureAndLoadServiceHandler());
  shared_ptr<TProcessor> processor(new ConfigureAndLoadServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

