/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Channel_types.h"

#include <algorithm>

namespace siemens { namespace bt { namespace channel {

int _kChannel_LabelValues[] = {
  Channel_Label::CHANNEL_IO_LABEL,
  Channel_Label::CHANNEL_PL_LABEL,
  Channel_Label::CHANNEL_DALI_LABEL,
  Channel_Label::CHANNEL_ANYORDUMMY_VALUE
};
const char* _kChannel_LabelNames[] = {
  "CHANNEL_IO_LABEL",
  "CHANNEL_PL_LABEL",
  "CHANNEL_DALI_LABEL",
  "CHANNEL_ANYORDUMMY_VALUE"
};
const std::map<int, const char*> _Channel_Label_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kChannel_LabelValues, _kChannel_LabelNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* BusStatus::ascii_fingerprint = "4F4AB97912D4FF290CDFBAAE221A7AAB";
const uint8_t BusStatus::binary_fingerprint[16] = {0x4F,0x4A,0xB9,0x79,0x12,0xD4,0xFF,0x29,0x0C,0xDF,0xBA,0xAE,0x22,0x1A,0x7A,0xAB};

uint32_t BusStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->rank);
          this->__isset.rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BusStatus");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->rank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusStatus &a, BusStatus &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.text, b.text);
  swap(a.rank, b.rank);
  swap(a.__isset, b.__isset);
}

const char* Device::ascii_fingerprint = "E21DEE4E137AE90F99019F2B7D0DB15E";
const uint8_t Device::binary_fingerprint[16] = {0xE2,0x1D,0xEE,0x4E,0x13,0x7A,0xE9,0x0F,0x99,0x01,0x9F,0x2B,0x7D,0x0D,0xB1,0x5E};

uint32_t Device::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dl);
          this->__isset.dl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type_online);
          this->__isset.type_online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serial_number);
          this->__isset.serial_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->online);
          this->__isset.online = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->state_text);
          this->__isset.state_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->queue);
          this->__isset.queue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Device::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Device");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->crc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->dl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_online", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->type_online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serial_number", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->serial_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("online", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->online);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state_text", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->state_text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("queue", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->queue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Device &a, Device &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.crc, b.crc);
  swap(a.address, b.address);
  swap(a.dl, b.dl);
  swap(a.type, b.type);
  swap(a.type_online, b.type_online);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.serial_number, b.serial_number);
  swap(a.online, b.online);
  swap(a.state_text, b.state_text);
  swap(a.state, b.state);
  swap(a.queue, b.queue);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

const char* PointTest::ascii_fingerprint = "A364F6C3D7F5B145D26D9B314FBF550C";
const uint8_t PointTest::binary_fingerprint[16] = {0xA3,0x64,0xF6,0xC3,0xD7,0xF5,0xB1,0x45,0xD2,0x6D,0x9B,0x31,0x4F,0xBF,0x55,0x0C};

uint32_t PointTest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->reliability);
          this->__isset.reliability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->read_only);
          this->__isset.read_only = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->overwrite);
          this->__isset.overwrite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->flags.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->flags.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readByte(this->flags[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dl);
          this->__isset.dl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->device.read(iprot);
          this->__isset.device = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->present_prio);
          this->__isset.present_prio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PointTest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PointTest");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->crc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reliability", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->reliability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("read_only", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->read_only);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("overwrite", ::apache::thrift::protocol::T_BOOL, 12);
  xfer += oprot->writeBool(this->overwrite);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->flags.size()));
    std::vector<int8_t> ::const_iterator _iter5;
    for (_iter5 = this->flags.begin(); _iter5 != this->flags.end(); ++_iter5)
    {
      xfer += oprot->writeByte((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dl", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->dl);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->device.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("present_prio", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->present_prio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PointTest &a, PointTest &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.crc, b.crc);
  swap(a.address, b.address);
  swap(a.value, b.value);
  swap(a.unit, b.unit);
  swap(a.reliability, b.reliability);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.state, b.state);
  swap(a.comment, b.comment);
  swap(a.read_only, b.read_only);
  swap(a.overwrite, b.overwrite);
  swap(a.flags, b.flags);
  swap(a.dl, b.dl);
  swap(a.device, b.device);
  swap(a.present_prio, b.present_prio);
  swap(a.__isset, b.__isset);
}

const char* OverviewData::ascii_fingerprint = "F07EF730219CCA2F15892D0A79149BFE";
const uint8_t OverviewData::binary_fingerprint[16] = {0xF0,0x7E,0xF7,0x30,0x21,0x9C,0xCA,0x2F,0x15,0x89,0x2D,0x0A,0x79,0x14,0x9B,0xFE};

uint32_t OverviewData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->connectedDevs);
          this->__isset.connectedDevs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->configuredDevs);
          this->__isset.configuredDevs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->reliability.read(iprot);
          this->__isset.reliability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->overwrite);
          this->__isset.overwrite = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OverviewData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OverviewData");

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->crc);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->status.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.connectedDevs) {
    xfer += oprot->writeFieldBegin("connectedDevs", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->connectedDevs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configuredDevs) {
    xfer += oprot->writeFieldBegin("configuredDevs", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->configuredDevs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reliability) {
    xfer += oprot->writeFieldBegin("reliability", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->reliability.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.overwrite) {
    xfer += oprot->writeFieldBegin("overwrite", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->overwrite);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OverviewData &a, OverviewData &b) {
  using ::std::swap;
  swap(a.crc, b.crc);
  swap(a.status, b.status);
  swap(a.connectedDevs, b.connectedDevs);
  swap(a.configuredDevs, b.configuredDevs);
  swap(a.reliability, b.reliability);
  swap(a.overwrite, b.overwrite);
  swap(a.__isset, b.__isset);
}

const char* Orphan::ascii_fingerprint = "3368C2F81F2FEF71F11EDACDB2A3ECEF";
const uint8_t Orphan::binary_fingerprint[16] = {0x33,0x68,0xC2,0xF8,0x1F,0x2F,0xEF,0x71,0xF1,0x1E,0xDA,0xCD,0xB2,0xA3,0xEC,0xEF};

uint32_t Orphan::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->orph);
          this->__isset.orph = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->na);
          this->__isset.na = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ddt);
          this->__isset.ddt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Orphan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Orphan");

  xfer += oprot->writeFieldBegin("orph", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->orph);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("na", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->na);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ddt", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ddt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Orphan &a, Orphan &b) {
  using ::std::swap;
  swap(a.orph, b.orph);
  swap(a.na, b.na);
  swap(a.ddt, b.ddt);
  swap(a.__isset, b.__isset);
}

const char* BusData::ascii_fingerprint = "AABA4E4D9A6E0E64C53BD1FBD4247F6F";
const uint8_t BusData::binary_fingerprint[16] = {0xAA,0xBA,0x4E,0x4D,0x9A,0x6E,0x0E,0x64,0xC5,0x3B,0xD1,0xFB,0xD4,0x24,0x7F,0x6F};

uint32_t BusData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->available);
          this->__isset.available = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->overview.read(iprot);
          this->__isset.overview = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->devices.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            xfer += iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              int32_t _key11;
              xfer += iprot->readI32(_key11);
              Device& _val12 = this->devices[_key11];
              xfer += _val12.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.devices = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->tests.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _ktype14;
            ::apache::thrift::protocol::TType _vtype15;
            xfer += iprot->readMapBegin(_ktype14, _vtype15, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              int32_t _key18;
              xfer += iprot->readI32(_key18);
              PointTest& _val19 = this->tests[_key18];
              xfer += _val19.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.tests = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->orphans.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->orphans.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->orphans[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.orphans = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BusData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BusData");

  xfer += oprot->writeFieldBegin("available", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->available);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.overview) {
    xfer += oprot->writeFieldBegin("overview", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->overview.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.devices) {
    xfer += oprot->writeFieldBegin("devices", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->devices.size()));
      std::map<int32_t, Device> ::const_iterator _iter25;
      for (_iter25 = this->devices.begin(); _iter25 != this->devices.end(); ++_iter25)
      {
        xfer += oprot->writeI32(_iter25->first);
        xfer += _iter25->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tests) {
    xfer += oprot->writeFieldBegin("tests", ::apache::thrift::protocol::T_MAP, 4);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->tests.size()));
      std::map<int32_t, PointTest> ::const_iterator _iter26;
      for (_iter26 = this->tests.begin(); _iter26 != this->tests.end(); ++_iter26)
      {
        xfer += oprot->writeI32(_iter26->first);
        xfer += _iter26->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.orphans) {
    xfer += oprot->writeFieldBegin("orphans", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->orphans.size()));
      std::vector<Orphan> ::const_iterator _iter27;
      for (_iter27 = this->orphans.begin(); _iter27 != this->orphans.end(); ++_iter27)
      {
        xfer += (*_iter27).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BusData &a, BusData &b) {
  using ::std::swap;
  swap(a.available, b.available);
  swap(a.overview, b.overview);
  swap(a.devices, b.devices);
  swap(a.tests, b.tests);
  swap(a.orphans, b.orphans);
  swap(a.__isset, b.__isset);
}

const char* DeviceCmdException::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t DeviceCmdException::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t DeviceCmdException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorCode = false;
  bool isset_message = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->errorCode);
          isset_errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          isset_message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_message)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DeviceCmdException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceCmdException");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceCmdException &a, DeviceCmdException &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.message, b.message);
}

}}} // namespace
