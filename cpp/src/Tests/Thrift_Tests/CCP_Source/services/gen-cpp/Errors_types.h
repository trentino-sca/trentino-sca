/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Errors_TYPES_H
#define Errors_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include "Types_types.h"


namespace siemens { namespace bt { namespace error {

struct ErrorCode {
  enum type {
    UNKNOWN = 1,
    BAD_DATA_FORMAT = 2,
    PERMISSION_DENIED = 3,
    INTERNAL_ERROR = 4,
    DATA_REQUIRED = 5,
    LIMIT_REACHED = 6,
    QUOTA_REACHED = 7,
    INVALID_AUTH = 8,
    AUTH_EXPIRED = 9,
    DATA_CONFLICT = 10,
    ENML_VALIDATION = 11,
    SHARD_UNAVAILABLE = 12
  };
};

extern const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES;

struct BA_ERROR_CLASS {
  enum type {
    BA_ERR_CLASS_DEVICE = 0,
    BA_ERR_CLASS_OBJECT = 1,
    BA_ERR_CLASS_PROPERTY = 2,
    BA_ERR_CLASS_RESOURCES = 3,
    BA_ERR_CLASS_SECURITY = 4,
    BA_ERR_CLASS_SERVICES = 5,
    BA_ERR_CLASS_VT = 6,
    BA_ERR_CLASS_LAST_KNOWN = 6,
    BA_ERR_CLASS_ASHRAE_MAX = 63,
    BA_ERR_CLASS_FIRST_PROPRIETARY = 64,
    BA_ERR_CLASS_MAX = 65535
  };
};

extern const std::map<int, const char*> _BA_ERROR_CLASS_VALUES_TO_NAMES;

struct BA_ERROR_CODE {
  enum type {
    BA_ERR_CODE_OTHER = 0,
    BA_ERR_CODE_AUTHENTICATION_FAILED = 1,
    BA_ERR_CODE_CONFIG_IN_PROGRESS = 2,
    BA_ERR_CODE_DEVICE_BUSY = 3,
    BA_ERR_CODE_DYN_CREATION_NOT_SUPP = 4,
    BA_ERR_CODE_FILE_ACCESS_DENIED = 5,
    BA_ERR_CODE_WRONG_SECURITY_LEVELS = 6,
    BA_ERR_CODE_INCONSISTENT_PARAMS = 7,
    BA_ERR_CODE_INVALID_PARAMETERS = 7,
    BA_ERR_CODE_INVALID_SELECTION_CRIT = 8,
    BA_ERR_CODE_INVALID_DATA_TYPE = 9,
    BA_ERR_CODE_INVALID_FILE_ACCESS = 10,
    BA_ERR_CODE_INVALID_FILE_START_POS = 11,
    BA_ERR_CODE_INVALID_OPERATOR_NAME = 12,
    BA_ERR_CODE_INVALID_PARAMETER_TYPE = 13,
    BA_ERR_CODE_INVALID_TIME_STAMP = 14,
    BA_ERR_CODE_KEY_GENERATION_ERROR = 15,
    BA_ERR_CODE_MISSING_PARAMETER = 16,
    BA_ERR_CODE_NO_OBJS_OF_SPEC_TYPE = 17,
    BA_ERR_CODE_OBJECT_NOT_FOUND = 17,
    BA_ERR_CODE_NO_SPACE_FOR_OBJECT = 18,
    BA_ERR_CODE_NO_SPACE_FOR_ELEMENT = 19,
    BA_ERR_CODE_NO_SPACE_TO_WRITE_PROP = 20,
    BA_ERR_CODE_NO_VT_SESSIONS_AVAIL = 21,
    BA_ERR_CODE_PROP_IS_NOT_A_LIST = 22,
    BA_ERR_CODE_OBJ_DELETION_DENIED = 23,
    BA_ERR_CODE_OBJ_ID_ALREADY_EXISTS = 24,
    BA_ERR_CODE_OPERATIONAL_PROBLEM = 25,
    BA_ERR_CODE_PASSWORD_FAILURE = 26,
    BA_ERR_CODE_READ_ACCESS_DENIED = 27,
    BA_ERR_CODE_SECURITY_NOT_SUPPORTED = 28,
    BA_ERR_CODE_SERVICE_REQUEST_DENIED = 29,
    BA_ERR_CODE_TIMEOUT = 30,
    BA_ERR_CODE_UNKNOWN_OBJECT = 31,
    BA_ERR_CODE_UNKNOWN_PROPERTY = 32,
    BA_ERR_CODE_UNKNOWN_VT_CLASS = 34,
    BA_ERR_CODE_UNKNOWN_VT_SESSION = 35,
    BA_ERR_CODE_UNSUPPORTED_OBJ_TYPE = 36,
    BA_ERR_CODE_VALUE_OUT_OF_RANGE = 37,
    BA_ERR_CODE_VT_SESSION_CLOSED = 38,
    BA_ERR_CODE_VT_SESSION_TERM_FAILED = 39,
    BA_ERR_CODE_WRITE_ACCESS_DENIED = 40,
    BA_ERR_CODE_CHAR_SET_NOT_SUPPORTED = 41,
    BA_ERR_CODE_INVALID_ARRAY_INDEX = 42,
    BA_ERR_CODE_COV_SUBS_FAILED = 43,
    BA_ERR_CODE_NOT_COV_PROPERTY = 44,
    BA_ERR_CODE_OPTIONAL_FUNC_NOT_SUPP = 45,
    BA_ERR_CODE_INVALID_CONFIG_DATA = 46,
    BA_ERR_CODE_DATATYPE_NOT_SUPPORTED = 47,
    BA_ERR_CODE_DUPLICATE_NAME = 48,
    BA_ERR_CODE_DUPLICATE_OBJECT_ID = 49,
    BA_ERR_CODE_PROPERTY_IS_NOT_AN_ARRAY = 50,
    BA_ERR_CODE_VALUE_NOT_INITIALIZED = 72,
    BA_ERR_CODE_INVALID_EVENT_STATE = 73,
    BA_ERR_CODE_NO_ALARM_CONFIGURED = 74,
    BA_ERR_CODE_LOG_BUFFER_FULL = 75,
    BA_ERR_CODE_LIST_ELEMENT_NOT_FOUND = 81,
    BA_ERR_CODE_LAST_KNOWN = 81,
    BA_ERR_CODE_ASHRAE_MAX = 255,
    BA_ERR_CODE_FIRST_PROPRIETARY = 256,
    BA_ERR_CODE_MAX = 65535
  };
};

extern const std::map<int, const char*> _BA_ERROR_CODE_VALUES_TO_NAMES;

typedef struct _UserException__isset {
  _UserException__isset() : parameter(false) {}
  bool parameter;
} _UserException__isset;

class UserException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  UserException() : errorCode((ErrorCode::type)0), parameter() {
  }

  virtual ~UserException() throw() {}

  ErrorCode::type errorCode;
  std::string parameter;

  _UserException__isset __isset;

  void __set_errorCode(const ErrorCode::type val) {
    errorCode = val;
  }

  void __set_parameter(const std::string& val) {
    parameter = val;
    __isset.parameter = true;
  }

  bool operator == (const UserException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.parameter != rhs.__isset.parameter)
      return false;
    else if (__isset.parameter && !(parameter == rhs.parameter))
      return false;
    return true;
  }
  bool operator != (const UserException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserException &a, UserException &b);

typedef struct _SystemException__isset {
  _SystemException__isset() : message(false) {}
  bool message;
} _SystemException__isset;

class SystemException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "24652790C81ECE22B629CB60A19F1E93";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x65,0x27,0x90,0xC8,0x1E,0xCE,0x22,0xB6,0x29,0xCB,0x60,0xA1,0x9F,0x1E,0x93};

  SystemException() : errorCode((ErrorCode::type)0), message() {
  }

  virtual ~SystemException() throw() {}

  ErrorCode::type errorCode;
  std::string message;

  _SystemException__isset __isset;

  void __set_errorCode(const ErrorCode::type val) {
    errorCode = val;
  }

  void __set_message(const std::string& val) {
    message = val;
    __isset.message = true;
  }

  bool operator == (const SystemException & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.message != rhs.__isset.message)
      return false;
    else if (__isset.message && !(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const SystemException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SystemException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SystemException &a, SystemException &b);

typedef struct _NotFoundException__isset {
  _NotFoundException__isset() : identifier(false), key(false) {}
  bool identifier;
  bool key;
} _NotFoundException__isset;

class NotFoundException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  NotFoundException() : identifier(), key() {
  }

  virtual ~NotFoundException() throw() {}

  std::string identifier;
  std::string key;

  _NotFoundException__isset __isset;

  void __set_identifier(const std::string& val) {
    identifier = val;
    __isset.identifier = true;
  }

  void __set_key(const std::string& val) {
    key = val;
    __isset.key = true;
  }

  bool operator == (const NotFoundException & rhs) const
  {
    if (__isset.identifier != rhs.__isset.identifier)
      return false;
    else if (__isset.identifier && !(identifier == rhs.identifier))
      return false;
    if (__isset.key != rhs.__isset.key)
      return false;
    else if (__isset.key && !(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const NotFoundException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NotFoundException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(NotFoundException &a, NotFoundException &b);

typedef struct _BaException__isset {
  _BaException__isset() : message(false), obj_id(false) {}
  bool message;
  bool obj_id;
} _BaException__isset;

class BaException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "E6FEF1319ECC0005D2B15155790AA97B";
  static const uint8_t binary_fingerprint[16]; // = {0xE6,0xFE,0xF1,0x31,0x9E,0xCC,0x00,0x05,0xD2,0xB1,0x51,0x55,0x79,0x0A,0xA9,0x7B};

  BaException() : message() {
  }

  virtual ~BaException() throw() {}

  std::string message;
   ::siemens::bt::type::Object_Id obj_id;

  _BaException__isset __isset;

  void __set_message(const std::string& val) {
    message = val;
  }

  void __set_obj_id(const  ::siemens::bt::type::Object_Id& val) {
    obj_id = val;
  }

  bool operator == (const BaException & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(obj_id == rhs.obj_id))
      return false;
    return true;
  }
  bool operator != (const BaException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BaException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BaException &a, BaException &b);

}}} // namespace

#endif
