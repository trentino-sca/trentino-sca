/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DICPService_H
#define DICPService_H

#include <thrift/TDispatchProcessor.h>
#include "DICP_types.h"

namespace dicp {

class DICPServiceIf {
 public:
  virtual ~DICPServiceIf() {}
  virtual void discover(const DiscoverServiceData& data) = 0;
  virtual void wink(const WinkServiceData& data) = 0;
  virtual void configure(const ConfigureServiceData& data) = 0;
  virtual void unconfigure(const UnconfigureServiceData& data) = 0;
  virtual void settime(const SetTimeServiceData& data) = 0;
  virtual void setpassword(const SetPasswordServiceData& data) = 0;
};

class DICPServiceIfFactory {
 public:
  typedef DICPServiceIf Handler;

  virtual ~DICPServiceIfFactory() {}

  virtual DICPServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DICPServiceIf* /* handler */) = 0;
};

class DICPServiceIfSingletonFactory : virtual public DICPServiceIfFactory {
 public:
  DICPServiceIfSingletonFactory(const boost::shared_ptr<DICPServiceIf>& iface) : iface_(iface) {}
  virtual ~DICPServiceIfSingletonFactory() {}

  virtual DICPServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DICPServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DICPServiceIf> iface_;
};

class DICPServiceNull : virtual public DICPServiceIf {
 public:
  virtual ~DICPServiceNull() {}
  void discover(const DiscoverServiceData& /* data */) {
    return;
  }
  void wink(const WinkServiceData& /* data */) {
    return;
  }
  void configure(const ConfigureServiceData& /* data */) {
    return;
  }
  void unconfigure(const UnconfigureServiceData& /* data */) {
    return;
  }
  void settime(const SetTimeServiceData& /* data */) {
    return;
  }
  void setpassword(const SetPasswordServiceData& /* data */) {
    return;
  }
};

typedef struct _DICPService_discover_args__isset {
  _DICPService_discover_args__isset() : data(false) {}
  bool data;
} _DICPService_discover_args__isset;

class DICPService_discover_args {
 public:

  DICPService_discover_args() {
  }

  virtual ~DICPService_discover_args() throw() {}

  DiscoverServiceData data;

  _DICPService_discover_args__isset __isset;

  void __set_data(const DiscoverServiceData& val) {
    data = val;
  }

  bool operator == (const DICPService_discover_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DICPService_discover_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPService_discover_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPService_discover_pargs {
 public:


  virtual ~DICPService_discover_pargs() throw() {}

  const DiscoverServiceData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DICPService_wink_args__isset {
  _DICPService_wink_args__isset() : data(false) {}
  bool data;
} _DICPService_wink_args__isset;

class DICPService_wink_args {
 public:

  DICPService_wink_args() {
  }

  virtual ~DICPService_wink_args() throw() {}

  WinkServiceData data;

  _DICPService_wink_args__isset __isset;

  void __set_data(const WinkServiceData& val) {
    data = val;
  }

  bool operator == (const DICPService_wink_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DICPService_wink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPService_wink_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPService_wink_pargs {
 public:


  virtual ~DICPService_wink_pargs() throw() {}

  const WinkServiceData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DICPService_configure_args__isset {
  _DICPService_configure_args__isset() : data(false) {}
  bool data;
} _DICPService_configure_args__isset;

class DICPService_configure_args {
 public:

  DICPService_configure_args() {
  }

  virtual ~DICPService_configure_args() throw() {}

  ConfigureServiceData data;

  _DICPService_configure_args__isset __isset;

  void __set_data(const ConfigureServiceData& val) {
    data = val;
  }

  bool operator == (const DICPService_configure_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DICPService_configure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPService_configure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPService_configure_pargs {
 public:


  virtual ~DICPService_configure_pargs() throw() {}

  const ConfigureServiceData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DICPService_unconfigure_args__isset {
  _DICPService_unconfigure_args__isset() : data(false) {}
  bool data;
} _DICPService_unconfigure_args__isset;

class DICPService_unconfigure_args {
 public:

  DICPService_unconfigure_args() {
  }

  virtual ~DICPService_unconfigure_args() throw() {}

  UnconfigureServiceData data;

  _DICPService_unconfigure_args__isset __isset;

  void __set_data(const UnconfigureServiceData& val) {
    data = val;
  }

  bool operator == (const DICPService_unconfigure_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DICPService_unconfigure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPService_unconfigure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPService_unconfigure_pargs {
 public:


  virtual ~DICPService_unconfigure_pargs() throw() {}

  const UnconfigureServiceData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DICPService_settime_args__isset {
  _DICPService_settime_args__isset() : data(false) {}
  bool data;
} _DICPService_settime_args__isset;

class DICPService_settime_args {
 public:

  DICPService_settime_args() {
  }

  virtual ~DICPService_settime_args() throw() {}

  SetTimeServiceData data;

  _DICPService_settime_args__isset __isset;

  void __set_data(const SetTimeServiceData& val) {
    data = val;
  }

  bool operator == (const DICPService_settime_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DICPService_settime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPService_settime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPService_settime_pargs {
 public:


  virtual ~DICPService_settime_pargs() throw() {}

  const SetTimeServiceData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DICPService_setpassword_args__isset {
  _DICPService_setpassword_args__isset() : data(false) {}
  bool data;
} _DICPService_setpassword_args__isset;

class DICPService_setpassword_args {
 public:

  DICPService_setpassword_args() {
  }

  virtual ~DICPService_setpassword_args() throw() {}

  SetPasswordServiceData data;

  _DICPService_setpassword_args__isset __isset;

  void __set_data(const SetPasswordServiceData& val) {
    data = val;
  }

  bool operator == (const DICPService_setpassword_args & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DICPService_setpassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DICPService_setpassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DICPService_setpassword_pargs {
 public:


  virtual ~DICPService_setpassword_pargs() throw() {}

  const SetPasswordServiceData* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class DICPServiceClient : virtual public DICPServiceIf {
 public:
  DICPServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DICPServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void discover(const DiscoverServiceData& data);
  void send_discover(const DiscoverServiceData& data);
  void wink(const WinkServiceData& data);
  void send_wink(const WinkServiceData& data);
  void configure(const ConfigureServiceData& data);
  void send_configure(const ConfigureServiceData& data);
  void unconfigure(const UnconfigureServiceData& data);
  void send_unconfigure(const UnconfigureServiceData& data);
  void settime(const SetTimeServiceData& data);
  void send_settime(const SetTimeServiceData& data);
  void setpassword(const SetPasswordServiceData& data);
  void send_setpassword(const SetPasswordServiceData& data);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DICPServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DICPServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DICPServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_discover(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_wink(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_configure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unconfigure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_settime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setpassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DICPServiceProcessor(boost::shared_ptr<DICPServiceIf> iface) :
    iface_(iface) {
    processMap_["discover"] = &DICPServiceProcessor::process_discover;
    processMap_["wink"] = &DICPServiceProcessor::process_wink;
    processMap_["configure"] = &DICPServiceProcessor::process_configure;
    processMap_["unconfigure"] = &DICPServiceProcessor::process_unconfigure;
    processMap_["settime"] = &DICPServiceProcessor::process_settime;
    processMap_["setpassword"] = &DICPServiceProcessor::process_setpassword;
  }

  virtual ~DICPServiceProcessor() {}
};

class DICPServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DICPServiceProcessorFactory(const ::boost::shared_ptr< DICPServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DICPServiceIfFactory > handlerFactory_;
};

class DICPServiceMultiface : virtual public DICPServiceIf {
 public:
  DICPServiceMultiface(std::vector<boost::shared_ptr<DICPServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DICPServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DICPServiceIf> > ifaces_;
  DICPServiceMultiface() {}
  void add(boost::shared_ptr<DICPServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void discover(const DiscoverServiceData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->discover(data);
    }
    ifaces_[i]->discover(data);
  }

  void wink(const WinkServiceData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->wink(data);
    }
    ifaces_[i]->wink(data);
  }

  void configure(const ConfigureServiceData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->configure(data);
    }
    ifaces_[i]->configure(data);
  }

  void unconfigure(const UnconfigureServiceData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unconfigure(data);
    }
    ifaces_[i]->unconfigure(data);
  }

  void settime(const SetTimeServiceData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->settime(data);
    }
    ifaces_[i]->settime(data);
  }

  void setpassword(const SetPasswordServiceData& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setpassword(data);
    }
    ifaces_[i]->setpassword(data);
  }

};

} // namespace

#endif
