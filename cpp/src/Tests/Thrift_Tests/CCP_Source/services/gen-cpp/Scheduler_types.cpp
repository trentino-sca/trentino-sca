/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Scheduler_types.h"

#include <algorithm>

namespace siemens { namespace bt { namespace scheduler {

int _kExceptionTypeValues[] = {
  ExceptionType::READ_ONLY,
  ExceptionType::SINGLE,
  ExceptionType::MULTIPLE
};
const char* _kExceptionTypeNames[] = {
  "READ_ONLY",
  "SINGLE",
  "MULTIPLE"
};
const std::map<int, const char*> _ExceptionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kExceptionTypeValues, _kExceptionTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kPeriodTypeValues[] = {
  PeriodType::DATE,
  PeriodType::DATE_RANGE,
  PeriodType::WEEKNDAY,
  PeriodType::CALENDAR_REF,
  PeriodType::UNDEFINED
};
const char* _kPeriodTypeNames[] = {
  "DATE",
  "DATE_RANGE",
  "WEEKNDAY",
  "CALENDAR_REF",
  "UNDEFINED"
};
const std::map<int, const char*> _PeriodType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kPeriodTypeValues, _kPeriodTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kScheduler_Command_TypeValues[] = {
  Scheduler_Command_Type::CMD_SET_PHASE_FOR_DAY,
  Scheduler_Command_Type::CMD_CHANGE_PHASE_FOR_DAY,
  Scheduler_Command_Type::CMD_DELETE_PHASE_FOR_DAY,
  Scheduler_Command_Type::CMD_COPY_DAILY_PROFILE,
  Scheduler_Command_Type::CMD_SET_PHASE_FOR_SPECIAL_EVENT,
  Scheduler_Command_Type::CMD_CHANGE_PHASE_FOR_SPECIAL_EVENT,
  Scheduler_Command_Type::CMD_DELETE_PHASE_FOR_SPECIAL_EVENT,
  Scheduler_Command_Type::CMD_COPY_SPECIAL_EVENT_PROFILE,
  Scheduler_Command_Type::CMD_CREATE_SPECIAL_EVENTS,
  Scheduler_Command_Type::CMD_SET_DATE_RANGE,
  Scheduler_Command_Type::CMD_SET_RECURRING,
  Scheduler_Command_Type::CMD_DELETE_SPECIAL_EVENT,
  Scheduler_Command_Type::CMD_REQ_EXCEPTION_MONTH
};
const char* _kScheduler_Command_TypeNames[] = {
  "CMD_SET_PHASE_FOR_DAY",
  "CMD_CHANGE_PHASE_FOR_DAY",
  "CMD_DELETE_PHASE_FOR_DAY",
  "CMD_COPY_DAILY_PROFILE",
  "CMD_SET_PHASE_FOR_SPECIAL_EVENT",
  "CMD_CHANGE_PHASE_FOR_SPECIAL_EVENT",
  "CMD_DELETE_PHASE_FOR_SPECIAL_EVENT",
  "CMD_COPY_SPECIAL_EVENT_PROFILE",
  "CMD_CREATE_SPECIAL_EVENTS",
  "CMD_SET_DATE_RANGE",
  "CMD_SET_RECURRING",
  "CMD_DELETE_SPECIAL_EVENT",
  "CMD_REQ_EXCEPTION_MONTH"
};
const std::map<int, const char*> _Scheduler_Command_Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(13, _kScheduler_Command_TypeValues, _kScheduler_Command_TypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Date::ascii_fingerprint = "874362235FCCF77E284413CBBBA335FE";
const uint8_t Date::binary_fingerprint[16] = {0x87,0x43,0x62,0x23,0x5F,0xCC,0xF7,0x7E,0x28,0x44,0x13,0xCB,0xBB,0xA3,0x35,0xFE};

uint32_t Date::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->month);
          this->__isset.month = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Date::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Date");

  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->year);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("month", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->month);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Date &a, Date &b) {
  using ::std::swap;
  swap(a.year, b.year);
  swap(a.month, b.month);
  swap(a.day, b.day);
  swap(a.__isset, b.__isset);
}

const char* WeekNDay::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t WeekNDay::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t WeekNDay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->month);
          this->__isset.month = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->weekOfMonth);
          this->__isset.weekOfMonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dayOfWeek);
          this->__isset.dayOfWeek = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WeekNDay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("WeekNDay");

  xfer += oprot->writeFieldBegin("month", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->month);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weekOfMonth", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->weekOfMonth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dayOfWeek", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->dayOfWeek);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WeekNDay &a, WeekNDay &b) {
  using ::std::swap;
  swap(a.month, b.month);
  swap(a.weekOfMonth, b.weekOfMonth);
  swap(a.dayOfWeek, b.dayOfWeek);
  swap(a.__isset, b.__isset);
}

const char* RecurringType::ascii_fingerprint = "896C6B851B0D15EA1CB4C07B76DB714B";
const uint8_t RecurringType::binary_fingerprint[16] = {0x89,0x6C,0x6B,0x85,0x1B,0x0D,0x15,0xEA,0x1C,0xB4,0xC0,0x7B,0x76,0xDB,0x71,0x4B};

uint32_t RecurringType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->period = (PeriodType::type)ecast0;
          this->__isset.period = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->date.read(iprot);
          this->__isset.date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->weekNDay.read(iprot);
          this->__isset.weekNDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RecurringType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RecurringType");

  xfer += oprot->writeFieldBegin("period", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->period);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.date) {
    xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->date.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.weekNDay) {
    xfer += oprot->writeFieldBegin("weekNDay", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->weekNDay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RecurringType &a, RecurringType &b) {
  using ::std::swap;
  swap(a.period, b.period);
  swap(a.date, b.date);
  swap(a.weekNDay, b.weekNDay);
  swap(a.__isset, b.__isset);
}

const char* SetPhaseForDay::ascii_fingerprint = "88A5B4E5163BAD6268A818F033B05B0A";
const uint8_t SetPhaseForDay::binary_fingerprint[16] = {0x88,0xA5,0xB4,0xE5,0x16,0x3B,0xAD,0x62,0x68,0xA8,0x18,0xF0,0x33,0xB0,0x5B,0x0A};

uint32_t SetPhaseForDay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetPhaseForDay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetPhaseForDay");

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetPhaseForDay &a, SetPhaseForDay &b) {
  using ::std::swap;
  swap(a.day, b.day);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* ChangePhaseForDay::ascii_fingerprint = "C3546C6E49B8363726BC922CDB3FAAAB";
const uint8_t ChangePhaseForDay::binary_fingerprint[16] = {0xC3,0x54,0x6C,0x6E,0x49,0xB8,0x36,0x37,0x26,0xBC,0x92,0x2C,0xDB,0x3F,0xAA,0xAB};

uint32_t ChangePhaseForDay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prevStartTime);
          this->__isset.prevStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newStartTime);
          this->__isset.newStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newEndTime);
          this->__isset.newEndTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangePhaseForDay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChangePhaseForDay");

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prevStartTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->prevStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newStartTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->newStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newEndTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->newEndTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChangePhaseForDay &a, ChangePhaseForDay &b) {
  using ::std::swap;
  swap(a.day, b.day);
  swap(a.prevStartTime, b.prevStartTime);
  swap(a.newStartTime, b.newStartTime);
  swap(a.newEndTime, b.newEndTime);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* DeletePhaseForDay::ascii_fingerprint = "EFFD9F67D6D23CD85DFFD381B41885B5";
const uint8_t DeletePhaseForDay::binary_fingerprint[16] = {0xEF,0xFD,0x9F,0x67,0xD6,0xD2,0x3C,0xD8,0x5D,0xFF,0xD3,0x81,0xB4,0x18,0x85,0xB5};

uint32_t DeletePhaseForDay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeletePhaseForDay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeletePhaseForDay");

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeletePhaseForDay &a, DeletePhaseForDay &b) {
  using ::std::swap;
  swap(a.day, b.day);
  swap(a.startTime, b.startTime);
  swap(a.__isset, b.__isset);
}

const char* CopyDailyProfile::ascii_fingerprint = "E9315D11ED9B3ADE4F14971EFD87F639";
const uint8_t CopyDailyProfile::binary_fingerprint[16] = {0xE9,0x31,0x5D,0x11,0xED,0x9B,0x3A,0xDE,0x4F,0x14,0x97,0x1E,0xFD,0x87,0xF6,0x39};

uint32_t CopyDailyProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->srcDay);
          this->__isset.srcDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->destDays.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->destDays.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readByte(this->destDays[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.destDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CopyDailyProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CopyDailyProfile");

  xfer += oprot->writeFieldBegin("srcDay", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->srcDay);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destDays", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BYTE, static_cast<uint32_t>(this->destDays.size()));
    std::vector<int8_t> ::const_iterator _iter6;
    for (_iter6 = this->destDays.begin(); _iter6 != this->destDays.end(); ++_iter6)
    {
      xfer += oprot->writeByte((*_iter6));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CopyDailyProfile &a, CopyDailyProfile &b) {
  using ::std::swap;
  swap(a.srcDay, b.srcDay);
  swap(a.destDays, b.destDays);
  swap(a.__isset, b.__isset);
}

const char* SetPhaseForSpecialEvent::ascii_fingerprint = "A53F55241AFA00538B1712380041F8B0";
const uint8_t SetPhaseForSpecialEvent::binary_fingerprint[16] = {0xA5,0x3F,0x55,0x24,0x1A,0xFA,0x00,0x53,0x8B,0x17,0x12,0x38,0x00,0x41,0xF8,0xB0};

uint32_t SetPhaseForSpecialEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetPhaseForSpecialEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetPhaseForSpecialEvent");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetPhaseForSpecialEvent &a, SetPhaseForSpecialEvent &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* ChangePhaseForSpecialEvent::ascii_fingerprint = "7029377E72B27706C84D3D62F058BECD";
const uint8_t ChangePhaseForSpecialEvent::binary_fingerprint[16] = {0x70,0x29,0x37,0x7E,0x72,0xB2,0x77,0x06,0xC8,0x4D,0x3D,0x62,0xF0,0x58,0xBE,0xCD};

uint32_t ChangePhaseForSpecialEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->prevStartTime);
          this->__isset.prevStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newStartTime);
          this->__isset.newStartTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newEndTime);
          this->__isset.newEndTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChangePhaseForSpecialEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ChangePhaseForSpecialEvent");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prevStartTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->prevStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newStartTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->newStartTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("newEndTime", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->newEndTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChangePhaseForSpecialEvent &a, ChangePhaseForSpecialEvent &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.prevStartTime, b.prevStartTime);
  swap(a.newStartTime, b.newStartTime);
  swap(a.newEndTime, b.newEndTime);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* DeletePhaseForSpecialEvent::ascii_fingerprint = "0D0E376BC3AE6606497788AA82F73617";
const uint8_t DeletePhaseForSpecialEvent::binary_fingerprint[16] = {0x0D,0x0E,0x37,0x6B,0xC3,0xAE,0x66,0x06,0x49,0x77,0x88,0xAA,0x82,0xF7,0x36,0x17};

uint32_t DeletePhaseForSpecialEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeletePhaseForSpecialEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeletePhaseForSpecialEvent");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeletePhaseForSpecialEvent &a, DeletePhaseForSpecialEvent &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.startTime, b.startTime);
  swap(a.__isset, b.__isset);
}

const char* CopySpecialEventProfile::ascii_fingerprint = "DB945E1C48BBD5462834775FF2901AC4";
const uint8_t CopySpecialEventProfile::binary_fingerprint[16] = {0xDB,0x94,0x5E,0x1C,0x48,0xBB,0xD5,0x46,0x28,0x34,0x77,0x5F,0xF2,0x90,0x1A,0xC4};

uint32_t CopySpecialEventProfile::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->destDate.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->destDate.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->destDate[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.destDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CopySpecialEventProfile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CopySpecialEventProfile");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destDate", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->destDate.size()));
    std::vector<Date> ::const_iterator _iter12;
    for (_iter12 = this->destDate.begin(); _iter12 != this->destDate.end(); ++_iter12)
    {
      xfer += (*_iter12).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CopySpecialEventProfile &a, CopySpecialEventProfile &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.destDate, b.destDate);
  swap(a.__isset, b.__isset);
}

const char* CreateSpecialEvent::ascii_fingerprint = "1C4F4460A230F26CD75A43A848D2D804";
const uint8_t CreateSpecialEvent::binary_fingerprint[16] = {0x1C,0x4F,0x44,0x60,0xA2,0x30,0xF2,0x6C,0xD7,0x5A,0x43,0xA8,0x48,0xD2,0xD8,0x04};

uint32_t CreateSpecialEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recurringSpec.read(iprot);
          this->__isset.recurringSpec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTime);
          this->__isset.startTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->endTime);
          this->__isset.endTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CreateSpecialEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CreateSpecialEvent");

  xfer += oprot->writeFieldBegin("recurringSpec", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->recurringSpec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startTime", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->startTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endTime", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->endTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CreateSpecialEvent &a, CreateSpecialEvent &b) {
  using ::std::swap;
  swap(a.recurringSpec, b.recurringSpec);
  swap(a.startTime, b.startTime);
  swap(a.endTime, b.endTime);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* SetDateRange::ascii_fingerprint = "DD19BF9CDE85A6D2CEB094776D288B4F";
const uint8_t SetDateRange::binary_fingerprint[16] = {0xDD,0x19,0xBF,0x9C,0xDE,0x85,0xA6,0xD2,0xCE,0xB0,0x94,0x77,0x6D,0x28,0x8B,0x4F};

uint32_t SetDateRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->endDate.read(iprot);
          this->__isset.endDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetDateRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetDateRange");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("endDate", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->endDate.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetDateRange &a, SetDateRange &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.endDate, b.endDate);
  swap(a.__isset, b.__isset);
}

const char* SetRecurring::ascii_fingerprint = "A7B3AB7291CD33DAA78362203F87E1FC";
const uint8_t SetRecurring::binary_fingerprint[16] = {0xA7,0xB3,0xAB,0x72,0x91,0xCD,0x33,0xDA,0xA7,0x83,0x62,0x20,0x3F,0x87,0xE1,0xFC};

uint32_t SetRecurring::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->recurringSpec.read(iprot);
          this->__isset.recurringSpec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SetRecurring::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SetRecurring");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("recurringSpec", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->recurringSpec.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SetRecurring &a, SetRecurring &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.recurringSpec, b.recurringSpec);
  swap(a.__isset, b.__isset);
}

const char* DeleteSpecialEvent::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t DeleteSpecialEvent::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t DeleteSpecialEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteSpecialEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeleteSpecialEvent");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeleteSpecialEvent &a, DeleteSpecialEvent &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.__isset, b.__isset);
}

const char* RequestExceptionMonths::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t RequestExceptionMonths::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t RequestExceptionMonths::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startYear);
          this->__isset.startYear = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startMonth);
          this->__isset.startMonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numberOfMonths);
          this->__isset.numberOfMonths = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestExceptionMonths::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestExceptionMonths");

  xfer += oprot->writeFieldBegin("startYear", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->startYear);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("startMonth", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->startMonth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numberOfMonths", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->numberOfMonths);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RequestExceptionMonths &a, RequestExceptionMonths &b) {
  using ::std::swap;
  swap(a.startYear, b.startYear);
  swap(a.startMonth, b.startMonth);
  swap(a.numberOfMonths, b.numberOfMonths);
  swap(a.__isset, b.__isset);
}

const char* SchedulerParameters::ascii_fingerprint = "181FEB48C31BD959E84740B93EB08BF5";
const uint8_t SchedulerParameters::binary_fingerprint[16] = {0x18,0x1F,0xEB,0x48,0xC3,0x1B,0xD9,0x59,0xE8,0x47,0x40,0xB9,0x3E,0xB0,0x8B,0xF5};

uint32_t SchedulerParameters::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->schedulerId);
          this->__isset.schedulerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->command = (Scheduler_Command_Type::type)ecast13;
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->setPhaseForDay.read(iprot);
          this->__isset.setPhaseForDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->changePhaseForDay.read(iprot);
          this->__isset.changePhaseForDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deletePhaseForDay.read(iprot);
          this->__isset.deletePhaseForDay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->copyDailyProfile.read(iprot);
          this->__isset.copyDailyProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->setPhaseForSpecialEvent.read(iprot);
          this->__isset.setPhaseForSpecialEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->changePhaseForSpecialEvent.read(iprot);
          this->__isset.changePhaseForSpecialEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deletePhaseForSpecialEvent.read(iprot);
          this->__isset.deletePhaseForSpecialEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->copySpecialEventProfile.read(iprot);
          this->__isset.copySpecialEventProfile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->createSpecialEvent.read(iprot);
          this->__isset.createSpecialEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->setDateRange.read(iprot);
          this->__isset.setDateRange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->setRecurring.read(iprot);
          this->__isset.setRecurring = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deleteSpecialEvent.read(iprot);
          this->__isset.deleteSpecialEvent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->requestExceptionMonth.read(iprot);
          this->__isset.requestExceptionMonth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SchedulerParameters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SchedulerParameters");

  xfer += oprot->writeFieldBegin("schedulerId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->schedulerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->command);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.setPhaseForDay) {
    xfer += oprot->writeFieldBegin("setPhaseForDay", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->setPhaseForDay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.changePhaseForDay) {
    xfer += oprot->writeFieldBegin("changePhaseForDay", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->changePhaseForDay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deletePhaseForDay) {
    xfer += oprot->writeFieldBegin("deletePhaseForDay", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->deletePhaseForDay.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.copyDailyProfile) {
    xfer += oprot->writeFieldBegin("copyDailyProfile", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->copyDailyProfile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.setPhaseForSpecialEvent) {
    xfer += oprot->writeFieldBegin("setPhaseForSpecialEvent", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->setPhaseForSpecialEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.changePhaseForSpecialEvent) {
    xfer += oprot->writeFieldBegin("changePhaseForSpecialEvent", ::apache::thrift::protocol::T_STRUCT, 8);
    xfer += this->changePhaseForSpecialEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deletePhaseForSpecialEvent) {
    xfer += oprot->writeFieldBegin("deletePhaseForSpecialEvent", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->deletePhaseForSpecialEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.copySpecialEventProfile) {
    xfer += oprot->writeFieldBegin("copySpecialEventProfile", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->copySpecialEventProfile.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createSpecialEvent) {
    xfer += oprot->writeFieldBegin("createSpecialEvent", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->createSpecialEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.setDateRange) {
    xfer += oprot->writeFieldBegin("setDateRange", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->setDateRange.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.setRecurring) {
    xfer += oprot->writeFieldBegin("setRecurring", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->setRecurring.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deleteSpecialEvent) {
    xfer += oprot->writeFieldBegin("deleteSpecialEvent", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->deleteSpecialEvent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requestExceptionMonth) {
    xfer += oprot->writeFieldBegin("requestExceptionMonth", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->requestExceptionMonth.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SchedulerParameters &a, SchedulerParameters &b) {
  using ::std::swap;
  swap(a.schedulerId, b.schedulerId);
  swap(a.command, b.command);
  swap(a.setPhaseForDay, b.setPhaseForDay);
  swap(a.changePhaseForDay, b.changePhaseForDay);
  swap(a.deletePhaseForDay, b.deletePhaseForDay);
  swap(a.copyDailyProfile, b.copyDailyProfile);
  swap(a.setPhaseForSpecialEvent, b.setPhaseForSpecialEvent);
  swap(a.changePhaseForSpecialEvent, b.changePhaseForSpecialEvent);
  swap(a.deletePhaseForSpecialEvent, b.deletePhaseForSpecialEvent);
  swap(a.copySpecialEventProfile, b.copySpecialEventProfile);
  swap(a.createSpecialEvent, b.createSpecialEvent);
  swap(a.setDateRange, b.setDateRange);
  swap(a.setRecurring, b.setRecurring);
  swap(a.deleteSpecialEvent, b.deleteSpecialEvent);
  swap(a.requestExceptionMonth, b.requestExceptionMonth);
  swap(a.__isset, b.__isset);
}

const char* SchedulerResult::ascii_fingerprint = "565787C31CF2D774B532CB755189BF39";
const uint8_t SchedulerResult::binary_fingerprint[16] = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

uint32_t SchedulerResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->specialEventId);
          this->__isset.specialEventId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SchedulerResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SchedulerResult");

  xfer += oprot->writeFieldBegin("specialEventId", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->specialEventId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SchedulerResult &a, SchedulerResult &b) {
  using ::std::swap;
  swap(a.specialEventId, b.specialEventId);
  swap(a.__isset, b.__isset);
}

}}} // namespace
