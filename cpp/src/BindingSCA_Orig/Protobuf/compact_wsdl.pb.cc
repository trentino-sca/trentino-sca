// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compact_wsdl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace compact_soap {

namespace {

const ::google::protobuf::Descriptor* WSDLType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_typedesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_typedesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_MessageRefType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_MessageRefType_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_MessageRefFaultType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_MessageRefFaultType_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_InterfaceOperationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_InterfaceOperationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_InterfaceFaultType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_InterfaceFaultType_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_InterfaceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_InterfaceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSDLType_DescriptionType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSDLType_DescriptionType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_compact_5fwsdl_2eproto() {
  protobuf_AddDesc_compact_5fwsdl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "compact_wsdl.proto");
  GOOGLE_CHECK(file != NULL);
  WSDLType_descriptor_ = file->message_type(0);
  static const int WSDLType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType, documentation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType, description_),
  };
  WSDLType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_descriptor_,
      WSDLType::default_instance_,
      WSDLType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType));
  WSDLType_typedesc_descriptor_ = WSDLType_descriptor_->nested_type(0);
  static const int WSDLType_typedesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_typedesc, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_typedesc, protobufmessage_),
  };
  WSDLType_typedesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_typedesc_descriptor_,
      WSDLType_typedesc::default_instance_,
      WSDLType_typedesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_typedesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_typedesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_typedesc));
  WSDLType_MessageRefType_descriptor_ = WSDLType_descriptor_->nested_type(1);
  static const int WSDLType_MessageRefType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefType, messagelabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefType, typeref_),
  };
  WSDLType_MessageRefType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_MessageRefType_descriptor_,
      WSDLType_MessageRefType::default_instance_,
      WSDLType_MessageRefType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_MessageRefType));
  WSDLType_MessageRefFaultType_descriptor_ = WSDLType_descriptor_->nested_type(2);
  static const int WSDLType_MessageRefFaultType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefFaultType, messagelabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefFaultType, referencedfault_),
  };
  WSDLType_MessageRefFaultType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_MessageRefFaultType_descriptor_,
      WSDLType_MessageRefFaultType::default_instance_,
      WSDLType_MessageRefFaultType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefFaultType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_MessageRefFaultType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_MessageRefFaultType));
  WSDLType_InterfaceOperationType_descriptor_ = WSDLType_descriptor_->nested_type(3);
  static const int WSDLType_InterfaceOperationType_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, infault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, outfault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, style_),
  };
  WSDLType_InterfaceOperationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_InterfaceOperationType_descriptor_,
      WSDLType_InterfaceOperationType::default_instance_,
      WSDLType_InterfaceOperationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceOperationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_InterfaceOperationType));
  WSDLType_InterfaceFaultType_descriptor_ = WSDLType_descriptor_->nested_type(4);
  static const int WSDLType_InterfaceFaultType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceFaultType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceFaultType, typeref_),
  };
  WSDLType_InterfaceFaultType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_InterfaceFaultType_descriptor_,
      WSDLType_InterfaceFaultType::default_instance_,
      WSDLType_InterfaceFaultType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceFaultType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceFaultType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_InterfaceFaultType));
  WSDLType_InterfaceType_descriptor_ = WSDLType_descriptor_->nested_type(5);
  static const int WSDLType_InterfaceType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, documentation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, operations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, styledefault_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, faults_),
  };
  WSDLType_InterfaceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_InterfaceType_descriptor_,
      WSDLType_InterfaceType::default_instance_,
      WSDLType_InterfaceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_InterfaceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_InterfaceType));
  WSDLType_DescriptionType_descriptor_ = WSDLType_descriptor_->nested_type(6);
  static const int WSDLType_DescriptionType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_DescriptionType, interfaces_),
  };
  WSDLType_DescriptionType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSDLType_DescriptionType_descriptor_,
      WSDLType_DescriptionType::default_instance_,
      WSDLType_DescriptionType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_DescriptionType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSDLType_DescriptionType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSDLType_DescriptionType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_compact_5fwsdl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_descriptor_, &WSDLType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_typedesc_descriptor_, &WSDLType_typedesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_MessageRefType_descriptor_, &WSDLType_MessageRefType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_MessageRefFaultType_descriptor_, &WSDLType_MessageRefFaultType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_InterfaceOperationType_descriptor_, &WSDLType_InterfaceOperationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_InterfaceFaultType_descriptor_, &WSDLType_InterfaceFaultType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_InterfaceType_descriptor_, &WSDLType_InterfaceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSDLType_DescriptionType_descriptor_, &WSDLType_DescriptionType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_compact_5fwsdl_2eproto() {
  delete WSDLType::default_instance_;
  delete WSDLType_reflection_;
  delete WSDLType_typedesc::default_instance_;
  delete WSDLType_typedesc_reflection_;
  delete WSDLType_MessageRefType::default_instance_;
  delete WSDLType_MessageRefType_reflection_;
  delete WSDLType_MessageRefFaultType::default_instance_;
  delete WSDLType_MessageRefFaultType_reflection_;
  delete WSDLType_InterfaceOperationType::default_instance_;
  delete WSDLType_InterfaceOperationType_reflection_;
  delete WSDLType_InterfaceFaultType::default_instance_;
  delete WSDLType_InterfaceFaultType_reflection_;
  delete WSDLType_InterfaceType::default_instance_;
  delete WSDLType_InterfaceType_reflection_;
  delete WSDLType_DescriptionType::default_instance_;
  delete WSDLType_DescriptionType_reflection_;
}

void protobuf_AddDesc_compact_5fwsdl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022compact_wsdl.proto\022\014compact_soap\"\222\007\n\010W"
    "SDLType\022\025\n\rdocumentation\030\001 \001(\t\022;\n\013descri"
    "ption\030\002 \001(\0132&.compact_soap.WSDLType.Desc"
    "riptionType\0325\n\010typedesc\022\020\n\010typename\030\001 \002("
    "\t\022\027\n\017protobufmessage\030\002 \001(\t\0327\n\016MessageRef"
    "Type\022\024\n\014messageLabel\030\001 \001(\t\022\017\n\007typeRef\030\002 "
    "\001(\t\032D\n\023MessageRefFaultType\022\024\n\014messageLab"
    "el\030\001 \001(\t\022\027\n\017referencedFault\030\002 \001(\t\032\256\002\n\026In"
    "terfaceOperationType\0224\n\005input\030\001 \003(\0132%.co"
    "mpact_soap.WSDLType.MessageRefType\0225\n\006ou"
    "tput\030\002 \003(\0132%.compact_soap.WSDLType.Messa"
    "geRefType\022;\n\007infault\030\003 \003(\0132*.compact_soa"
    "p.WSDLType.MessageRefFaultType\022<\n\010outfau"
    "lt\030\004 \003(\0132*.compact_soap.WSDLType.Message"
    "RefFaultType\022\014\n\004name\030\005 \001(\t\022\017\n\007pattern\030\006 "
    "\001(\t\022\r\n\005style\030\007 \001(\t\0323\n\022InterfaceFaultType"
    "\022\014\n\004name\030\001 \001(\t\022\017\n\007typeRef\030\002 \001(\t\032\310\001\n\rInte"
    "rfaceType\022\025\n\rdocumentation\030\001 \001(\t\022A\n\noper"
    "ations\030\002 \003(\0132-.compact_soap.WSDLType.Int"
    "erfaceOperationType\022\014\n\004name\030\003 \002(\t\022\024\n\014sty"
    "leDefault\030\004 \001(\t\0229\n\006faults\030\005 \003(\0132).compac"
    "t_soap.WSDLType.InterfaceFaultType\032K\n\017De"
    "scriptionType\0228\n\ninterfaces\030\001 \003(\0132$.comp"
    "act_soap.WSDLType.InterfaceType", 951);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "compact_wsdl.proto", &protobuf_RegisterTypes);
  WSDLType::default_instance_ = new WSDLType();
  WSDLType_typedesc::default_instance_ = new WSDLType_typedesc();
  WSDLType_MessageRefType::default_instance_ = new WSDLType_MessageRefType();
  WSDLType_MessageRefFaultType::default_instance_ = new WSDLType_MessageRefFaultType();
  WSDLType_InterfaceOperationType::default_instance_ = new WSDLType_InterfaceOperationType();
  WSDLType_InterfaceFaultType::default_instance_ = new WSDLType_InterfaceFaultType();
  WSDLType_InterfaceType::default_instance_ = new WSDLType_InterfaceType();
  WSDLType_DescriptionType::default_instance_ = new WSDLType_DescriptionType();
  WSDLType::default_instance_->InitAsDefaultInstance();
  WSDLType_typedesc::default_instance_->InitAsDefaultInstance();
  WSDLType_MessageRefType::default_instance_->InitAsDefaultInstance();
  WSDLType_MessageRefFaultType::default_instance_->InitAsDefaultInstance();
  WSDLType_InterfaceOperationType::default_instance_->InitAsDefaultInstance();
  WSDLType_InterfaceFaultType::default_instance_->InitAsDefaultInstance();
  WSDLType_InterfaceType::default_instance_->InitAsDefaultInstance();
  WSDLType_DescriptionType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compact_5fwsdl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compact_5fwsdl_2eproto {
  StaticDescriptorInitializer_compact_5fwsdl_2eproto() {
    protobuf_AddDesc_compact_5fwsdl_2eproto();
  }
} static_descriptor_initializer_compact_5fwsdl_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int WSDLType_typedesc::kTypenameFieldNumber;
const int WSDLType_typedesc::kProtobufmessageFieldNumber;
#endif  // !_MSC_VER

WSDLType_typedesc::WSDLType_typedesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_typedesc::InitAsDefaultInstance() {
}

WSDLType_typedesc::WSDLType_typedesc(const WSDLType_typedesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_typedesc::SharedCtor() {
  _cached_size_ = 0;
  typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protobufmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_typedesc::~WSDLType_typedesc() {
  SharedDtor();
}

void WSDLType_typedesc::SharedDtor() {
  if (typename__ != &::google::protobuf::internal::kEmptyString) {
    delete typename__;
  }
  if (protobufmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete protobufmessage_;
  }
  if (this != default_instance_) {
  }
}

void WSDLType_typedesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_typedesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_typedesc_descriptor_;
}

const WSDLType_typedesc& WSDLType_typedesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_typedesc* WSDLType_typedesc::default_instance_ = NULL;

WSDLType_typedesc* WSDLType_typedesc::New() const {
  return new WSDLType_typedesc;
}

void WSDLType_typedesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_typename_()) {
      if (typename__ != &::google::protobuf::internal::kEmptyString) {
        typename__->clear();
      }
    }
    if (has_protobufmessage()) {
      if (protobufmessage_ != &::google::protobuf::internal::kEmptyString) {
        protobufmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_typedesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string typename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protobufmessage;
        break;
      }
      
      // optional string protobufmessage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protobufmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protobufmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protobufmessage().data(), this->protobufmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_typedesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string typename = 1;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->typename_(), output);
  }
  
  // optional string protobufmessage = 2;
  if (has_protobufmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protobufmessage().data(), this->protobufmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->protobufmessage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_typedesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string typename = 1;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->typename_(), target);
  }
  
  // optional string protobufmessage = 2;
  if (has_protobufmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protobufmessage().data(), this->protobufmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->protobufmessage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_typedesc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string typename = 1;
    if (has_typename_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typename_());
    }
    
    // optional string protobufmessage = 2;
    if (has_protobufmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protobufmessage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_typedesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_typedesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_typedesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_typedesc::MergeFrom(const WSDLType_typedesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typename_()) {
      set_typename_(from.typename_());
    }
    if (from.has_protobufmessage()) {
      set_protobufmessage(from.protobufmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_typedesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_typedesc::CopyFrom(const WSDLType_typedesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_typedesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WSDLType_typedesc::Swap(WSDLType_typedesc* other) {
  if (other != this) {
    std::swap(typename__, other->typename__);
    std::swap(protobufmessage_, other->protobufmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_typedesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_typedesc_descriptor_;
  metadata.reflection = WSDLType_typedesc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType_MessageRefType::kMessageLabelFieldNumber;
const int WSDLType_MessageRefType::kTypeRefFieldNumber;
#endif  // !_MSC_VER

WSDLType_MessageRefType::WSDLType_MessageRefType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_MessageRefType::InitAsDefaultInstance() {
}

WSDLType_MessageRefType::WSDLType_MessageRefType(const WSDLType_MessageRefType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_MessageRefType::SharedCtor() {
  _cached_size_ = 0;
  messagelabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_MessageRefType::~WSDLType_MessageRefType() {
  SharedDtor();
}

void WSDLType_MessageRefType::SharedDtor() {
  if (messagelabel_ != &::google::protobuf::internal::kEmptyString) {
    delete messagelabel_;
  }
  if (typeref_ != &::google::protobuf::internal::kEmptyString) {
    delete typeref_;
  }
  if (this != default_instance_) {
  }
}

void WSDLType_MessageRefType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_MessageRefType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_MessageRefType_descriptor_;
}

const WSDLType_MessageRefType& WSDLType_MessageRefType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_MessageRefType* WSDLType_MessageRefType::default_instance_ = NULL;

WSDLType_MessageRefType* WSDLType_MessageRefType::New() const {
  return new WSDLType_MessageRefType;
}

void WSDLType_MessageRefType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messagelabel()) {
      if (messagelabel_ != &::google::protobuf::internal::kEmptyString) {
        messagelabel_->clear();
      }
    }
    if (has_typeref()) {
      if (typeref_ != &::google::protobuf::internal::kEmptyString) {
        typeref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_MessageRefType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string messageLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagelabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagelabel().data(), this->messagelabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_typeRef;
        break;
      }
      
      // optional string typeRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typeref().data(), this->typeref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_MessageRefType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string messageLabel = 1;
  if (has_messagelabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagelabel().data(), this->messagelabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messagelabel(), output);
  }
  
  // optional string typeRef = 2;
  if (has_typeref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeref().data(), this->typeref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->typeref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_MessageRefType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string messageLabel = 1;
  if (has_messagelabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagelabel().data(), this->messagelabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagelabel(), target);
  }
  
  // optional string typeRef = 2;
  if (has_typeref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeref().data(), this->typeref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->typeref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_MessageRefType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string messageLabel = 1;
    if (has_messagelabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagelabel());
    }
    
    // optional string typeRef = 2;
    if (has_typeref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_MessageRefType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_MessageRefType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_MessageRefType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_MessageRefType::MergeFrom(const WSDLType_MessageRefType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagelabel()) {
      set_messagelabel(from.messagelabel());
    }
    if (from.has_typeref()) {
      set_typeref(from.typeref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_MessageRefType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_MessageRefType::CopyFrom(const WSDLType_MessageRefType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_MessageRefType::IsInitialized() const {
  
  return true;
}

void WSDLType_MessageRefType::Swap(WSDLType_MessageRefType* other) {
  if (other != this) {
    std::swap(messagelabel_, other->messagelabel_);
    std::swap(typeref_, other->typeref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_MessageRefType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_MessageRefType_descriptor_;
  metadata.reflection = WSDLType_MessageRefType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType_MessageRefFaultType::kMessageLabelFieldNumber;
const int WSDLType_MessageRefFaultType::kReferencedFaultFieldNumber;
#endif  // !_MSC_VER

WSDLType_MessageRefFaultType::WSDLType_MessageRefFaultType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_MessageRefFaultType::InitAsDefaultInstance() {
}

WSDLType_MessageRefFaultType::WSDLType_MessageRefFaultType(const WSDLType_MessageRefFaultType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_MessageRefFaultType::SharedCtor() {
  _cached_size_ = 0;
  messagelabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  referencedfault_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_MessageRefFaultType::~WSDLType_MessageRefFaultType() {
  SharedDtor();
}

void WSDLType_MessageRefFaultType::SharedDtor() {
  if (messagelabel_ != &::google::protobuf::internal::kEmptyString) {
    delete messagelabel_;
  }
  if (referencedfault_ != &::google::protobuf::internal::kEmptyString) {
    delete referencedfault_;
  }
  if (this != default_instance_) {
  }
}

void WSDLType_MessageRefFaultType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_MessageRefFaultType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_MessageRefFaultType_descriptor_;
}

const WSDLType_MessageRefFaultType& WSDLType_MessageRefFaultType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_MessageRefFaultType* WSDLType_MessageRefFaultType::default_instance_ = NULL;

WSDLType_MessageRefFaultType* WSDLType_MessageRefFaultType::New() const {
  return new WSDLType_MessageRefFaultType;
}

void WSDLType_MessageRefFaultType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_messagelabel()) {
      if (messagelabel_ != &::google::protobuf::internal::kEmptyString) {
        messagelabel_->clear();
      }
    }
    if (has_referencedfault()) {
      if (referencedfault_ != &::google::protobuf::internal::kEmptyString) {
        referencedfault_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_MessageRefFaultType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string messageLabel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagelabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messagelabel().data(), this->messagelabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_referencedFault;
        break;
      }
      
      // optional string referencedFault = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referencedFault:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referencedfault()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->referencedfault().data(), this->referencedfault().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_MessageRefFaultType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string messageLabel = 1;
  if (has_messagelabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagelabel().data(), this->messagelabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messagelabel(), output);
  }
  
  // optional string referencedFault = 2;
  if (has_referencedfault()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->referencedfault().data(), this->referencedfault().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->referencedfault(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_MessageRefFaultType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string messageLabel = 1;
  if (has_messagelabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messagelabel().data(), this->messagelabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messagelabel(), target);
  }
  
  // optional string referencedFault = 2;
  if (has_referencedfault()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->referencedfault().data(), this->referencedfault().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->referencedfault(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_MessageRefFaultType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string messageLabel = 1;
    if (has_messagelabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagelabel());
    }
    
    // optional string referencedFault = 2;
    if (has_referencedfault()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->referencedfault());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_MessageRefFaultType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_MessageRefFaultType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_MessageRefFaultType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_MessageRefFaultType::MergeFrom(const WSDLType_MessageRefFaultType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messagelabel()) {
      set_messagelabel(from.messagelabel());
    }
    if (from.has_referencedfault()) {
      set_referencedfault(from.referencedfault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_MessageRefFaultType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_MessageRefFaultType::CopyFrom(const WSDLType_MessageRefFaultType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_MessageRefFaultType::IsInitialized() const {
  
  return true;
}

void WSDLType_MessageRefFaultType::Swap(WSDLType_MessageRefFaultType* other) {
  if (other != this) {
    std::swap(messagelabel_, other->messagelabel_);
    std::swap(referencedfault_, other->referencedfault_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_MessageRefFaultType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_MessageRefFaultType_descriptor_;
  metadata.reflection = WSDLType_MessageRefFaultType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType_InterfaceOperationType::kInputFieldNumber;
const int WSDLType_InterfaceOperationType::kOutputFieldNumber;
const int WSDLType_InterfaceOperationType::kInfaultFieldNumber;
const int WSDLType_InterfaceOperationType::kOutfaultFieldNumber;
const int WSDLType_InterfaceOperationType::kNameFieldNumber;
const int WSDLType_InterfaceOperationType::kPatternFieldNumber;
const int WSDLType_InterfaceOperationType::kStyleFieldNumber;
#endif  // !_MSC_VER

WSDLType_InterfaceOperationType::WSDLType_InterfaceOperationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_InterfaceOperationType::InitAsDefaultInstance() {
}

WSDLType_InterfaceOperationType::WSDLType_InterfaceOperationType(const WSDLType_InterfaceOperationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_InterfaceOperationType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_InterfaceOperationType::~WSDLType_InterfaceOperationType() {
  SharedDtor();
}

void WSDLType_InterfaceOperationType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    delete pattern_;
  }
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    delete style_;
  }
  if (this != default_instance_) {
  }
}

void WSDLType_InterfaceOperationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_InterfaceOperationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_InterfaceOperationType_descriptor_;
}

const WSDLType_InterfaceOperationType& WSDLType_InterfaceOperationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_InterfaceOperationType* WSDLType_InterfaceOperationType::default_instance_ = NULL;

WSDLType_InterfaceOperationType* WSDLType_InterfaceOperationType::New() const {
  return new WSDLType_InterfaceOperationType;
}

void WSDLType_InterfaceOperationType::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pattern()) {
      if (pattern_ != &::google::protobuf::internal::kEmptyString) {
        pattern_->clear();
      }
    }
    if (has_style()) {
      if (style_ != &::google::protobuf::internal::kEmptyString) {
        style_->clear();
      }
    }
  }
  input_.Clear();
  output_.Clear();
  infault_.Clear();
  outfault_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_InterfaceOperationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .compact_soap.WSDLType.MessageRefType input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_input;
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }
      
      // repeated .compact_soap.WSDLType.MessageRefType output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        if (input->ExpectTag(26)) goto parse_infault;
        break;
      }
      
      // repeated .compact_soap.WSDLType.MessageRefFaultType infault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infault:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infault()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infault;
        if (input->ExpectTag(34)) goto parse_outfault;
        break;
      }
      
      // repeated .compact_soap.WSDLType.MessageRefFaultType outfault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outfault:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outfault()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_outfault;
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }
      
      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pattern;
        break;
      }
      
      // optional string pattern = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pattern().data(), this->pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_style;
        break;
      }
      
      // optional string style = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_style:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_style()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->style().data(), this->style().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_InterfaceOperationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .compact_soap.WSDLType.MessageRefType input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->input(i), output);
  }
  
  // repeated .compact_soap.WSDLType.MessageRefType output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->output(i), output);
  }
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType infault = 3;
  for (int i = 0; i < this->infault_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infault(i), output);
  }
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType outfault = 4;
  for (int i = 0; i < this->outfault_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outfault(i), output);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }
  
  // optional string pattern = 6;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pattern(), output);
  }
  
  // optional string style = 7;
  if (has_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->style().data(), this->style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->style(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_InterfaceOperationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .compact_soap.WSDLType.MessageRefType input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->input(i), target);
  }
  
  // repeated .compact_soap.WSDLType.MessageRefType output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->output(i), target);
  }
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType infault = 3;
  for (int i = 0; i < this->infault_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infault(i), target);
  }
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType outfault = 4;
  for (int i = 0; i < this->outfault_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outfault(i), target);
  }
  
  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }
  
  // optional string pattern = 6;
  if (has_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pattern(), target);
  }
  
  // optional string style = 7;
  if (has_style()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->style().data(), this->style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->style(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_InterfaceOperationType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pattern = 6;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }
    
    // optional string style = 7;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->style());
    }
    
  }
  // repeated .compact_soap.WSDLType.MessageRefType input = 1;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }
  
  // repeated .compact_soap.WSDLType.MessageRefType output = 2;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType infault = 3;
  total_size += 1 * this->infault_size();
  for (int i = 0; i < this->infault_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infault(i));
  }
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType outfault = 4;
  total_size += 1 * this->outfault_size();
  for (int i = 0; i < this->outfault_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outfault(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_InterfaceOperationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_InterfaceOperationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_InterfaceOperationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_InterfaceOperationType::MergeFrom(const WSDLType_InterfaceOperationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  infault_.MergeFrom(from.infault_);
  outfault_.MergeFrom(from.outfault_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pattern()) {
      set_pattern(from.pattern());
    }
    if (from.has_style()) {
      set_style(from.style());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_InterfaceOperationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_InterfaceOperationType::CopyFrom(const WSDLType_InterfaceOperationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_InterfaceOperationType::IsInitialized() const {
  
  return true;
}

void WSDLType_InterfaceOperationType::Swap(WSDLType_InterfaceOperationType* other) {
  if (other != this) {
    input_.Swap(&other->input_);
    output_.Swap(&other->output_);
    infault_.Swap(&other->infault_);
    outfault_.Swap(&other->outfault_);
    std::swap(name_, other->name_);
    std::swap(pattern_, other->pattern_);
    std::swap(style_, other->style_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_InterfaceOperationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_InterfaceOperationType_descriptor_;
  metadata.reflection = WSDLType_InterfaceOperationType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType_InterfaceFaultType::kNameFieldNumber;
const int WSDLType_InterfaceFaultType::kTypeRefFieldNumber;
#endif  // !_MSC_VER

WSDLType_InterfaceFaultType::WSDLType_InterfaceFaultType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_InterfaceFaultType::InitAsDefaultInstance() {
}

WSDLType_InterfaceFaultType::WSDLType_InterfaceFaultType(const WSDLType_InterfaceFaultType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_InterfaceFaultType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  typeref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_InterfaceFaultType::~WSDLType_InterfaceFaultType() {
  SharedDtor();
}

void WSDLType_InterfaceFaultType::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (typeref_ != &::google::protobuf::internal::kEmptyString) {
    delete typeref_;
  }
  if (this != default_instance_) {
  }
}

void WSDLType_InterfaceFaultType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_InterfaceFaultType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_InterfaceFaultType_descriptor_;
}

const WSDLType_InterfaceFaultType& WSDLType_InterfaceFaultType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_InterfaceFaultType* WSDLType_InterfaceFaultType::default_instance_ = NULL;

WSDLType_InterfaceFaultType* WSDLType_InterfaceFaultType::New() const {
  return new WSDLType_InterfaceFaultType;
}

void WSDLType_InterfaceFaultType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_typeref()) {
      if (typeref_ != &::google::protobuf::internal::kEmptyString) {
        typeref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_InterfaceFaultType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_typeRef;
        break;
      }
      
      // optional string typeRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typeref().data(), this->typeref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_InterfaceFaultType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string typeRef = 2;
  if (has_typeref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeref().data(), this->typeref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->typeref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_InterfaceFaultType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string typeRef = 2;
  if (has_typeref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeref().data(), this->typeref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->typeref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_InterfaceFaultType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string typeRef = 2;
    if (has_typeref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_InterfaceFaultType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_InterfaceFaultType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_InterfaceFaultType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_InterfaceFaultType::MergeFrom(const WSDLType_InterfaceFaultType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_typeref()) {
      set_typeref(from.typeref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_InterfaceFaultType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_InterfaceFaultType::CopyFrom(const WSDLType_InterfaceFaultType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_InterfaceFaultType::IsInitialized() const {
  
  return true;
}

void WSDLType_InterfaceFaultType::Swap(WSDLType_InterfaceFaultType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(typeref_, other->typeref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_InterfaceFaultType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_InterfaceFaultType_descriptor_;
  metadata.reflection = WSDLType_InterfaceFaultType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType_InterfaceType::kDocumentationFieldNumber;
const int WSDLType_InterfaceType::kOperationsFieldNumber;
const int WSDLType_InterfaceType::kNameFieldNumber;
const int WSDLType_InterfaceType::kStyleDefaultFieldNumber;
const int WSDLType_InterfaceType::kFaultsFieldNumber;
#endif  // !_MSC_VER

WSDLType_InterfaceType::WSDLType_InterfaceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_InterfaceType::InitAsDefaultInstance() {
}

WSDLType_InterfaceType::WSDLType_InterfaceType(const WSDLType_InterfaceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_InterfaceType::SharedCtor() {
  _cached_size_ = 0;
  documentation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  styledefault_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_InterfaceType::~WSDLType_InterfaceType() {
  SharedDtor();
}

void WSDLType_InterfaceType::SharedDtor() {
  if (documentation_ != &::google::protobuf::internal::kEmptyString) {
    delete documentation_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (styledefault_ != &::google::protobuf::internal::kEmptyString) {
    delete styledefault_;
  }
  if (this != default_instance_) {
  }
}

void WSDLType_InterfaceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_InterfaceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_InterfaceType_descriptor_;
}

const WSDLType_InterfaceType& WSDLType_InterfaceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_InterfaceType* WSDLType_InterfaceType::default_instance_ = NULL;

WSDLType_InterfaceType* WSDLType_InterfaceType::New() const {
  return new WSDLType_InterfaceType;
}

void WSDLType_InterfaceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_documentation()) {
      if (documentation_ != &::google::protobuf::internal::kEmptyString) {
        documentation_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_styledefault()) {
      if (styledefault_ != &::google::protobuf::internal::kEmptyString) {
        styledefault_->clear();
      }
    }
  }
  operations_.Clear();
  faults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_InterfaceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string documentation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentation().data(), this->documentation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operations;
        break;
      }
      
      // repeated .compact_soap.WSDLType.InterfaceOperationType operations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_operations;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_styleDefault;
        break;
      }
      
      // optional string styleDefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_styleDefault:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_styledefault()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->styledefault().data(), this->styledefault().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_faults;
        break;
      }
      
      // repeated .compact_soap.WSDLType.InterfaceFaultType faults = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faults()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_faults;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_InterfaceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string documentation = 1;
  if (has_documentation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentation().data(), this->documentation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->documentation(), output);
  }
  
  // repeated .compact_soap.WSDLType.InterfaceOperationType operations = 2;
  for (int i = 0; i < this->operations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->operations(i), output);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional string styleDefault = 4;
  if (has_styledefault()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->styledefault().data(), this->styledefault().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->styledefault(), output);
  }
  
  // repeated .compact_soap.WSDLType.InterfaceFaultType faults = 5;
  for (int i = 0; i < this->faults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->faults(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_InterfaceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string documentation = 1;
  if (has_documentation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentation().data(), this->documentation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentation(), target);
  }
  
  // repeated .compact_soap.WSDLType.InterfaceOperationType operations = 2;
  for (int i = 0; i < this->operations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->operations(i), target);
  }
  
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional string styleDefault = 4;
  if (has_styledefault()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->styledefault().data(), this->styledefault().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->styledefault(), target);
  }
  
  // repeated .compact_soap.WSDLType.InterfaceFaultType faults = 5;
  for (int i = 0; i < this->faults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->faults(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_InterfaceType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string documentation = 1;
    if (has_documentation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentation());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string styleDefault = 4;
    if (has_styledefault()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->styledefault());
    }
    
  }
  // repeated .compact_soap.WSDLType.InterfaceOperationType operations = 2;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }
  
  // repeated .compact_soap.WSDLType.InterfaceFaultType faults = 5;
  total_size += 1 * this->faults_size();
  for (int i = 0; i < this->faults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faults(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_InterfaceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_InterfaceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_InterfaceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_InterfaceType::MergeFrom(const WSDLType_InterfaceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  operations_.MergeFrom(from.operations_);
  faults_.MergeFrom(from.faults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentation()) {
      set_documentation(from.documentation());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_styledefault()) {
      set_styledefault(from.styledefault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_InterfaceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_InterfaceType::CopyFrom(const WSDLType_InterfaceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_InterfaceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  return true;
}

void WSDLType_InterfaceType::Swap(WSDLType_InterfaceType* other) {
  if (other != this) {
    std::swap(documentation_, other->documentation_);
    operations_.Swap(&other->operations_);
    std::swap(name_, other->name_);
    std::swap(styledefault_, other->styledefault_);
    faults_.Swap(&other->faults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_InterfaceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_InterfaceType_descriptor_;
  metadata.reflection = WSDLType_InterfaceType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType_DescriptionType::kInterfacesFieldNumber;
#endif  // !_MSC_VER

WSDLType_DescriptionType::WSDLType_DescriptionType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType_DescriptionType::InitAsDefaultInstance() {
}

WSDLType_DescriptionType::WSDLType_DescriptionType(const WSDLType_DescriptionType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType_DescriptionType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType_DescriptionType::~WSDLType_DescriptionType() {
  SharedDtor();
}

void WSDLType_DescriptionType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSDLType_DescriptionType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType_DescriptionType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_DescriptionType_descriptor_;
}

const WSDLType_DescriptionType& WSDLType_DescriptionType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType_DescriptionType* WSDLType_DescriptionType::default_instance_ = NULL;

WSDLType_DescriptionType* WSDLType_DescriptionType::New() const {
  return new WSDLType_DescriptionType;
}

void WSDLType_DescriptionType::Clear() {
  interfaces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType_DescriptionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .compact_soap.WSDLType.InterfaceType interfaces = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interfaces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interfaces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_interfaces;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType_DescriptionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .compact_soap.WSDLType.InterfaceType interfaces = 1;
  for (int i = 0; i < this->interfaces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->interfaces(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType_DescriptionType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .compact_soap.WSDLType.InterfaceType interfaces = 1;
  for (int i = 0; i < this->interfaces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->interfaces(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType_DescriptionType::ByteSize() const {
  int total_size = 0;
  
  // repeated .compact_soap.WSDLType.InterfaceType interfaces = 1;
  total_size += 1 * this->interfaces_size();
  for (int i = 0; i < this->interfaces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interfaces(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType_DescriptionType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType_DescriptionType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType_DescriptionType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType_DescriptionType::MergeFrom(const WSDLType_DescriptionType& from) {
  GOOGLE_CHECK_NE(&from, this);
  interfaces_.MergeFrom(from.interfaces_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType_DescriptionType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType_DescriptionType::CopyFrom(const WSDLType_DescriptionType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType_DescriptionType::IsInitialized() const {
  
  for (int i = 0; i < interfaces_size(); i++) {
    if (!this->interfaces(i).IsInitialized()) return false;
  }
  return true;
}

void WSDLType_DescriptionType::Swap(WSDLType_DescriptionType* other) {
  if (other != this) {
    interfaces_.Swap(&other->interfaces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType_DescriptionType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_DescriptionType_descriptor_;
  metadata.reflection = WSDLType_DescriptionType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WSDLType::kDocumentationFieldNumber;
const int WSDLType::kDescriptionFieldNumber;
#endif  // !_MSC_VER

WSDLType::WSDLType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSDLType::InitAsDefaultInstance() {
  description_ = const_cast< ::compact_soap::WSDLType_DescriptionType*>(&::compact_soap::WSDLType_DescriptionType::default_instance());
}

WSDLType::WSDLType(const WSDLType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSDLType::SharedCtor() {
  _cached_size_ = 0;
  documentation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSDLType::~WSDLType() {
  SharedDtor();
}

void WSDLType::SharedDtor() {
  if (documentation_ != &::google::protobuf::internal::kEmptyString) {
    delete documentation_;
  }
  if (this != default_instance_) {
    delete description_;
  }
}

void WSDLType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSDLType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSDLType_descriptor_;
}

const WSDLType& WSDLType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fwsdl_2eproto();  return *default_instance_;
}

WSDLType* WSDLType::default_instance_ = NULL;

WSDLType* WSDLType::New() const {
  return new WSDLType;
}

void WSDLType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_documentation()) {
      if (documentation_ != &::google::protobuf::internal::kEmptyString) {
        documentation_->clear();
      }
    }
    if (has_description()) {
      if (description_ != NULL) description_->::compact_soap::WSDLType_DescriptionType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSDLType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string documentation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_documentation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->documentation().data(), this->documentation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }
      
      // optional .compact_soap.WSDLType.DescriptionType description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSDLType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string documentation = 1;
  if (has_documentation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentation().data(), this->documentation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->documentation(), output);
  }
  
  // optional .compact_soap.WSDLType.DescriptionType description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSDLType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string documentation = 1;
  if (has_documentation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->documentation().data(), this->documentation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->documentation(), target);
  }
  
  // optional .compact_soap.WSDLType.DescriptionType description = 2;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSDLType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string documentation = 1;
    if (has_documentation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->documentation());
    }
    
    // optional .compact_soap.WSDLType.DescriptionType description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSDLType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSDLType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSDLType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSDLType::MergeFrom(const WSDLType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_documentation()) {
      set_documentation(from.documentation());
    }
    if (from.has_description()) {
      mutable_description()->::compact_soap::WSDLType_DescriptionType::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSDLType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSDLType::CopyFrom(const WSDLType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSDLType::IsInitialized() const {
  
  if (has_description()) {
    if (!this->description().IsInitialized()) return false;
  }
  return true;
}

void WSDLType::Swap(WSDLType* other) {
  if (other != this) {
    std::swap(documentation_, other->documentation_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSDLType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSDLType_descriptor_;
  metadata.reflection = WSDLType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compact_soap

// @@protoc_insertion_point(global_scope)
