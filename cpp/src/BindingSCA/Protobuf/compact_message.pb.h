// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compact_message.proto

#ifndef PROTOBUF_compact_5fmessage_2eproto__INCLUDED
#define PROTOBUF_compact_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace compact_soap {

// Internal implementation detail -- do not call these.
void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
void protobuf_AssignDesc_compact_5fmessage_2eproto();
void protobuf_ShutdownFile_compact_5fmessage_2eproto();

class doubleField;
class floatField;
class int32Field;
class int64Field;
class uint32Field;
class uint64Field;
class sint32Field;
class sint64Field;
class fixed32Field;
class fixed64Field;
class sfixed32Field;
class sfixed64Field;
class boolField;
class stringField;
class bytesField;
class structureField;
class structure;

// ===================================================================

class BINDINGSCA_IMPORT_EXPORT doubleField : public ::google::protobuf::Message {
 public:
  doubleField();
  virtual ~doubleField();
  
  doubleField(const doubleField& from);
  
  inline doubleField& operator=(const doubleField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const doubleField& default_instance();
  
  void Swap(doubleField* other);
  
  // implements Message ----------------------------------------------
  
  doubleField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const doubleField& from);
  void MergeFrom(const doubleField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.doubleField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  double value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static doubleField* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT floatField : public ::google::protobuf::Message {
 public:
  floatField();
  virtual ~floatField();
  
  floatField(const floatField& from);
  
  inline floatField& operator=(const floatField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const floatField& default_instance();
  
  void Swap(floatField* other);
  
  // implements Message ----------------------------------------------
  
  floatField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const floatField& from);
  void MergeFrom(const floatField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional float value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.floatField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  float value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static floatField* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT int32Field : public ::google::protobuf::Message {
 public:
  int32Field();
  virtual ~int32Field();
  
  int32Field(const int32Field& from);
  
  inline int32Field& operator=(const int32Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const int32Field& default_instance();
  
  void Swap(int32Field* other);
  
  // implements Message ----------------------------------------------
  
  int32Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const int32Field& from);
  void MergeFrom(const int32Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.int32Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static int32Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT int64Field : public ::google::protobuf::Message {
 public:
  int64Field();
  virtual ~int64Field();
  
  int64Field(const int64Field& from);
  
  inline int64Field& operator=(const int64Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const int64Field& default_instance();
  
  void Swap(int64Field* other);
  
  // implements Message ----------------------------------------------
  
  int64Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const int64Field& from);
  void MergeFrom(const int64Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.int64Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static int64Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT uint32Field : public ::google::protobuf::Message {
 public:
  uint32Field();
  virtual ~uint32Field();
  
  uint32Field(const uint32Field& from);
  
  inline uint32Field& operator=(const uint32Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const uint32Field& default_instance();
  
  void Swap(uint32Field* other);
  
  // implements Message ----------------------------------------------
  
  uint32Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uint32Field& from);
  void MergeFrom(const uint32Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.uint32Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static uint32Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT uint64Field : public ::google::protobuf::Message {
 public:
  uint64Field();
  virtual ~uint64Field();
  
  uint64Field(const uint64Field& from);
  
  inline uint64Field& operator=(const uint64Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const uint64Field& default_instance();
  
  void Swap(uint64Field* other);
  
  // implements Message ----------------------------------------------
  
  uint64Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uint64Field& from);
  void MergeFrom(const uint64Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.uint64Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static uint64Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT sint32Field : public ::google::protobuf::Message {
 public:
  sint32Field();
  virtual ~sint32Field();
  
  sint32Field(const sint32Field& from);
  
  inline sint32Field& operator=(const sint32Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sint32Field& default_instance();
  
  void Swap(sint32Field* other);
  
  // implements Message ----------------------------------------------
  
  sint32Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sint32Field& from);
  void MergeFrom(const sint32Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional sint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.sint32Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static sint32Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT sint64Field : public ::google::protobuf::Message {
 public:
  sint64Field();
  virtual ~sint64Field();
  
  sint64Field(const sint64Field& from);
  
  inline sint64Field& operator=(const sint64Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sint64Field& default_instance();
  
  void Swap(sint64Field* other);
  
  // implements Message ----------------------------------------------
  
  sint64Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sint64Field& from);
  void MergeFrom(const sint64Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional sint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.sint64Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static sint64Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT fixed32Field : public ::google::protobuf::Message {
 public:
  fixed32Field();
  virtual ~fixed32Field();
  
  fixed32Field(const fixed32Field& from);
  
  inline fixed32Field& operator=(const fixed32Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const fixed32Field& default_instance();
  
  void Swap(fixed32Field* other);
  
  // implements Message ----------------------------------------------
  
  fixed32Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fixed32Field& from);
  void MergeFrom(const fixed32Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional fixed32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.fixed32Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static fixed32Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT fixed64Field : public ::google::protobuf::Message {
 public:
  fixed64Field();
  virtual ~fixed64Field();
  
  fixed64Field(const fixed64Field& from);
  
  inline fixed64Field& operator=(const fixed64Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const fixed64Field& default_instance();
  
  void Swap(fixed64Field* other);
  
  // implements Message ----------------------------------------------
  
  fixed64Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fixed64Field& from);
  void MergeFrom(const fixed64Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional fixed64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.fixed64Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static fixed64Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT sfixed32Field : public ::google::protobuf::Message {
 public:
  sfixed32Field();
  virtual ~sfixed32Field();
  
  sfixed32Field(const sfixed32Field& from);
  
  inline sfixed32Field& operator=(const sfixed32Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sfixed32Field& default_instance();
  
  void Swap(sfixed32Field* other);
  
  // implements Message ----------------------------------------------
  
  sfixed32Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sfixed32Field& from);
  void MergeFrom(const sfixed32Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional sfixed32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.sfixed32Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static sfixed32Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT sfixed64Field : public ::google::protobuf::Message {
 public:
  sfixed64Field();
  virtual ~sfixed64Field();
  
  sfixed64Field(const sfixed64Field& from);
  
  inline sfixed64Field& operator=(const sfixed64Field& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const sfixed64Field& default_instance();
  
  void Swap(sfixed64Field* other);
  
  // implements Message ----------------------------------------------
  
  sfixed64Field* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sfixed64Field& from);
  void MergeFrom(const sfixed64Field& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional sfixed64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.sfixed64Field)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int64 value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static sfixed64Field* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT boolField : public ::google::protobuf::Message {
 public:
  boolField();
  virtual ~boolField();
  
  boolField(const boolField& from);
  
  inline boolField& operator=(const boolField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const boolField& default_instance();
  
  void Swap(boolField* other);
  
  // implements Message ----------------------------------------------
  
  boolField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const boolField& from);
  void MergeFrom(const boolField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bool value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline bool value() const;
  inline void set_value(bool value);
  
  // @@protoc_insertion_point(class_scope:compact_soap.boolField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  bool value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static boolField* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT stringField : public ::google::protobuf::Message {
 public:
  stringField();
  virtual ~stringField();
  
  stringField(const stringField& from);
  
  inline stringField& operator=(const stringField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const stringField& default_instance();
  
  void Swap(stringField* other);
  
  // implements Message ----------------------------------------------
  
  stringField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stringField& from);
  void MergeFrom(const stringField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:compact_soap.stringField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static stringField* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT bytesField : public ::google::protobuf::Message {
 public:
  bytesField();
  virtual ~bytesField();
  
  bytesField(const bytesField& from);
  
  inline bytesField& operator=(const bytesField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const bytesField& default_instance();
  
  void Swap(bytesField* other);
  
  // implements Message ----------------------------------------------
  
  bytesField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bytesField& from);
  void MergeFrom(const bytesField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:compact_soap.bytesField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static bytesField* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT structureField : public ::google::protobuf::Message {
 public:
  structureField();
  virtual ~structureField();
  
  structureField(const structureField& from);
  
  inline structureField& operator=(const structureField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const structureField& default_instance();
  
  void Swap(structureField* other);
  
  // implements Message ----------------------------------------------
  
  structureField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const structureField& from);
  void MergeFrom(const structureField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .compact_soap.structure value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::compact_soap::structure& value() const;
  inline ::compact_soap::structure* mutable_value();
  inline ::compact_soap::structure* release_value();
  
  // @@protoc_insertion_point(class_scope:compact_soap.structureField)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::compact_soap::structure* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static structureField* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT structure : public ::google::protobuf::Message {
 public:
  structure();
  virtual ~structure();
  
  structure(const structure& from);
  
  inline structure& operator=(const structure& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const structure& default_instance();
  
  void Swap(structure* other);
  
  // implements Message ----------------------------------------------
  
  structure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const structure& from);
  void MergeFrom(const structure& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .compact_soap.doubleField fieldsOfDouble = 1;
  inline int fieldsofdouble_size() const;
  inline void clear_fieldsofdouble();
  static const int kFieldsOfDoubleFieldNumber = 1;
  inline const ::compact_soap::doubleField& fieldsofdouble(int index) const;
  inline ::compact_soap::doubleField* mutable_fieldsofdouble(int index);
  inline ::compact_soap::doubleField* add_fieldsofdouble();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::doubleField >&
      fieldsofdouble() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::doubleField >*
      mutable_fieldsofdouble();
  
  // repeated .compact_soap.floatField fieldsOfFloat = 2;
  inline int fieldsoffloat_size() const;
  inline void clear_fieldsoffloat();
  static const int kFieldsOfFloatFieldNumber = 2;
  inline const ::compact_soap::floatField& fieldsoffloat(int index) const;
  inline ::compact_soap::floatField* mutable_fieldsoffloat(int index);
  inline ::compact_soap::floatField* add_fieldsoffloat();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::floatField >&
      fieldsoffloat() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::floatField >*
      mutable_fieldsoffloat();
  
  // repeated .compact_soap.int32Field fieldsOfInt32 = 3;
  inline int fieldsofint32_size() const;
  inline void clear_fieldsofint32();
  static const int kFieldsOfInt32FieldNumber = 3;
  inline const ::compact_soap::int32Field& fieldsofint32(int index) const;
  inline ::compact_soap::int32Field* mutable_fieldsofint32(int index);
  inline ::compact_soap::int32Field* add_fieldsofint32();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::int32Field >&
      fieldsofint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::int32Field >*
      mutable_fieldsofint32();
  
  // repeated .compact_soap.int64Field fieldsOfInt64 = 4;
  inline int fieldsofint64_size() const;
  inline void clear_fieldsofint64();
  static const int kFieldsOfInt64FieldNumber = 4;
  inline const ::compact_soap::int64Field& fieldsofint64(int index) const;
  inline ::compact_soap::int64Field* mutable_fieldsofint64(int index);
  inline ::compact_soap::int64Field* add_fieldsofint64();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::int64Field >&
      fieldsofint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::int64Field >*
      mutable_fieldsofint64();
  
  // repeated .compact_soap.uint32Field fieldsOfUint32 = 5;
  inline int fieldsofuint32_size() const;
  inline void clear_fieldsofuint32();
  static const int kFieldsOfUint32FieldNumber = 5;
  inline const ::compact_soap::uint32Field& fieldsofuint32(int index) const;
  inline ::compact_soap::uint32Field* mutable_fieldsofuint32(int index);
  inline ::compact_soap::uint32Field* add_fieldsofuint32();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::uint32Field >&
      fieldsofuint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::uint32Field >*
      mutable_fieldsofuint32();
  
  // repeated .compact_soap.uint64Field fieldsOfUint64 = 6;
  inline int fieldsofuint64_size() const;
  inline void clear_fieldsofuint64();
  static const int kFieldsOfUint64FieldNumber = 6;
  inline const ::compact_soap::uint64Field& fieldsofuint64(int index) const;
  inline ::compact_soap::uint64Field* mutable_fieldsofuint64(int index);
  inline ::compact_soap::uint64Field* add_fieldsofuint64();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::uint64Field >&
      fieldsofuint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::uint64Field >*
      mutable_fieldsofuint64();
  
  // repeated .compact_soap.sint32Field fieldsOfSint32 = 7;
  inline int fieldsofsint32_size() const;
  inline void clear_fieldsofsint32();
  static const int kFieldsOfSint32FieldNumber = 7;
  inline const ::compact_soap::sint32Field& fieldsofsint32(int index) const;
  inline ::compact_soap::sint32Field* mutable_fieldsofsint32(int index);
  inline ::compact_soap::sint32Field* add_fieldsofsint32();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sint32Field >&
      fieldsofsint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sint32Field >*
      mutable_fieldsofsint32();
  
  // repeated .compact_soap.sint64Field fieldsOfSint64 = 8;
  inline int fieldsofsint64_size() const;
  inline void clear_fieldsofsint64();
  static const int kFieldsOfSint64FieldNumber = 8;
  inline const ::compact_soap::sint64Field& fieldsofsint64(int index) const;
  inline ::compact_soap::sint64Field* mutable_fieldsofsint64(int index);
  inline ::compact_soap::sint64Field* add_fieldsofsint64();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sint64Field >&
      fieldsofsint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sint64Field >*
      mutable_fieldsofsint64();
  
  // repeated .compact_soap.fixed32Field fieldsOfFixed32 = 9;
  inline int fieldsoffixed32_size() const;
  inline void clear_fieldsoffixed32();
  static const int kFieldsOfFixed32FieldNumber = 9;
  inline const ::compact_soap::fixed32Field& fieldsoffixed32(int index) const;
  inline ::compact_soap::fixed32Field* mutable_fieldsoffixed32(int index);
  inline ::compact_soap::fixed32Field* add_fieldsoffixed32();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed32Field >&
      fieldsoffixed32() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed32Field >*
      mutable_fieldsoffixed32();
  
  // repeated .compact_soap.fixed64Field fieldsOfFixed64 = 10;
  inline int fieldsoffixed64_size() const;
  inline void clear_fieldsoffixed64();
  static const int kFieldsOfFixed64FieldNumber = 10;
  inline const ::compact_soap::fixed64Field& fieldsoffixed64(int index) const;
  inline ::compact_soap::fixed64Field* mutable_fieldsoffixed64(int index);
  inline ::compact_soap::fixed64Field* add_fieldsoffixed64();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed64Field >&
      fieldsoffixed64() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed64Field >*
      mutable_fieldsoffixed64();
  
  // repeated .compact_soap.sfixed32Field fieldsOfSfixed32 = 11;
  inline int fieldsofsfixed32_size() const;
  inline void clear_fieldsofsfixed32();
  static const int kFieldsOfSfixed32FieldNumber = 11;
  inline const ::compact_soap::sfixed32Field& fieldsofsfixed32(int index) const;
  inline ::compact_soap::sfixed32Field* mutable_fieldsofsfixed32(int index);
  inline ::compact_soap::sfixed32Field* add_fieldsofsfixed32();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed32Field >&
      fieldsofsfixed32() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed32Field >*
      mutable_fieldsofsfixed32();
  
  // repeated .compact_soap.sfixed64Field fieldsOfSfixed64 = 12;
  inline int fieldsofsfixed64_size() const;
  inline void clear_fieldsofsfixed64();
  static const int kFieldsOfSfixed64FieldNumber = 12;
  inline const ::compact_soap::sfixed64Field& fieldsofsfixed64(int index) const;
  inline ::compact_soap::sfixed64Field* mutable_fieldsofsfixed64(int index);
  inline ::compact_soap::sfixed64Field* add_fieldsofsfixed64();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed64Field >&
      fieldsofsfixed64() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed64Field >*
      mutable_fieldsofsfixed64();
  
  // repeated .compact_soap.boolField fieldsOfBool = 13;
  inline int fieldsofbool_size() const;
  inline void clear_fieldsofbool();
  static const int kFieldsOfBoolFieldNumber = 13;
  inline const ::compact_soap::boolField& fieldsofbool(int index) const;
  inline ::compact_soap::boolField* mutable_fieldsofbool(int index);
  inline ::compact_soap::boolField* add_fieldsofbool();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::boolField >&
      fieldsofbool() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::boolField >*
      mutable_fieldsofbool();
  
  // repeated .compact_soap.stringField fieldsOfString = 14;
  inline int fieldsofstring_size() const;
  inline void clear_fieldsofstring();
  static const int kFieldsOfStringFieldNumber = 14;
  inline const ::compact_soap::stringField& fieldsofstring(int index) const;
  inline ::compact_soap::stringField* mutable_fieldsofstring(int index);
  inline ::compact_soap::stringField* add_fieldsofstring();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::stringField >&
      fieldsofstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::stringField >*
      mutable_fieldsofstring();
  
  // repeated .compact_soap.bytesField fieldsOfBytes = 15;
  inline int fieldsofbytes_size() const;
  inline void clear_fieldsofbytes();
  static const int kFieldsOfBytesFieldNumber = 15;
  inline const ::compact_soap::bytesField& fieldsofbytes(int index) const;
  inline ::compact_soap::bytesField* mutable_fieldsofbytes(int index);
  inline ::compact_soap::bytesField* add_fieldsofbytes();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::bytesField >&
      fieldsofbytes() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::bytesField >*
      mutable_fieldsofbytes();
  
  // repeated .compact_soap.structureField fieldsOfObjects = 16;
  inline int fieldsofobjects_size() const;
  inline void clear_fieldsofobjects();
  static const int kFieldsOfObjectsFieldNumber = 16;
  inline const ::compact_soap::structureField& fieldsofobjects(int index) const;
  inline ::compact_soap::structureField* mutable_fieldsofobjects(int index);
  inline ::compact_soap::structureField* add_fieldsofobjects();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::structureField >&
      fieldsofobjects() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::structureField >*
      mutable_fieldsofobjects();
  
  // @@protoc_insertion_point(class_scope:compact_soap.structure)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::compact_soap::doubleField > fieldsofdouble_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::floatField > fieldsoffloat_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::int32Field > fieldsofint32_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::int64Field > fieldsofint64_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::uint32Field > fieldsofuint32_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::uint64Field > fieldsofuint64_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::sint32Field > fieldsofsint32_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::sint64Field > fieldsofsint64_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed32Field > fieldsoffixed32_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed64Field > fieldsoffixed64_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed32Field > fieldsofsfixed32_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed64Field > fieldsofsfixed64_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::boolField > fieldsofbool_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::stringField > fieldsofstring_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::bytesField > fieldsofbytes_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::structureField > fieldsofobjects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fmessage_2eproto();
  friend void protobuf_AssignDesc_compact_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_compact_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static structure* default_instance_;
};
// ===================================================================


// ===================================================================

// doubleField

// optional string name = 1;
inline bool doubleField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void doubleField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void doubleField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void doubleField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& doubleField::name() const {
  return *name_;
}
inline void doubleField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void doubleField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void doubleField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* doubleField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* doubleField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double value = 2;
inline bool doubleField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void doubleField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void doubleField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void doubleField::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double doubleField::value() const {
  return value_;
}
inline void doubleField::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// floatField

// optional string name = 1;
inline bool floatField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void floatField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void floatField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void floatField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& floatField::name() const {
  return *name_;
}
inline void floatField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void floatField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void floatField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* floatField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* floatField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float value = 2;
inline bool floatField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void floatField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void floatField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void floatField::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float floatField::value() const {
  return value_;
}
inline void floatField::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// int32Field

// optional string name = 1;
inline bool int32Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void int32Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void int32Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void int32Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& int32Field::name() const {
  return *name_;
}
inline void int32Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void int32Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void int32Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* int32Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* int32Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 value = 2;
inline bool int32Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void int32Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void int32Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void int32Field::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 int32Field::value() const {
  return value_;
}
inline void int32Field::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// int64Field

// optional string name = 1;
inline bool int64Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void int64Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void int64Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void int64Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& int64Field::name() const {
  return *name_;
}
inline void int64Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void int64Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void int64Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* int64Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* int64Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 value = 2;
inline bool int64Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void int64Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void int64Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void int64Field::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 int64Field::value() const {
  return value_;
}
inline void int64Field::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// uint32Field

// optional string name = 1;
inline bool uint32Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uint32Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uint32Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uint32Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& uint32Field::name() const {
  return *name_;
}
inline void uint32Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void uint32Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void uint32Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* uint32Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* uint32Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 value = 2;
inline bool uint32Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uint32Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uint32Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uint32Field::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 uint32Field::value() const {
  return value_;
}
inline void uint32Field::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// uint64Field

// optional string name = 1;
inline bool uint64Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uint64Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uint64Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uint64Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& uint64Field::name() const {
  return *name_;
}
inline void uint64Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void uint64Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void uint64Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* uint64Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* uint64Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 value = 2;
inline bool uint64Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uint64Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uint64Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uint64Field::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 uint64Field::value() const {
  return value_;
}
inline void uint64Field::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// sint32Field

// optional string name = 1;
inline bool sint32Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sint32Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sint32Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sint32Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sint32Field::name() const {
  return *name_;
}
inline void sint32Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sint32Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sint32Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sint32Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sint32Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 value = 2;
inline bool sint32Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sint32Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sint32Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sint32Field::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 sint32Field::value() const {
  return value_;
}
inline void sint32Field::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// sint64Field

// optional string name = 1;
inline bool sint64Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sint64Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sint64Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sint64Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sint64Field::name() const {
  return *name_;
}
inline void sint64Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sint64Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sint64Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sint64Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sint64Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint64 value = 2;
inline bool sint64Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sint64Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sint64Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sint64Field::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 sint64Field::value() const {
  return value_;
}
inline void sint64Field::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// fixed32Field

// optional string name = 1;
inline bool fixed32Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fixed32Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fixed32Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fixed32Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& fixed32Field::name() const {
  return *name_;
}
inline void fixed32Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void fixed32Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void fixed32Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fixed32Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* fixed32Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed32 value = 2;
inline bool fixed32Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fixed32Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fixed32Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fixed32Field::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 fixed32Field::value() const {
  return value_;
}
inline void fixed32Field::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// fixed64Field

// optional string name = 1;
inline bool fixed64Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fixed64Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fixed64Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fixed64Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& fixed64Field::name() const {
  return *name_;
}
inline void fixed64Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void fixed64Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void fixed64Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* fixed64Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* fixed64Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed64 value = 2;
inline bool fixed64Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fixed64Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fixed64Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fixed64Field::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 fixed64Field::value() const {
  return value_;
}
inline void fixed64Field::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// sfixed32Field

// optional string name = 1;
inline bool sfixed32Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sfixed32Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sfixed32Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sfixed32Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sfixed32Field::name() const {
  return *name_;
}
inline void sfixed32Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sfixed32Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sfixed32Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sfixed32Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sfixed32Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sfixed32 value = 2;
inline bool sfixed32Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sfixed32Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sfixed32Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sfixed32Field::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 sfixed32Field::value() const {
  return value_;
}
inline void sfixed32Field::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// sfixed64Field

// optional string name = 1;
inline bool sfixed64Field::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sfixed64Field::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sfixed64Field::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sfixed64Field::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& sfixed64Field::name() const {
  return *name_;
}
inline void sfixed64Field::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sfixed64Field::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void sfixed64Field::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* sfixed64Field::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* sfixed64Field::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sfixed64 value = 2;
inline bool sfixed64Field::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sfixed64Field::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sfixed64Field::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sfixed64Field::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 sfixed64Field::value() const {
  return value_;
}
inline void sfixed64Field::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// boolField

// optional string name = 1;
inline bool boolField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void boolField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void boolField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void boolField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& boolField::name() const {
  return *name_;
}
inline void boolField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void boolField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void boolField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* boolField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* boolField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool value = 2;
inline bool boolField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void boolField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void boolField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void boolField::clear_value() {
  value_ = false;
  clear_has_value();
}
inline bool boolField::value() const {
  return value_;
}
inline void boolField::set_value(bool value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// stringField

// optional string name = 1;
inline bool stringField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stringField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stringField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stringField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stringField::name() const {
  return *name_;
}
inline void stringField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stringField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stringField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stringField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stringField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool stringField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stringField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stringField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stringField::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& stringField::value() const {
  return *value_;
}
inline void stringField::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void stringField::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void stringField::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stringField::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* stringField::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// bytesField

// optional string name = 1;
inline bool bytesField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bytesField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bytesField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bytesField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& bytesField::name() const {
  return *name_;
}
inline void bytesField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void bytesField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void bytesField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bytesField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* bytesField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes value = 2;
inline bool bytesField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bytesField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bytesField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bytesField::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& bytesField::value() const {
  return *value_;
}
inline void bytesField::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void bytesField::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void bytesField::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* bytesField::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* bytesField::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// structureField

// optional string name = 1;
inline bool structureField::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void structureField::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void structureField::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void structureField::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& structureField::name() const {
  return *name_;
}
inline void structureField::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void structureField::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void structureField::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* structureField::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* structureField::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .trentino::bindingsca::csoap.structure value = 2;
inline bool structureField::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void structureField::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void structureField::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void structureField::clear_value() {
  if (value_ != NULL) value_->::compact_soap::structure::Clear();
  clear_has_value();
}
inline const ::compact_soap::structure& structureField::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::compact_soap::structure* structureField::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::compact_soap::structure;
  return value_;
}
inline ::compact_soap::structure* structureField::release_value() {
  clear_has_value();
  ::compact_soap::structure* temp = value_;
  value_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// structure

// repeated .compact_soap.doubleField fieldsOfDouble = 1;
inline int structure::fieldsofdouble_size() const {
  return fieldsofdouble_.size();
}
inline void structure::clear_fieldsofdouble() {
  fieldsofdouble_.Clear();
}
inline const ::compact_soap::doubleField& structure::fieldsofdouble(int index) const {
  return fieldsofdouble_.Get(index);
}
inline ::compact_soap::doubleField* structure::mutable_fieldsofdouble(int index) {
  return fieldsofdouble_.Mutable(index);
}
inline ::compact_soap::doubleField* structure::add_fieldsofdouble() {
  return fieldsofdouble_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::doubleField >&
structure::fieldsofdouble() const {
  return fieldsofdouble_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::doubleField >*
structure::mutable_fieldsofdouble() {
  return &fieldsofdouble_;
}

// repeated .compact_soap.floatField fieldsOfFloat = 2;
inline int structure::fieldsoffloat_size() const {
  return fieldsoffloat_.size();
}
inline void structure::clear_fieldsoffloat() {
  fieldsoffloat_.Clear();
}
inline const ::compact_soap::floatField& structure::fieldsoffloat(int index) const {
  return fieldsoffloat_.Get(index);
}
inline ::compact_soap::floatField* structure::mutable_fieldsoffloat(int index) {
  return fieldsoffloat_.Mutable(index);
}
inline ::compact_soap::floatField* structure::add_fieldsoffloat() {
  return fieldsoffloat_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::floatField >&
structure::fieldsoffloat() const {
  return fieldsoffloat_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::floatField >*
structure::mutable_fieldsoffloat() {
  return &fieldsoffloat_;
}

// repeated .compact_soap.int32Field fieldsOfInt32 = 3;
inline int structure::fieldsofint32_size() const {
  return fieldsofint32_.size();
}
inline void structure::clear_fieldsofint32() {
  fieldsofint32_.Clear();
}
inline const ::compact_soap::int32Field& structure::fieldsofint32(int index) const {
  return fieldsofint32_.Get(index);
}
inline ::compact_soap::int32Field* structure::mutable_fieldsofint32(int index) {
  return fieldsofint32_.Mutable(index);
}
inline ::compact_soap::int32Field* structure::add_fieldsofint32() {
  return fieldsofint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::int32Field >&
structure::fieldsofint32() const {
  return fieldsofint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::int32Field >*
structure::mutable_fieldsofint32() {
  return &fieldsofint32_;
}

// repeated .compact_soap.int64Field fieldsOfInt64 = 4;
inline int structure::fieldsofint64_size() const {
  return fieldsofint64_.size();
}
inline void structure::clear_fieldsofint64() {
  fieldsofint64_.Clear();
}
inline const ::compact_soap::int64Field& structure::fieldsofint64(int index) const {
  return fieldsofint64_.Get(index);
}
inline ::compact_soap::int64Field* structure::mutable_fieldsofint64(int index) {
  return fieldsofint64_.Mutable(index);
}
inline ::compact_soap::int64Field* structure::add_fieldsofint64() {
  return fieldsofint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::int64Field >&
structure::fieldsofint64() const {
  return fieldsofint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::int64Field >*
structure::mutable_fieldsofint64() {
  return &fieldsofint64_;
}

// repeated .compact_soap.uint32Field fieldsOfUint32 = 5;
inline int structure::fieldsofuint32_size() const {
  return fieldsofuint32_.size();
}
inline void structure::clear_fieldsofuint32() {
  fieldsofuint32_.Clear();
}
inline const ::compact_soap::uint32Field& structure::fieldsofuint32(int index) const {
  return fieldsofuint32_.Get(index);
}
inline ::compact_soap::uint32Field* structure::mutable_fieldsofuint32(int index) {
  return fieldsofuint32_.Mutable(index);
}
inline ::compact_soap::uint32Field* structure::add_fieldsofuint32() {
  return fieldsofuint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::uint32Field >&
structure::fieldsofuint32() const {
  return fieldsofuint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::uint32Field >*
structure::mutable_fieldsofuint32() {
  return &fieldsofuint32_;
}

// repeated .compact_soap.uint64Field fieldsOfUint64 = 6;
inline int structure::fieldsofuint64_size() const {
  return fieldsofuint64_.size();
}
inline void structure::clear_fieldsofuint64() {
  fieldsofuint64_.Clear();
}
inline const ::compact_soap::uint64Field& structure::fieldsofuint64(int index) const {
  return fieldsofuint64_.Get(index);
}
inline ::compact_soap::uint64Field* structure::mutable_fieldsofuint64(int index) {
  return fieldsofuint64_.Mutable(index);
}
inline ::compact_soap::uint64Field* structure::add_fieldsofuint64() {
  return fieldsofuint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::uint64Field >&
structure::fieldsofuint64() const {
  return fieldsofuint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::uint64Field >*
structure::mutable_fieldsofuint64() {
  return &fieldsofuint64_;
}

// repeated .compact_soap.sint32Field fieldsOfSint32 = 7;
inline int structure::fieldsofsint32_size() const {
  return fieldsofsint32_.size();
}
inline void structure::clear_fieldsofsint32() {
  fieldsofsint32_.Clear();
}
inline const ::compact_soap::sint32Field& structure::fieldsofsint32(int index) const {
  return fieldsofsint32_.Get(index);
}
inline ::compact_soap::sint32Field* structure::mutable_fieldsofsint32(int index) {
  return fieldsofsint32_.Mutable(index);
}
inline ::compact_soap::sint32Field* structure::add_fieldsofsint32() {
  return fieldsofsint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sint32Field >&
structure::fieldsofsint32() const {
  return fieldsofsint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sint32Field >*
structure::mutable_fieldsofsint32() {
  return &fieldsofsint32_;
}

// repeated .compact_soap.sint64Field fieldsOfSint64 = 8;
inline int structure::fieldsofsint64_size() const {
  return fieldsofsint64_.size();
}
inline void structure::clear_fieldsofsint64() {
  fieldsofsint64_.Clear();
}
inline const ::compact_soap::sint64Field& structure::fieldsofsint64(int index) const {
  return fieldsofsint64_.Get(index);
}
inline ::compact_soap::sint64Field* structure::mutable_fieldsofsint64(int index) {
  return fieldsofsint64_.Mutable(index);
}
inline ::compact_soap::sint64Field* structure::add_fieldsofsint64() {
  return fieldsofsint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sint64Field >&
structure::fieldsofsint64() const {
  return fieldsofsint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sint64Field >*
structure::mutable_fieldsofsint64() {
  return &fieldsofsint64_;
}

// repeated .compact_soap.fixed32Field fieldsOfFixed32 = 9;
inline int structure::fieldsoffixed32_size() const {
  return fieldsoffixed32_.size();
}
inline void structure::clear_fieldsoffixed32() {
  fieldsoffixed32_.Clear();
}
inline const ::compact_soap::fixed32Field& structure::fieldsoffixed32(int index) const {
  return fieldsoffixed32_.Get(index);
}
inline ::compact_soap::fixed32Field* structure::mutable_fieldsoffixed32(int index) {
  return fieldsoffixed32_.Mutable(index);
}
inline ::compact_soap::fixed32Field* structure::add_fieldsoffixed32() {
  return fieldsoffixed32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed32Field >&
structure::fieldsoffixed32() const {
  return fieldsoffixed32_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed32Field >*
structure::mutable_fieldsoffixed32() {
  return &fieldsoffixed32_;
}

// repeated .compact_soap.fixed64Field fieldsOfFixed64 = 10;
inline int structure::fieldsoffixed64_size() const {
  return fieldsoffixed64_.size();
}
inline void structure::clear_fieldsoffixed64() {
  fieldsoffixed64_.Clear();
}
inline const ::compact_soap::fixed64Field& structure::fieldsoffixed64(int index) const {
  return fieldsoffixed64_.Get(index);
}
inline ::compact_soap::fixed64Field* structure::mutable_fieldsoffixed64(int index) {
  return fieldsoffixed64_.Mutable(index);
}
inline ::compact_soap::fixed64Field* structure::add_fieldsoffixed64() {
  return fieldsoffixed64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed64Field >&
structure::fieldsoffixed64() const {
  return fieldsoffixed64_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::fixed64Field >*
structure::mutable_fieldsoffixed64() {
  return &fieldsoffixed64_;
}

// repeated .compact_soap.sfixed32Field fieldsOfSfixed32 = 11;
inline int structure::fieldsofsfixed32_size() const {
  return fieldsofsfixed32_.size();
}
inline void structure::clear_fieldsofsfixed32() {
  fieldsofsfixed32_.Clear();
}
inline const ::compact_soap::sfixed32Field& structure::fieldsofsfixed32(int index) const {
  return fieldsofsfixed32_.Get(index);
}
inline ::compact_soap::sfixed32Field* structure::mutable_fieldsofsfixed32(int index) {
  return fieldsofsfixed32_.Mutable(index);
}
inline ::compact_soap::sfixed32Field* structure::add_fieldsofsfixed32() {
  return fieldsofsfixed32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed32Field >&
structure::fieldsofsfixed32() const {
  return fieldsofsfixed32_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed32Field >*
structure::mutable_fieldsofsfixed32() {
  return &fieldsofsfixed32_;
}

// repeated .compact_soap.sfixed64Field fieldsOfSfixed64 = 12;
inline int structure::fieldsofsfixed64_size() const {
  return fieldsofsfixed64_.size();
}
inline void structure::clear_fieldsofsfixed64() {
  fieldsofsfixed64_.Clear();
}
inline const ::compact_soap::sfixed64Field& structure::fieldsofsfixed64(int index) const {
  return fieldsofsfixed64_.Get(index);
}
inline ::compact_soap::sfixed64Field* structure::mutable_fieldsofsfixed64(int index) {
  return fieldsofsfixed64_.Mutable(index);
}
inline ::compact_soap::sfixed64Field* structure::add_fieldsofsfixed64() {
  return fieldsofsfixed64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed64Field >&
structure::fieldsofsfixed64() const {
  return fieldsofsfixed64_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::sfixed64Field >*
structure::mutable_fieldsofsfixed64() {
  return &fieldsofsfixed64_;
}

// repeated .compact_soap.boolField fieldsOfBool = 13;
inline int structure::fieldsofbool_size() const {
  return fieldsofbool_.size();
}
inline void structure::clear_fieldsofbool() {
  fieldsofbool_.Clear();
}
inline const ::compact_soap::boolField& structure::fieldsofbool(int index) const {
  return fieldsofbool_.Get(index);
}
inline ::compact_soap::boolField* structure::mutable_fieldsofbool(int index) {
  return fieldsofbool_.Mutable(index);
}
inline ::compact_soap::boolField* structure::add_fieldsofbool() {
  return fieldsofbool_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::boolField >&
structure::fieldsofbool() const {
  return fieldsofbool_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::boolField >*
structure::mutable_fieldsofbool() {
  return &fieldsofbool_;
}

// repeated .compact_soap.stringField fieldsOfString = 14;
inline int structure::fieldsofstring_size() const {
  return fieldsofstring_.size();
}
inline void structure::clear_fieldsofstring() {
  fieldsofstring_.Clear();
}
inline const ::compact_soap::stringField& structure::fieldsofstring(int index) const {
  return fieldsofstring_.Get(index);
}
inline ::compact_soap::stringField* structure::mutable_fieldsofstring(int index) {
  return fieldsofstring_.Mutable(index);
}
inline ::compact_soap::stringField* structure::add_fieldsofstring() {
  return fieldsofstring_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::stringField >&
structure::fieldsofstring() const {
  return fieldsofstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::stringField >*
structure::mutable_fieldsofstring() {
  return &fieldsofstring_;
}

// repeated .compact_soap.bytesField fieldsOfBytes = 15;
inline int structure::fieldsofbytes_size() const {
  return fieldsofbytes_.size();
}
inline void structure::clear_fieldsofbytes() {
  fieldsofbytes_.Clear();
}
inline const ::compact_soap::bytesField& structure::fieldsofbytes(int index) const {
  return fieldsofbytes_.Get(index);
}
inline ::compact_soap::bytesField* structure::mutable_fieldsofbytes(int index) {
  return fieldsofbytes_.Mutable(index);
}
inline ::compact_soap::bytesField* structure::add_fieldsofbytes() {
  return fieldsofbytes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::bytesField >&
structure::fieldsofbytes() const {
  return fieldsofbytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::bytesField >*
structure::mutable_fieldsofbytes() {
  return &fieldsofbytes_;
}

// repeated .compact_soap.structureField fieldsOfObjects = 16;
inline int structure::fieldsofobjects_size() const {
  return fieldsofobjects_.size();
}
inline void structure::clear_fieldsofobjects() {
  fieldsofobjects_.Clear();
}
inline const ::compact_soap::structureField& structure::fieldsofobjects(int index) const {
  return fieldsofobjects_.Get(index);
}
inline ::compact_soap::structureField* structure::mutable_fieldsofobjects(int index) {
  return fieldsofobjects_.Mutable(index);
}
inline ::compact_soap::structureField* structure::add_fieldsofobjects() {
  return fieldsofobjects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::structureField >&
structure::fieldsofobjects() const {
  return fieldsofobjects_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::structureField >*
structure::mutable_fieldsofobjects() {
  return &fieldsofobjects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compact_soap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_compact_5fmessage_2eproto__INCLUDED
