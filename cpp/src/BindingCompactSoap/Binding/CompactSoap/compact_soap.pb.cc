// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compact_soap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace trentino {
namespace bindingsca {
namespace csoap {

void protobuf_ShutdownFile_compact_5fsoap_2eproto() {
  delete Soap::default_instance_;
  delete Soap_Header::default_instance_;
  delete Soap_Body::default_instance_;
  delete Soap_Fault::default_instance_;
  delete Soap_faultreason::default_instance_;
  delete Soap_faultcode::default_instance_;
  delete Soap_subcode::default_instance_;
  delete Soap_Envelope::default_instance_;
}

void protobuf_AddDesc_compact_5fsoap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::trentino::bindingsca::csoap::protobuf_AddDesc_ws_5faddressing_2eproto();
  Soap::default_instance_ = new Soap();
  Soap_Header::default_instance_ = new Soap_Header();
  Soap_Body::default_instance_ = new Soap_Body();
  Soap_Fault::default_instance_ = new Soap_Fault();
  Soap_faultreason::default_instance_ = new Soap_faultreason();
  Soap_faultcode::default_instance_ = new Soap_faultcode();
  Soap_subcode::default_instance_ = new Soap_subcode();
  Soap_Envelope::default_instance_ = new Soap_Envelope();
  Soap::default_instance_->InitAsDefaultInstance();
  Soap_Header::default_instance_->InitAsDefaultInstance();
  Soap_Body::default_instance_->InitAsDefaultInstance();
  Soap_Fault::default_instance_->InitAsDefaultInstance();
  Soap_faultreason::default_instance_->InitAsDefaultInstance();
  Soap_faultcode::default_instance_->InitAsDefaultInstance();
  Soap_subcode::default_instance_->InitAsDefaultInstance();
  Soap_Envelope::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compact_5fsoap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compact_5fsoap_2eproto {
  StaticDescriptorInitializer_compact_5fsoap_2eproto() {
    protobuf_AddDesc_compact_5fsoap_2eproto();
  }
} static_descriptor_initializer_compact_5fsoap_2eproto_;


// ===================================================================

bool Soap_faultcodeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Soap_faultcodeEnum Soap::DataEncodingUnknown;
const Soap_faultcodeEnum Soap::MustUnderstand;
const Soap_faultcodeEnum Soap::Receiver;
const Soap_faultcodeEnum Soap::Sender;
const Soap_faultcodeEnum Soap::VersionMismatch;
const Soap_faultcodeEnum Soap::faultcodeEnum_MIN;
const Soap_faultcodeEnum Soap::faultcodeEnum_MAX;
const int Soap::faultcodeEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Soap_Header::kAddressingFieldNumber;
#endif  // !_MSC_VER

Soap_Header::Soap_Header()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_Header::InitAsDefaultInstance() {
  addressing_ = const_cast< ::trentino::bindingsca::csoap::Addressing*>(&::trentino::bindingsca::csoap::Addressing::default_instance());
}

Soap_Header::Soap_Header(const Soap_Header& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Header::SharedCtor() {
  _cached_size_ = 0;
  addressing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Header::~Soap_Header() {
  SharedDtor();
}

void Soap_Header::SharedDtor() {
  if (this != default_instance_) {
    delete addressing_;
  }
}

void Soap_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_Header& Soap_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Header* Soap_Header::default_instance_ = NULL;

Soap_Header* Soap_Header::New() const {
  return new Soap_Header;
}

void Soap_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addressing()) {
      if (addressing_ != NULL) addressing_->::trentino::bindingsca::csoap::Addressing::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trentino.bindingsca.csoap.Addressing addressing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addressing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .trentino.bindingsca.csoap.Addressing addressing = 1;
  if (has_addressing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->addressing(), output);
  }
  
}

int Soap_Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .trentino.bindingsca.csoap.Addressing addressing = 1;
    if (has_addressing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addressing());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Header::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_Header*>(&from));
}

void Soap_Header::MergeFrom(const Soap_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addressing()) {
      mutable_addressing()->::trentino::bindingsca::csoap::Addressing::MergeFrom(from.addressing());
    }
  }
}

void Soap_Header::CopyFrom(const Soap_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Header::IsInitialized() const {
  
  return true;
}

void Soap_Header::Swap(Soap_Header* other) {
  if (other != this) {
    std::swap(addressing_, other->addressing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_Header::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.Header";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_Body::kFaultMessageFieldNumber;
const int Soap_Body::kContentFieldNumber;
#endif  // !_MSC_VER

Soap_Body::Soap_Body()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_Body::InitAsDefaultInstance() {
  faultmessage_ = const_cast< ::trentino::bindingsca::csoap::Soap_Fault*>(&::trentino::bindingsca::csoap::Soap_Fault::default_instance());
}

Soap_Body::Soap_Body(const Soap_Body& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Body::SharedCtor() {
  _cached_size_ = 0;
  faultmessage_ = NULL;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Body::~Soap_Body() {
  SharedDtor();
}

void Soap_Body::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete faultmessage_;
  }
}

void Soap_Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_Body& Soap_Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Body* Soap_Body::default_instance_ = NULL;

Soap_Body* Soap_Body::New() const {
  return new Soap_Body;
}

void Soap_Body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_faultmessage()) {
      if (faultmessage_ != NULL) faultmessage_->::trentino::bindingsca::csoap::Soap_Fault::Clear();
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trentino.bindingsca.csoap.Soap.Fault faultMessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faultmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .trentino.bindingsca.csoap.Soap.Fault faultMessage = 1;
  if (has_faultmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->faultmessage(), output);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }
  
}

int Soap_Body::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .trentino.bindingsca.csoap.Soap.Fault faultMessage = 1;
    if (has_faultmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faultmessage());
    }
    
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Body::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_Body*>(&from));
}

void Soap_Body::MergeFrom(const Soap_Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faultmessage()) {
      mutable_faultmessage()->::trentino::bindingsca::csoap::Soap_Fault::MergeFrom(from.faultmessage());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void Soap_Body::CopyFrom(const Soap_Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Body::IsInitialized() const {
  
  return true;
}

void Soap_Body::Swap(Soap_Body* other) {
  if (other != this) {
    std::swap(faultmessage_, other->faultmessage_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_Body::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.Body";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_Fault::kCodeFieldNumber;
const int Soap_Fault::kReasonFieldNumber;
const int Soap_Fault::kNodeFieldNumber;
const int Soap_Fault::kRoleFieldNumber;
const int Soap_Fault::kDetailFieldNumber;
#endif  // !_MSC_VER

Soap_Fault::Soap_Fault()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_Fault::InitAsDefaultInstance() {
  code_ = const_cast< ::trentino::bindingsca::csoap::Soap_faultcode*>(&::trentino::bindingsca::csoap::Soap_faultcode::default_instance());
  reason_ = const_cast< ::trentino::bindingsca::csoap::Soap_faultreason*>(&::trentino::bindingsca::csoap::Soap_faultreason::default_instance());
}

Soap_Fault::Soap_Fault(const Soap_Fault& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Fault::SharedCtor() {
  _cached_size_ = 0;
  code_ = NULL;
  reason_ = NULL;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Fault::~Soap_Fault() {
  SharedDtor();
}

void Soap_Fault::SharedDtor() {
  if (node_ != &::google::protobuf::internal::kEmptyString) {
    delete node_;
  }
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_;
  }
  if (this != default_instance_) {
    delete code_;
    delete reason_;
  }
}

void Soap_Fault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_Fault& Soap_Fault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Fault* Soap_Fault::default_instance_ = NULL;

Soap_Fault* Soap_Fault::New() const {
  return new Soap_Fault;
}

void Soap_Fault::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != NULL) code_->::trentino::bindingsca::csoap::Soap_faultcode::Clear();
    }
    if (has_reason()) {
      if (reason_ != NULL) reason_->::trentino::bindingsca::csoap::Soap_faultreason::Clear();
    }
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::kEmptyString) {
        node_->clear();
      }
    }
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
    if (has_detail()) {
      if (detail_ != &::google::protobuf::internal::kEmptyString) {
        detail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_Fault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trentino.bindingsca.csoap.Soap.faultcode Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Reason;
        break;
      }
      
      // optional .trentino.bindingsca.csoap.Soap.faultreason Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Node;
        break;
      }
      
      // optional string Node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Role;
        break;
      }
      
      // optional string Role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Detail;
        break;
      }
      
      // optional bytes Detail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Fault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .trentino.bindingsca.csoap.Soap.faultcode Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->code(), output);
  }
  
  // optional .trentino.bindingsca.csoap.Soap.faultreason Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->reason(), output);
  }
  
  // optional string Node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->node(), output);
  }
  
  // optional string Role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role(), output);
  }
  
  // optional bytes Detail = 5;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->detail(), output);
  }
  
}

int Soap_Fault::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .trentino.bindingsca.csoap.Soap.faultcode Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->code());
    }
    
    // optional .trentino.bindingsca.csoap.Soap.faultreason Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }
    
    // optional string Node = 3;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
    }
    
    // optional string Role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }
    
    // optional bytes Detail = 5;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detail());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Fault::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_Fault*>(&from));
}

void Soap_Fault::MergeFrom(const Soap_Fault& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      mutable_code()->::trentino::bindingsca::csoap::Soap_faultcode::MergeFrom(from.code());
    }
    if (from.has_reason()) {
      mutable_reason()->::trentino::bindingsca::csoap::Soap_faultreason::MergeFrom(from.reason());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_detail()) {
      set_detail(from.detail());
    }
  }
}

void Soap_Fault::CopyFrom(const Soap_Fault& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Fault::IsInitialized() const {
  
  return true;
}

void Soap_Fault::Swap(Soap_Fault* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(reason_, other->reason_);
    std::swap(node_, other->node_);
    std::swap(role_, other->role_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_Fault::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.Fault";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_faultreason::kTextFieldNumber;
#endif  // !_MSC_VER

Soap_faultreason::Soap_faultreason()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_faultreason::InitAsDefaultInstance() {
}

Soap_faultreason::Soap_faultreason(const Soap_faultreason& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_faultreason::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_faultreason::~Soap_faultreason() {
  SharedDtor();
}

void Soap_faultreason::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Soap_faultreason::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_faultreason& Soap_faultreason::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_faultreason* Soap_faultreason::default_instance_ = NULL;

Soap_faultreason* Soap_faultreason::New() const {
  return new Soap_faultreason;
}

void Soap_faultreason::Clear() {
  text_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_faultreason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Text;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_faultreason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Text = 1;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(i), output);
  }
  
}

int Soap_faultreason::ByteSize() const {
  int total_size = 0;
  
  // repeated string Text = 1;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_faultreason::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_faultreason*>(&from));
}

void Soap_faultreason::MergeFrom(const Soap_faultreason& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_.MergeFrom(from.text_);
}

void Soap_faultreason::CopyFrom(const Soap_faultreason& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_faultreason::IsInitialized() const {
  
  return true;
}

void Soap_faultreason::Swap(Soap_faultreason* other) {
  if (other != this) {
    text_.Swap(&other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_faultreason::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.faultreason";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_faultcode::kValueFieldNumber;
const int Soap_faultcode::kSubcodeFieldNumber;
#endif  // !_MSC_VER

Soap_faultcode::Soap_faultcode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_faultcode::InitAsDefaultInstance() {
  subcode_ = const_cast< ::trentino::bindingsca::csoap::Soap_subcode*>(&::trentino::bindingsca::csoap::Soap_subcode::default_instance());
}

Soap_faultcode::Soap_faultcode(const Soap_faultcode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_faultcode::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  subcode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_faultcode::~Soap_faultcode() {
  SharedDtor();
}

void Soap_faultcode::SharedDtor() {
  if (this != default_instance_) {
    delete subcode_;
  }
}

void Soap_faultcode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_faultcode& Soap_faultcode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_faultcode* Soap_faultcode::default_instance_ = NULL;

Soap_faultcode* Soap_faultcode::New() const {
  return new Soap_faultcode;
}

void Soap_faultcode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    if (has_subcode()) {
      if (subcode_ != NULL) subcode_->::trentino::bindingsca::csoap::Soap_subcode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_faultcode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trentino.bindingsca.csoap.Soap.faultcodeEnum Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::trentino::bindingsca::csoap::Soap_faultcodeEnum_IsValid(value)) {
            set_value(static_cast< ::trentino::bindingsca::csoap::Soap_faultcodeEnum >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Subcode;
        break;
      }
      
      // optional .trentino.bindingsca.csoap.Soap.subcode Subcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Subcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_faultcode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .trentino.bindingsca.csoap.Soap.faultcodeEnum Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }
  
  // optional .trentino.bindingsca.csoap.Soap.subcode Subcode = 2;
  if (has_subcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->subcode(), output);
  }
  
}

int Soap_faultcode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .trentino.bindingsca.csoap.Soap.faultcodeEnum Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }
    
    // optional .trentino.bindingsca.csoap.Soap.subcode Subcode = 2;
    if (has_subcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_faultcode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_faultcode*>(&from));
}

void Soap_faultcode::MergeFrom(const Soap_faultcode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subcode()) {
      mutable_subcode()->::trentino::bindingsca::csoap::Soap_subcode::MergeFrom(from.subcode());
    }
  }
}

void Soap_faultcode::CopyFrom(const Soap_faultcode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_faultcode::IsInitialized() const {
  
  return true;
}

void Soap_faultcode::Swap(Soap_faultcode* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(subcode_, other->subcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_faultcode::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.faultcode";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_subcode::kValueFieldNumber;
const int Soap_subcode::kSubcodeFieldNumber;
#endif  // !_MSC_VER

Soap_subcode::Soap_subcode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_subcode::InitAsDefaultInstance() {
  subcode_ = const_cast< ::trentino::bindingsca::csoap::Soap_subcode*>(&::trentino::bindingsca::csoap::Soap_subcode::default_instance());
}

Soap_subcode::Soap_subcode(const Soap_subcode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_subcode::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subcode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_subcode::~Soap_subcode() {
  SharedDtor();
}

void Soap_subcode::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete subcode_;
  }
}

void Soap_subcode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_subcode& Soap_subcode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_subcode* Soap_subcode::default_instance_ = NULL;

Soap_subcode* Soap_subcode::New() const {
  return new Soap_subcode;
}

void Soap_subcode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_subcode()) {
      if (subcode_ != NULL) subcode_->::trentino::bindingsca::csoap::Soap_subcode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_subcode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Subcode;
        break;
      }
      
      // optional .trentino.bindingsca.csoap.Soap.subcode Subcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Subcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_subcode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  // optional .trentino.bindingsca.csoap.Soap.subcode Subcode = 2;
  if (has_subcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->subcode(), output);
  }
  
}

int Soap_subcode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional .trentino.bindingsca.csoap.Soap.subcode Subcode = 2;
    if (has_subcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcode());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_subcode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_subcode*>(&from));
}

void Soap_subcode::MergeFrom(const Soap_subcode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subcode()) {
      mutable_subcode()->::trentino::bindingsca::csoap::Soap_subcode::MergeFrom(from.subcode());
    }
  }
}

void Soap_subcode::CopyFrom(const Soap_subcode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_subcode::IsInitialized() const {
  
  return true;
}

void Soap_subcode::Swap(Soap_subcode* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(subcode_, other->subcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_subcode::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.subcode";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_Envelope::kHeaderFieldNumber;
const int Soap_Envelope::kBodyFieldNumber;
#endif  // !_MSC_VER

Soap_Envelope::Soap_Envelope()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap_Envelope::InitAsDefaultInstance() {
  header_ = const_cast< ::trentino::bindingsca::csoap::Soap_Header*>(&::trentino::bindingsca::csoap::Soap_Header::default_instance());
  body_ = const_cast< ::trentino::bindingsca::csoap::Soap_Body*>(&::trentino::bindingsca::csoap::Soap_Body::default_instance());
}

Soap_Envelope::Soap_Envelope(const Soap_Envelope& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Envelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Envelope::~Soap_Envelope() {
  SharedDtor();
}

void Soap_Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Soap_Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap_Envelope& Soap_Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Envelope* Soap_Envelope::default_instance_ = NULL;

Soap_Envelope* Soap_Envelope::New() const {
  return new Soap_Envelope;
}

void Soap_Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::trentino::bindingsca::csoap::Soap_Header::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::trentino::bindingsca::csoap::Soap_Body::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap_Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .trentino.bindingsca.csoap.Soap.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }
      
      // optional .trentino.bindingsca.csoap.Soap.Body body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .trentino.bindingsca.csoap.Soap.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->header(), output);
  }
  
  // optional .trentino.bindingsca.csoap.Soap.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->body(), output);
  }
  
}

int Soap_Envelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .trentino.bindingsca.csoap.Soap.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional .trentino.bindingsca.csoap.Soap.Body body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Envelope::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap_Envelope*>(&from));
}

void Soap_Envelope::MergeFrom(const Soap_Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::trentino::bindingsca::csoap::Soap_Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::trentino::bindingsca::csoap::Soap_Body::MergeFrom(from.body());
    }
  }
}

void Soap_Envelope::CopyFrom(const Soap_Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Envelope::IsInitialized() const {
  
  return true;
}

void Soap_Envelope::Swap(Soap_Envelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap_Envelope::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap.Envelope";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap::kEnvelopeFieldNumber;
#endif  // !_MSC_VER

Soap::Soap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Soap::InitAsDefaultInstance() {
  envelope_ = const_cast< ::trentino::bindingsca::csoap::Soap_Envelope*>(&::trentino::bindingsca::csoap::Soap_Envelope::default_instance());
}

Soap::Soap(const Soap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Soap::SharedCtor() {
  _cached_size_ = 0;
  envelope_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap::~Soap() {
  SharedDtor();
}

void Soap::SharedDtor() {
  if (this != default_instance_) {
    delete envelope_;
  }
}

void Soap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Soap& Soap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap* Soap::default_instance_ = NULL;

Soap* Soap::New() const {
  return new Soap;
}

void Soap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_envelope()) {
      if (envelope_ != NULL) envelope_->::trentino::bindingsca::csoap::Soap_Envelope::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Soap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .trentino.bindingsca.csoap.Soap.Envelope envelope = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_envelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .trentino.bindingsca.csoap.Soap.Envelope envelope = 1;
  if (has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->envelope(), output);
  }
  
}

int Soap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .trentino.bindingsca.csoap.Soap.Envelope envelope = 1;
    if (has_envelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->envelope());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Soap*>(&from));
}

void Soap::MergeFrom(const Soap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_envelope()) {
      mutable_envelope()->::trentino::bindingsca::csoap::Soap_Envelope::MergeFrom(from.envelope());
    }
  }
}

void Soap::CopyFrom(const Soap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Soap::Swap(Soap* other) {
  if (other != this) {
    std::swap(envelope_, other->envelope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Soap::GetTypeName() const {
  return "trentino.bindingsca.csoap.Soap";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace csoap
}  // namespace bindingsca
}  // namespace trentino

// @@protoc_insertion_point(global_scope)
