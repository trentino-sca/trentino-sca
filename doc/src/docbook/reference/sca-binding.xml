<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "docbook.dtd">
<chapter>
	<title>Trentino default (SCA) Binding tutorial</title>
<section>
<title>Overview</title>
<para>
In this 10m minutes, we want to create a Hello World remote application and deploy it on two Trentino runtimes. The first runtime is a server and the second a client. On the Server, a contribution is deployed that implement the Helloworld Service.
The overall deployment diagram of our system is described in the following picture.
<mediaobject>
  <imageobject>
    <imagedata contentwidth="15cm" scalefit="1" fileref="images/helloworld_assembly_diagram.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Assembly diagram of Helloworld remote</phrase>
  </textobject>
  <caption>
   <para>Assembly diagram of Helloworld remote
</para>
  </caption>
</mediaobject>
</para>
</section>
<section>
<title>Create the Helloworld server application</title>

<section>
<title>Download all necessary files and setup development environment</title>
<para>
Download and install the Trentino runtime as described in the Trentino Getting Started guide. It includes all the necessary binaries for developing a remote application.
Now create a folder called HelloWorldRemote_Source.
At the end of this section, we will end up with the following file structure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="15cm" scalefit="1" fileref="images/folder_strcuture_helloword_source.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Client folder structure</phrase>
  </textobject>
  <caption>
   <para>Client folder structure
</para>
  </caption>
</mediaobject>
Since the application developed in this tutorial is platform independent, we will use Cmake as cross platform build tool. And therefore we need to define a CMakeList.txt file describing our project.
Create a file named CMakeList.txt and paste the following code into that file:
<programlisting language="cmake" width="15cm" >
cmake_minimum_required(VERSION 2.6)
project(HelloWorldRemote)

set(PNAME HelloWorldRemote)
##############################################################################
# 									MACROS									 #
##############################################################################

#----------------------------------
# MY_LINK_THIRD_PARTY_LIBRARIES 
#----------------------------------
#The libs to be linked to are expected to be passed as additional arguments after 'target'.
#This arguments have to be uncomplete variable names representing the libs
#The macro will append '_DEBUG' respectively '_RELEASE' to the passed arguments
#in order to produce real variable names that are expected to contain the real lib names.
#EXAMPLE: 
#The call MY_LINK_THIRD_PARTY_LIBRARIES(main Boost_FILESYSTEM_LIBRARY) expects the variables
#'Boost_FILESYSTEM_LIBRARY_DEBUG' (if build type is debug) respectively 
#'Boost_FILESYSTEM_LIBRARY_RELEASE' (if build type is release) to be defined
#----------------------------
macro(MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET installDir)
if (WIN32)
	set(GEN_INSTALL_COMMAND msbuild INSTALL.vcxproj)
else()
	set(GEN_INSTALL_COMMAND make install)
endif()
add_custom_target([Trengen_Validate_Generate_Install] 
COMMAND Trengen	-cont ${installDir}
#create a build folder for the generated code
COMMAND ${CMAKE_COMMAND} -E make_directory ${installDir}Gen_Build
#build the project using cmake
COMMAND ${CMAKE_COMMAND} -E chdir ${installDir}Gen_Build cmake ../${installDir}Gen
#now install the application: on windows, call msbuild on linux call make
COMMAND ${CMAKE_COMMAND} -E chdir ${installDir}Gen_Build ${GEN_INSTALL_COMMAND}
WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/../
VERBATIM
)	
endmacro(MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET)



set (TRENTINO_RUNTIME_DIR $ENV{TRENTINO_HOME})
set (DEFAULT_INSTALL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set (CMAKE_INSTALL_PREFIX ${DEFAULT_INSTALL_PATH} CACHE STRING "Install path" FORCE)
endif()

##############################################################################
# 								COMPILER OPTIONS  							 #
##############################################################################
if(MSVC)
	add_definitions(-DUNICODE -D_UNICODE)
	add_definitions(/W4)
else()
	add_definitions(-Wall -pedantic)
endif()

##############################################################################
# 							   OUTPUT CONFIGURATION						     #
##############################################################################
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})



set(SCAAPI_INCLUDE_DIRS ${TRENTINO_RUNTIME_DIR}/include)
set(BOOST_INCLUDE_DIRS ${TRENTINO_RUNTIME_DIR}/include)
#source and header files
FILE (GLOB ${PNAME}_HEADER_FILES *.h *.inl
	  services/*.h services/*.inl)

FILE (GLOB ${PNAME}_SCA_FILES *.xml  *.componentType META-INF/*.xml META-INF/*.composite)
FILE (GLOB ${PNAME}_BINDING_SCA_FILES *.tidl.properties *.java)

FILE (GLOB ${PNAME}_SCA_COMPONENT_TYPES *.componentType )
FILE (GLOB ${PNAME}_SOURCE_FILES *.cpp services/*.cpp)
SET(${PNAME}_SCA_FILES ${${PNAME}_SCA_FILES} ${${PNAME}_SCA_COMPONENT_TYPES})
FILE(GLOB ${PNAME}_EXPORTED_HEADERS *.h *.inl)  
#libs
set( ${PNAME}_THIRD_PARTY_LIBS 
     )
	 
set( ${PNAME}_CUSTOM_LIBS 
     )
	 
set( ${PNAME}_SOURCE_FILES ${${PNAME}_SOURCE_FILES}
						  ${${PNAME}_HEADER_FILES} ${${PNAME}_SCA_FILES})

if (WIN32)
	add_definitions(-DHELLOWORLDREMOTE_EXPORTS)
endif()

if(MSVC_IDE)
	source_group("SCA Files" FILES ${${PNAME}_SCA_FILES})
endif()

include_directories(${SCAAPI_INCLUDE_DIRS} ${BOOST_INCLUDE_DIRS})

add_library(${PNAME} SHARED ${${PNAME}_SOURCE_FILES})
set(${PNAME}_INSTALL_DIR ${PNAME})
set_target_properties(${PNAME} PROPERTIES OUTPUT_NAME ${PNAME})
install(TARGETS ${PNAME} RUNTIME DESTINATION ${${PNAME}_INSTALL_DIR}
                         LIBRARY DESTINATION ${${PNAME}_INSTALL_DIR}
						 ARCHIVE DESTINATION ${${PNAME}_INSTALL_DIR})
install(DIRECTORY META-INF DESTINATION ${${PNAME}_INSTALL_DIR})
install(FILES ${${PNAME}_EXPORTED_HEADERS} ${${PNAME}_BINDING_SCA_FILES} ${${PNAME}_SCA_COMPONENT_TYPES} DESTINATION ${${PNAME}_INSTALL_DIR})



##############################################################################
#                           CUSTOM TARGET FOR VALIDATING AND GENERATING CODE BY TRENGEN#
##############################################################################
MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET(${${PNAME}_INSTALL_DIR} )
</programlisting>
</para>
</section>
<section>
<title>Define the HelloWorld remote interface</title>
<para>
A remote application using the SCA Binding should be defined using an interface description language. Trentino default binding defines its own IDL called TIDL (Trentino IDL) that is derived from the CORBA IDL specification. More details about TIDL can found in the chapter TIDL reference.
A TIDL interface is defined in one or more .java classes. TIDL uses part of the java syntax to describe the interfaces. The use of the java syntax makes it easy to extend and parse the interface. It also makes it possible to write TIDL files using existing java editors.
Create a file named HelloWord.java in HelloWorldRemote_Source. The file should have the following content:
<programlisting language="java" >
package Trentino.Example.HelloWorldRemote;

//We should ALWAYS Import org.trentino.tidl.* in a TIDL file
import org.trentino.tidl.*;

/**
* HelloWord Service, receive hello world messages 
* and send wellcome to the client.
**/
public interface HelloWorld extends TInterface{

/**
* The server receive an Hello message and send a 
* wellcome message back to the client who sent 
* the message
* @param name: the name of the client who sent the message
* @return TString a welcome message
**/
TString hello(TString name);
}
</programlisting>
Then create a configuration file that describes declare the interface. The configuration file is the entry point for code generators like Trengen, that would like to create C++ artifacts based on a given service definition.
The configuration file name should be exactly the qualified name of the HelloWorld interface, without dot. A TIDL configuration file end with tidl.properties.
In our case it is: TrentinoExampleHelloWorldRemoteHelloWorld.tidl.properties.
It only contains the following line of code:
<programlisting language="cpp">
interface=./HelloWorld.java
</programlisting>
</para>
</section>
<section>
<title>Generate the C++ interface </title>
<note>
<para>
Important: Trengen relies on JDK and not only the JRE (Java Runtime Environment). Make sure that a JDK 1.6.X has been installed.
</para>
</note>
<para>
From the TIDL definition of Helloword, we then generate the corresponding C++ interface. This is done using Trengen. (See Chapter Trengen to learn more about Trentino tool).
<phrase>In the command line type:</phrase>
<screen>
<computeroutput>
Trengen -gencppitf Path/to/HelloWorldRemote_Source
</computeroutput>
</screen>
The generated artifact is a header file containing the generated interface definition.
</para>
</section>
<section>
<title>Implement the HelloWordRemote interface.</title>
<para>Create a class named HelloWordImpl in a header file named TrentinoExampleHelloWorldRemoteHelloWordImpl.h and copy the following implementation into it.
<programlisting language="cpp" >
<![CDATA[
ifndef TrentinoExampleHelloWorldRemoteHelloWorldImplH
#define TrentinoExampleHelloWorldRemoteHelloWorldImplH
#ifdef WIN32
   #ifdef HELLOWORLDREMOTE_EXPORTS
      #define HELLOWORLDREMOTE_IMPORT_EXPORT __declspec(dllexport)
   #else
      #define HELLOWORLDREMOTE_IMPORT_EXPORT __declspec(dllimport)
   #endif //HELLOWORLDREMOTE_EXPORTS
   #else
      #define HELLOWORLDREMOTE_IMPORT_EXPORT
#endif //WIN32
//baseclass
#include "TrentinoExampleHelloWorldRemoteHelloWorld.h"


namespace Trentino{
namespace Example{
namespace HelloWorldRemote{

//forward declaration


 //**************************************************************************************
 //                                         HelloWorld
 //**************************************************************************************
 //! \brief implementation of helloword service
 //**************************************************************************************
class HELLOWORLDREMOTE_IMPORT_EXPORT HelloWorldImpl : public HelloWorld{
  //construction
public:
 HelloWorldImpl();
 virtual ~HelloWorldImpl();
  //services
public:
	virtual std::string hello (const std::string& name);
  
}; //class HelloWorld
} //namespace Trentino
} //namespace Example
} //namespace HelloWorldRemote

#endif //TrentinoExampleHelloWorldRemoteHelloWorldImplH
]]>
</programlisting>
</para>
<para>
Create the corresponding C++ class TrentinoExampleHelloWorldRemoteHelloWordImpl.cpp and copy the following code into it.
<programlisting language="cpp" >
<![CDATA[

#include "TrentinoExampleHelloWorldRemoteHelloWorldImpl.h"


using namespace Trentino::Example::HelloWorldRemote;

//class HelloWorldImpl

HelloWorldImpl::HelloWorldImpl()
{
}
HelloWorldImpl::~HelloWorldImpl()
{
}

std::string HelloWorldImpl::hello (const std::string& name)
{
  std::string result("Hello ");
  result+=name;
  return name;
}
]]>
</programlisting>
</para>
</section>
<section>
<title>Describe your HellowordRemote SCA contribution</title>
<para>
Now our service is implemented (a C++ implementation is available), we need to create SCA component composite and contribution in other to describe our application and make it deployable into a Trentino runtime.
</para>
<section>
<title>HelloWorld remote component</title>
<para>
We start by defining our SCA component type which represents the configurable aspects of our implementation. A component type is described in a *.componentType xml document, that must be located in the same folder with the component implementation (the location of the component header file), in our case the component type name is TrentinoExampleHelloWorldRemoteHelloWordImpl.componentType. It has the following content:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<componentType xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912">
      <service name="HelloWorld" >
      <interface.cpp remotable="true" class="Trentino::Example::HelloWorldRemote::HelloWorld" header="TrentinoExampleHelloWorldRemoteHelloWorld.h"/>
    </service>
</componentType> 
]]>
</programlisting>
Our component type defines the Helloword Service and C++ interface. The interface is defined to be remotable. Since no binding is specified for the service, our default sca binding is assumed to be the one used for remote communication.
</para>
</section>
<section>
<title>HelloWorld remote composite</title>
<para>
Now we can create a composite that has one instance of our previously defined component type
For that purpose Trentino requires composites to be located in a folder named META-INF.
In our source folder, create META-INF folder and create an xml file named: HelloWorldRemote.composite (composite files always end with .composite), and paste following content into it:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<composite name="HelloWorldRemoteComposite" xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" targetNamespace="HelloWorldRemoteNamespace">

  <component name="TrentinoExampleHelloWorldRemoteHelloWorldImpl">

    <implementation.cpp
        class="Trentino::Example::HelloWorldRemote::HelloWorldImpl"
		header="TrentinoExampleHelloWorldRemoteHelloWorldImpl.h"
        scope="composite"
		library="HelloWorldRemote" 
		eagerInit="true"/>
		<service name="HelloWorld" >
      <interface.cpp remotable="true" class="Trentino::Example::HelloWorldRemote::HelloWorld" header="TrentinoExampleHelloWorldRemoteHelloWorld.h"/>
    </service>
  </component>
</composite>
]]>
</programlisting>
Our composite has a component that is an instance of TrentinoExampleHelloWorldRemoteHelloWorldImpl.componentType. The component is configured with our implementation. The location of the library containing the implementation is also defined.
</para>
</section>
<section>
<title>HelloWorld contribution</title>
<para>The last step in your application description is to create a contribution that is an xml document that describes all the artifacts (the so-called deployable elements) to be deployed into and managed together by the runtime. For our simple case, the only available deployable element is the previously created composite and its dependencies (all componentTypes and compiled libraries). The name of the contribution file should be sca-contribution.xml and it should be created in our META-INF folder. Paste the following code into it:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<contribution xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" xmlns:sample="HelloWorldRemoteNamespace">
<deployable composite="sample:HelloWorldRemoteComposite"/>
</contribution>
]]>
</programlisting>
</para>
</section>
</section>
<section>
<title>Compile the server application</title>
<para>
We would like to do all these steps without an IDE but rather with a console.
<itemizedlist>
<listitem>
<para>If you are using windows, then please open your visual studio console.</para>
</listitem>
<listitem>
<para>Create a folder named HelloWorldRemote_Build next to HelloWorldRemote_Source</para>
</listitem>
<listitem>
<para>Change to the created directory : cd HelloWorldRemote_Build</para>
</listitem>
<listitem>
<para>Call Cmake: cmake ../ HelloWorldRemote_Source</para>
</listitem>
<listitem>
<para>Now your visual studio solution has been created (On linux your make files)</para>
</listitem>
<listitem>
<para>On windows call ‘msbuild INSTALL.vcxproj’ on linux just ‘make install’</para>
</listitem>
<listitem>
<para>This will create a folder named HelloWorldRemote next to HelloWorldRemote_Source. The create folder contains your compiled and ready for validation contribution</para>
</listitem>
</itemizedlist>	
</para>
</section>
<section>
<title>Code validation and generation</title>
<para>Before been deployed into the runtime, a prepared contribution as we did in the last steps will go through a complex validation and code generation process. The validation process make sure that only a consistent and specification conform contribution can be deployed into the runtime.
To validate and generate code, type for windows:
<screen>
<computeroutput>
msbuild [Trengen_Validate_Generate_Install].vcxproj
</computeroutput>
</screen>
For linux type:
<screen>
<computeroutput>
make [Trengen_Validate_Generate_Install]
</computeroutput>
</screen>
This last step update your contribution by creating a new library called sca-contribution (.dll or .so). The created library is located in the META-INF folder of your contribution.
To further understand what is done during the last step, you can take a look on the custom target <emphasis role="bold" > [Trengen_Validate_Generate_Install]</emphasis> defined in our cmake file
</para>
</section>
</section>
<section>
<title>Create a client application</title>
<para>The steps for creating the client applications are similar to the ones for the server application
Please download the source code for the client from our samples examples. And build as described for the server example.
</para>
<para>
The client application is a component that is initialized directly after deployment (eager initialization).
It references the HelloWorld Service created before.
It has an initialisation lifecycle method that is called as soon as the component is initialized.
That lifecycle method just connects to the HelloWord Server and calls the remote HelloWord Service.
Here is the source code of the HelloWorldClient
<programlisting language="cpp" >
<![CDATA[

#include <iostream>
#include "TrentinoExampleHelloWorldRemoteHelloWorldClientImpl.h"


using namespace Trentino::Example::HelloWorldRemote;

//class HelloWorldClientImpl

HelloWorldClientImpl::HelloWorldClientImpl()
{
}
HelloWorldClientImpl::~HelloWorldClientImpl()
{
}

void HelloWorldClientImpl::setHelloWorld(HelloWorld* helloWorld){
mHelloWorld = helloWorld;
callHello();
}

//This method is called by the Runtime as soon as this component is initialized
void HelloWorldClientImpl::callHello ()
{

  try
  {
      std::string name("Trentino");
      std::string response = mHelloWorld->hello(name);
      std::cout << "Remote HelloWorld Service called. response is:" << response << std::endl;
  }
  catch (std::exception& e)
  {
  	 std::cout << "Exception during call of hello world:" << e.what() << std::endl;
    return;
  }

}
]]>
</programlisting>


</para>
</section>
<section>
<title>Deploy and run</title>
<para>
In this last step start two different instances of the Trentino runtime.
In the first instance, deploy the server and wait until the server deployment is completed.
In the second instance, deploy the client. The client will print:

<programlisting language="cpp" >
<![CDATA[
Remote HelloWorld Service called. response is: Trentino
]]>
</programlisting>

</para>
</section>
</chapter>