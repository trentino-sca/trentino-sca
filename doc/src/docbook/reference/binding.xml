<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter SYSTEM "docbook.dtd">
<chapter>
	<title>Trentino Binding Tutorial</title>
	<para>
Service Component Architecture (SCA) supports many communication protocols. In SCA terms, these are called
bindings. Bindings encapsulate the complexities of communication protocols and enable components to be
implemented and wired together without a direct dependency on the communication protocols used.<sbr/><sbr/>
What does this mean in reality? It means that an SCA developer can implement a component without polluting
the business code with details of how the communication between components will be handled. This separation of
concerns has the added advantage of making the communication protocol a pluggable entity that can be changed
at any time based on how and where the component is deployed.<sbr/><sbr/>
Bindings are used by services and references. References use bindings to describe the access mechanism used to call a service (which can be a service provided by another SCA composite). Services use bindings to describe the access mechanism that clients (which can be a client from another SCA composite) have to use to call the service.
<sbr/><sbr/>SCA supports the use of multiple different types of bindings. Trentino currently supports two kinds of binding : SCA binding via TCP/IP and interprocess communication binding via shared memory. <sbr/><sbr/>SCA provides an extensibility mechanism by which an SCA runtime can add support for additional binding types. 
A binding is defined by a binding element which is a child element of a service or of a reference element in a composite.
<sbr/><sbr/>The following snippet shows the binding element pseudo-schema.
<screen>
<![CDATA[

<?xml version="1.0" encoding="ASCII"?>
<!-- Bindings schema snippet -->
<composite ... >
...
  <service ... >
   <interface … />
    <binding uri="xs:anyURI"? name="xs:NCName"? requires="list of xs:QName"?policySets="listof xs:QName"?>
     <wireFormat/>
     <operationSelector/>
     <requires/>
     <policySetAttachment/>
    </binding>
    <callback>
     <binding uri="xs:anyURI"? name="xs:NCName"? requires="list of xs:QName"? policySets="list of xs:QName"?>
      <wireFormat/>
      <operationSelector/>
      <requires/>
      <policySetAttachment/>
     </binding>
    </callback>
  </service>
  <reference ... >
   <interface … />
    <binding uri="xs:anyURI"? name="xs:NCName"? requires="list of xs:QName"?policySets="listof xs:QName"?>
     <wireFormat/>
     <operationSelector/>
     <requires/>
     <policySetAttachment/>
    </binding>
    <callback>
     <binding uri="xs:anyURI"? name="xs:NCName"? requires="list of xs:QName"? policySets="list of xs:QName"?>
      <wireFormat/>
      <operationSelector/>
      <requires/>
      <policySetAttachment/>
     </binding>
    </callback>
  </reference>
</composite>

]]>
 </screen>
	
	</para>
<section>	
	<title>Trentino default (SCA) Binding</title>
<section>
<title>Overview</title>
<para>
SCA binding for Trentino is done via TCP/IP. Following snippet shows the SCA binding element pseudo-schema.
<screen>
<![CDATA[

<binding.sca uri="xs:anyURI"? name="xs:NCName"? requires="list of xs:QName"? policySets="list of xs:QName"?>
 <wireFormat/>?
 <operationSelector/>?
 <requires/>*
 <policySetAttachment/>*
</binding.sca>

]]>
 </screen>
 The following SCDL is an example for the usage of binding.sca in Trentino.
 <screen>
<![CDATA[

<?xml version="1.0" encoding="utf-8"?>
<composite name="BasicCalculatorRemoteClientComposite" xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" targetNamespace="BasicCalculatorNamespace">
  <component name="BasicCalculatorRemoteClientImpl">
    <implementation.cpp
        class="Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorRemoteClientImpl"
		header="TrentinoExampleBasicCalculatorRemoteClientBasicCalculatorImpl.h"
        scope="composite" eagerInit="true"
		library="BasicCalculatorRemoteClient" >
		 <function name="onInit" init="true" />
		</implementation.cpp>
     <reference name="BasicCalculatorRef" >
	 	<binding.sca uri="tcp://localhost:5342/BasicCalculatorImpl/BasicCalculator"/>
    </reference>
  </component>
</composite>

]]>
 </screen>
 Each binding.sca (in Trentino) must have a "uri" attribute. The convention for the attribute is represented below:
  <screen>
<![CDATA[

tcp://localhost:5342/BasicCalculatorImpl/BasicCalculator

]]>
 </screen> 
 "Uri" attribute of binding.sca must begin with "tcp://" which is followed by a valid host and a valid port. Host and port checks are done by Trengen. End-user is informed when there are some errors during validation before deployment.
</para>
</section>
<section>
<title>Creating sample server and client applications, their interfaces, deploying and running</title>
<para>
In the next 10 minutes, we want to create a Hello World remote application and deploy it on two Trentino runtimes. The first runtime is a server and the second a client. On the Server, a contribution implementing the Helloworld Service is deployed. On the client, the contribution is having a reference using the service provided by server.
The overall deployment diagram of our system is described in the following picture.
<mediaobject>
  <imageobject>
    <imagedata contentwidth="15cm" scalefit="1" fileref="images/helloworld_assembly_diagram.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Assembly diagram of Helloworld remote</phrase>
  </textobject>
  <caption>
   <para>Assembly diagram of Helloworld remote
</para>
  </caption>
</mediaobject>
</para>
<section>
<title>Create the Helloworld server application</title>
<para>
Binding.sca is the default binding for all remotable services. If there are not any bindings specified for a remotable service, we can say that it uses binding.sca. If there are not any binding.sca specified, which port will be used by Trentino runtime? The Trentino runtime hosting the server application has a Binding.conf file. The contents of the Binding.conf is below:
<screen>
<![CDATA[

binding.sca.port=5342
binding.sca.dll=TrentinoBindingSCA
binding.sca.thread.number=1
binding.sca.client.timeout=1500 #in miliseconds

]]>
</screen>
The port in the Binding.conf is used if there are not any bindings in the remotable service. It is the port number that ZMQServer listens for a request and opens it for sending the response. End-user may edit the values of the parameters in the Binding configuration file.
</para>
<section>
<title>Download all necessary files and setup development environment</title>
<para>
Download and install the Trentino runtime as described in the Trentino Getting Started guide. It includes all the necessary binaries for developing a remote application.
Now create a folder called HelloWorldRemote_Source.
At the end of this section, we will end up with the following file structure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="15cm" scalefit="1" fileref="images/folder_strcuture_helloword_source.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Server folder structure</phrase>
  </textobject>
  <caption>
   <para>Server folder structure
</para>
  </caption>
</mediaobject>
Since the application developed in this tutorial is platform independent, we will use Cmake as cross platform build tool. And therefore we need to define a CMakeList.txt file describing our project.
Create a file named CMakeList.txt and paste the following code into that file:
<screen>
<![CDATA[

cmake_minimum_required(VERSION 2.6)
project(HelloWorldRemote)

set(PNAME HelloWorldRemote)
##############################################################################
# 									MACROS									 #
##############################################################################

#----------------------------------
# MY_LINK_THIRD_PARTY_LIBRARIES 
#----------------------------------
#The libs to be linked to are expected to be passed as additional arguments after 'target'.
#This arguments have to be uncomplete variable names representing the libs
#The macro will append '_DEBUG' respectively '_RELEASE' to the passed arguments
#in order to produce real variable names that are expected to contain the real lib names.
#EXAMPLE: 
#The call MY_LINK_THIRD_PARTY_LIBRARIES(main Boost_FILESYSTEM_LIBRARY) expects the variables
#'Boost_FILESYSTEM_LIBRARY_DEBUG' (if build type is debug) respectively 
#'Boost_FILESYSTEM_LIBRARY_RELEASE' (if build type is release) to be defined
#----------------------------
macro(MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET installDir)
if (WIN32)
	set(GEN_INSTALL_COMMAND msbuild INSTALL.vcxproj)
else()
	set(GEN_INSTALL_COMMAND make install)
endif()
add_custom_target([Trengen_Validate_Generate_Install] 
COMMAND Trengen	-cont ${installDir}
#create a build folder for the generated code
COMMAND ${CMAKE_COMMAND} -E make_directory ${installDir}Gen_Build
#build the project using cmake
COMMAND ${CMAKE_COMMAND} -E chdir ${installDir}Gen_Build cmake ../${installDir}Gen
#now install the application: on windows, call msbuild on linux call make
COMMAND ${CMAKE_COMMAND} -E chdir ${installDir}Gen_Build ${GEN_INSTALL_COMMAND}
WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/../
VERBATIM
)	
endmacro(MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET)



set (TRENTINO_RUNTIME_DIR $ENV{TRENTINO_HOME})
set (DEFAULT_INSTALL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set (CMAKE_INSTALL_PREFIX ${DEFAULT_INSTALL_PATH} CACHE STRING "Install path" FORCE)
endif()

##############################################################################
# 								COMPILER OPTIONS  							 #
##############################################################################
if(MSVC)
	add_definitions(-DUNICODE -D_UNICODE)
	add_definitions(/W4)
else()
	add_definitions(-Wall -pedantic)
endif()

##############################################################################
# 							   OUTPUT CONFIGURATION						     #
##############################################################################
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})



set(SCAAPI_INCLUDE_DIRS ${TRENTINO_RUNTIME_DIR}/include)
set(BOOST_INCLUDE_DIRS ${TRENTINO_RUNTIME_DIR}/include)
#source and header files
FILE (GLOB ${PNAME}_HEADER_FILES *.h *.inl
	  services/*.h services/*.inl)

FILE (GLOB ${PNAME}_SCA_FILES *.xml  *.componentType META-INF/*.xml META-INF/*.composite)
FILE (GLOB ${PNAME}_BINDING_SCA_FILES *.tidl.properties *.java)

FILE (GLOB ${PNAME}_SCA_COMPONENT_TYPES *.componentType )
FILE (GLOB ${PNAME}_SOURCE_FILES *.cpp services/*.cpp)
SET(${PNAME}_SCA_FILES ${${PNAME}_SCA_FILES} ${${PNAME}_SCA_COMPONENT_TYPES})
FILE(GLOB ${PNAME}_EXPORTED_HEADERS *.h *.inl)  
#libs
set( ${PNAME}_THIRD_PARTY_LIBS 
     )
	 
set( ${PNAME}_CUSTOM_LIBS 
     )
	 
set( ${PNAME}_SOURCE_FILES ${${PNAME}_SOURCE_FILES}
						  ${${PNAME}_HEADER_FILES} ${${PNAME}_SCA_FILES})

if (WIN32)
	add_definitions(-DHELLOWORLDREMOTE_EXPORTS)
endif()

if(MSVC_IDE)
	source_group("SCA Files" FILES ${${PNAME}_SCA_FILES})
endif()

include_directories(${SCAAPI_INCLUDE_DIRS} ${BOOST_INCLUDE_DIRS})

add_library(${PNAME} SHARED ${${PNAME}_SOURCE_FILES})
set(${PNAME}_INSTALL_DIR ${PNAME})
set_target_properties(${PNAME} PROPERTIES OUTPUT_NAME ${PNAME})
install(TARGETS ${PNAME} RUNTIME DESTINATION ${${PNAME}_INSTALL_DIR}
                         LIBRARY DESTINATION ${${PNAME}_INSTALL_DIR}
						 ARCHIVE DESTINATION ${${PNAME}_INSTALL_DIR})
install(DIRECTORY META-INF DESTINATION ${${PNAME}_INSTALL_DIR})
install(FILES ${${PNAME}_EXPORTED_HEADERS} ${${PNAME}_BINDING_SCA_FILES} ${${PNAME}_SCA_COMPONENT_TYPES} DESTINATION ${${PNAME}_INSTALL_DIR})



##############################################################################
#                           CUSTOM TARGET FOR VALIDATING AND GENERATING CODE BY TRENGEN#
##############################################################################
MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET(${${PNAME}_INSTALL_DIR} )

]]>
</screen>
</para>
</section>
<section>
<title>Define the HelloWorld remote interface</title>
<para>
A remote application using the SCA Binding should be defined using an interface description language. Trentino default binding defines its own IDL called TIDL (Trentino IDL) that is derived from the CORBA IDL specification. More details about TIDL can found in the next chapter.
A TIDL interface is defined in one or more .java classes. TIDL uses part of the java syntax to describe the interfaces. The use of the java syntax makes it easy to extend and parse the interface. It also makes it possible to write TIDL files using existing java editors.
Create a file named HelloWord.java in HelloWorldRemote_Source. The file should have the following content:
<programlisting language="java" >
package Trentino.Example.HelloWorldRemote;

//We should ALWAYS Import org.trentino.tidl.* in a TIDL file
import org.trentino.tidl.*;

/**
* HelloWord Service, receive hello world messages 
* and send wellcome to the client.
**/
public interface HelloWorld extends TInterface{

/**
* The server receive an Hello message and send a 
* wellcome message back to the client who sent 
* the message
* @param name: the name of the client who sent the message
* @return TString a welcome message
**/
TString hello(TString name);
}
</programlisting>
Then create a configuration file that describes declare the interface. The configuration file is the entry point for code generators like Trengen, that would like to create C++ artifacts based on a given service definition.
The configuration file name should be exactly the qualified name of the HelloWorld interface, without dot. A TIDL configuration file end with tidl.properties.
In our case it is: TrentinoExampleHelloWorldRemoteHelloWorld.tidl.properties.
It only contains the following line of code:
<programlisting language="cpp">
interface=./HelloWorld.java
</programlisting>
</para>
</section>
<section>
<title>Generate the C++ interface </title>
<note>
<para>
Important: Trengen relies on JDK and not only the JRE (Java Runtime Environment). Make sure that a JDK 1.6.X has been installed.
</para>
</note>
<para>
From the TIDL definition of Helloword, we then generate the corresponding C++ interface. This is done using Trengen. (See Chapter 4 to learn more about Trengen tool).
<phrase>In the command line type:</phrase>
<screen>
<computeroutput>
Trengen -gencppitf Path/to/HelloWorldRemote_Source
</computeroutput>
</screen>
The generated artifact is a header file containing the generated interface definition.
</para>
</section>
<section>
<title>Implement the HelloWordRemote interface.</title>
<para>Create a class named HelloWordImpl in a header file named TrentinoExampleHelloWorldRemoteHelloWordImpl.h and copy the following implementation into it.
<programlisting language="cpp" >
<![CDATA[
#ifndef TrentinoExampleHelloWorldRemoteHelloWorldImplH
#define TrentinoExampleHelloWorldRemoteHelloWorldImplH
#ifdef WIN32
   #ifdef HELLOWORLDREMOTE_EXPORTS
      #define HELLOWORLDREMOTE_IMPORT_EXPORT __declspec(dllexport)
   #else
      #define HELLOWORLDREMOTE_IMPORT_EXPORT __declspec(dllimport)
   #endif //HELLOWORLDREMOTE_EXPORTS
   #else
      #define HELLOWORLDREMOTE_IMPORT_EXPORT
#endif //WIN32
//baseclass
#include "TrentinoExampleHelloWorldRemoteHelloWorld.h"


namespace Trentino{
namespace Example{
namespace HelloWorldRemote{

//forward declaration


 //**************************************************************************************
 //                                         HelloWorld
 //**************************************************************************************
 //! \brief implementation of helloword service
 //**************************************************************************************
class HELLOWORLDREMOTE_IMPORT_EXPORT HelloWorldImpl : public HelloWorld{
  //construction
public:
 HelloWorldImpl();
 virtual ~HelloWorldImpl();
  //services
public:
	virtual std::string hello (const std::string& name);
  
}; //class HelloWorld
} //namespace Trentino
} //namespace Example
} //namespace HelloWorldRemote

#endif //TrentinoExampleHelloWorldRemoteHelloWorldImplH
]]>
</programlisting>
</para>
<para>
Create the corresponding C++ class TrentinoExampleHelloWorldRemoteHelloWordImpl.cpp and copy the following code into it.
<programlisting language="cpp" >
<![CDATA[

#include "TrentinoExampleHelloWorldRemoteHelloWorldImpl.h"


using namespace Trentino::Example::HelloWorldRemote;

//class HelloWorldImpl

HelloWorldImpl::HelloWorldImpl()
{
}
HelloWorldImpl::~HelloWorldImpl()
{
}

std::string HelloWorldImpl::hello (const std::string& name)
{
  std::string result("Hello ");
  result+=name;
  return name;
}
]]>
</programlisting>
</para>
</section>
<section>
<title>Describe your HellowordRemote SCA contribution</title>
<para>
Now our service is implemented (a C++ implementation is available), we need to create SCA component composite and contribution in other to describe our application and make it deployable into a Trentino runtime.
</para>
<section>
<title>HelloWorld remote component</title>
<para>
We start by defining our SCA component type which represents the configurable aspects of our implementation. A component type is described in a *.componentType xml document, that must be located in the same folder with the component implementation (the location of the component header file), in our case the component type name is TrentinoExampleHelloWorldRemoteHelloWordImpl.componentType. It has the following content:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<componentType xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912">
      <service name="HelloWorld" >
      <interface.cpp remotable="true" class="Trentino::Example::HelloWorldRemote::HelloWorld" header="TrentinoExampleHelloWorldRemoteHelloWorld.h"/>
    </service>
</componentType> 
]]>
</programlisting>
Our component type defines the Helloword Service and C++ interface. The interface is defined to be remotable ("remotable" is Trentino's contribution to SCA. It is defined by Trentino). Since no binding is specified for the service, our default sca binding is assumed to be the one used for remote communication.
</para>
</section>
<section>
<title>HelloWorld remote composite</title>
<para>
Now we can create a composite that has one instance of our previously defined component type
For that purpose Trentino requires composites to be located in a folder named META-INF.
In our source folder, create META-INF folder and create an xml file named: HelloWorldRemote.composite (composite files always end with .composite), and paste following content into it:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<composite name="HelloWorldRemoteComposite" xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" targetNamespace="HelloWorldRemoteNamespace">

  <component name="TrentinoExampleHelloWorldRemoteHelloWorldImpl">

    <implementation.cpp
        class="Trentino::Example::HelloWorldRemote::HelloWorldImpl"
		header="TrentinoExampleHelloWorldRemoteHelloWorldImpl.h"
        scope="composite"
		library="HelloWorldRemote" 
		eagerInit="true"/>
		<service name="HelloWorld" >
      <interface.cpp remotable="true" class="Trentino::Example::HelloWorldRemote::HelloWorld" header="TrentinoExampleHelloWorldRemoteHelloWorld.h"/>
    </service>
  </component>
</composite>
]]>
</programlisting>
Our composite has a component that is an instance of TrentinoExampleHelloWorldRemoteHelloWorldImpl.componentType. The component is configured with our implementation. The location of the library containing the implementation is also defined.
</para>
</section>
<section>
<title>HelloWorld contribution</title>
<para>The last step in your application description is to create a contribution that is an xml document that describes all the artifacts (the so-called deployable elements) to be deployed into and managed together by the runtime. For our simple case, the only available deployable element is the previously created composite and its dependencies (all componentTypes and compiled libraries). The name of the contribution file should be sca-contribution.xml and it should be created in our META-INF folder. Paste the following code into it:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<contribution xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" xmlns:sample="HelloWorldRemoteNamespace">
<deployable composite="sample:HelloWorldRemoteComposite"/>
</contribution>
]]>
</programlisting>
</para>
</section>
</section>
<section>
<title>Compile the server application</title>
<para>
We would like to do all these steps without an IDE but rather with a console.
<itemizedlist>
<listitem>
<para>If you are using windows, then please open your visual studio console.</para>
</listitem>
<listitem>
<para>Create a folder named HelloWorldRemote_Build next to HelloWorldRemote_Source</para>
</listitem>
<listitem>
<para>Change to the created directory : cd HelloWorldRemote_Build</para>
</listitem>
<listitem>
<para>Call Cmake: cmake ../ HelloWorldRemote_Source</para>
</listitem>
<listitem>
<para>Now your visual studio solution has been created (On linux your make files)</para>
</listitem>
<listitem>
<para>On windows call ‘msbuild INSTALL.vcxproj’ on linux just ‘make install’</para>
</listitem>
<listitem>
<para>This will create a folder named HelloWorldRemote next to HelloWorldRemote_Source. The HelloWorldRemote folder contains your compiled and ready for validation contribution</para>
</listitem>
</itemizedlist>	
</para>
</section>
<section>
<title>Code validation and generation</title>
<para>Before been deployed into the runtime, a prepared contribution as we did in the last steps will go through a complex validation and code generation process. The validation process make sure that only a consistent and specification conform contribution can be deployed into the runtime.
To validate and generate code, type for windows:
<screen>
<computeroutput>
msbuild [Trengen_Validate_Generate_Install].vcxproj
</computeroutput>
</screen>
For linux, type:
<screen>
<computeroutput>
make [Trengen_Validate_Generate_Install]
</computeroutput>
</screen>
This last step update your contribution by creating a new library called sca-contribution (.dll or .so). The created library is located in the META-INF folder of your contribution.
To further understand what is done during the last step, you can take a look on the custom target <emphasis role="bold" > [Trengen_Validate_Generate_Install]</emphasis> defined in our cmake file
</para>
</section>
</section>
<section>
<title>Create the HelloWorld client application</title>
<para>The steps for creating the client applications are similar to the ones for the server application
Please download the source code for the client from our samples examples. And build as described for the server example.
</para>
<para>
The client application is a component that is initialized directly after deployment (eager initialization).
It references the HelloWorld Service created before.
It has an initialisation lifecycle method that is called as soon as the component is initialized.
That lifecycle method just connects to the HelloWord Server and calls the remote HelloWord Service.
Here is the source code of the HelloWorldClient
<programlisting language="cpp" >
<![CDATA[

#include <iostream>
#include "TrentinoExampleHelloWorldRemoteHelloWorldClientImpl.h"


using namespace Trentino::Example::HelloWorldRemote;

//class HelloWorldClientImpl

HelloWorldClientImpl::HelloWorldClientImpl()
{
}
HelloWorldClientImpl::~HelloWorldClientImpl()
{
}

void HelloWorldClientImpl::setHelloWorld(HelloWorld* helloWorld){
mHelloWorld = helloWorld;
callHello();
}

//This method is called by the Runtime as soon as this component is initialized
void HelloWorldClientImpl::callHello ()
{

  try
  {
      std::string name("Trentino");
      std::string response = mHelloWorld->hello(name);
      std::cout << "Remote HelloWorld Service called. Response is:" << response << std::endl;
  }
  catch (std::exception& e)
  {
  	 std::cout << "Exception during call of hello world:" << e.what() << std::endl;
    return;
  }

}
]]>
</programlisting>


</para>
</section>
<section>
<title>Deploy and run</title>
<para>
In this last step start two different instances of the Trentino runtime.
In the first instance, deploy the server and wait until the server deployment is completed.
In the second instance, deploy the client. The client will print:

<programlisting language="cpp" >
<![CDATA[
Remote HelloWorld Service called. Response is: Hello Trentino
]]>
</programlisting>

</para>
</section>
</section>
<section>
<title>Binding-related generated files</title>
<para>
For the server side, the files generated by Trengen can be seen in the following figure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="10cm" scalefit="1" fileref="images/server_generatedFiles.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>server-side generated files</phrase>
  </textobject>
  <caption>
   <para>server-side generated files</para>
  </caption>
</mediaobject>
For the client side, the files generated by Trengen can be seen in the following figure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="10cm" scalefit="1" fileref="images/client_generatedFiles.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>client-side generated files</phrase>
  </textobject>
  <caption>
   <para>client-side generated files</para>
  </caption>
</mediaobject>
<itemizedlist>
 <listitem>
 <para>
ProtobufMessages, Request, Response and Types are common for both client and server. They are the generated protobuf files. Here are the reasons why we use google-protobuf in Trentino:
<itemizedlist>
  <listitem>
    <para>Protobuf is small in size - efficient data storage (far smaller than xml).</para>
  </listitem>
  <listitem>
    <para>Protobuf is cheap to process - both at the client and server.</para>
  </listitem>
  <listitem>
    <para>Protobuf is platform independent - portable between different programming architectures.</para>
  </listitem>
  <listitem>
    <para>Protobuf is extensible - to add new data to old messages.</para>
  </listitem>
   <listitem>
    <para>Protobuf is fast.</para>
  </listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>
TrentinoGenModelLoader, TrentinoGenProxiesWrappers and TrentinoGenReflx files are also common for both client and server:
 <itemizedlist>
  <listitem>
    <para>TrentinoGenModelLoader: contains code responsible for creating the in-memory SCA Model by instantiating SCA Model classes. The created object graph reflects all the information specified in SCDL artifacts in the contribution. It implementes Trentino::Gen::GenContributionInfo::loadModel().
The instantiation doesn‘t happen automatically when sca-contribution.dll is loaded but is triggered by the runtime through a call to the loadModel() function.
</para>
  </listitem>
  <listitem>
    <para>TrentinoGenProxiesWrappers: Proxies keeps references-related information and wrappers keeps services related information. This is the bridge between invocation and business logic.
	It includes service header files (mentioned in interface.cpp/@header): this is necessary because proxies inherit service classes and wrappers call methods of the service classes.
</para>
  </listitem>
  <listitem>
    <para>TrentinoGenReflx: contains reflection code for all the implementation classes in the contribution. It includes headers of the implementation classes (mentioned in implementation.cpp/@header): this is necessary because the generated reflection code uses symbols (methods, types) defined in the business logic code.
 </para>
  </listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>TrentinoGenBindingProxy is generated in client side. It creates a protobuf request message, sends it to ClientProxyDelegate, gets the response, parses the response from string and finally returns the response.</para>
</listitem>
<listitem>
<para>TrentinoGenSCABindingHelpers is generated in server-side. It deserializes the request and serializes the response.</para>
</listitem>
<listitem>
<para>BeanUtils is generated in both client and server. It makes the conversion between java types and protobuf types. It is used in TrentinoGenSCABindingHelpers and TrentinoGenBindingProxy.</para>
</listitem>
</itemizedlist>
</para>
</section>
<section>
<title>Binding.sca from development point of view</title>
<para>
The following diagram represents the sequence of binding in Trentino. It covers the "boot", "install server" and "install client" commands.
<mediaobject>
  <imageobject>
    <imagedata contentwidth="40cm" scalefit="1" fileref="images/binding_sca_seq_diagram.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Sequence diagram for binding SCA</phrase>
  </textobject>
  <caption>
   <para>Sequence diagram for binding SCA</para>
  </caption>
</mediaobject>
After "boot" command, BootsTrapper is called. It creates instances of Binding Manager, Contribution Loader, ComponentCPPImpl Manager, ComponentProperty Manager and Invocation Layer.
<sbr/><sbr/>
After "install _name_of_the_server_contribution_" command, onDeploy() function of BindingManager is called. This is the start of Binding in Trentino.
<itemizedlist>
  <listitem>
    <para>Binding Manager creates Binding Factory.</para>
  </listitem>
  <listitem>
    <para>BindingFactory gets SCABindingFactory.</para>
  </listitem>
  <listitem>
    <para>SCABindingFactory creates BindingSCA. </para>
  </listitem>
  <listitem>
    <para>BindingManager calls createBinding() method of SCABindingFactory. Then doCreateBinding() function of BindingSCA is called by SCABindingFactory.</para>
  </listitem>
   <listitem>
    <para>BindingFactory calls start() method of BindingFactory. Then start() function of BindingSCA is called by BindingFactory.</para>
  </listitem>
   <listitem>
    <para>BindingSCA creates instances of SCAContext, BindingSCADataHandler, ZMQServer and InvokerProxy. Then it calls start() function of ZMQServer.
	<sbr/>Zero MQ is the socket library that acts as a concurrency framework. Trentino uses Zero MQ for the message passing(serialization and deserialization included) via network.<sbr/>
	</para>
  </listitem>
</itemizedlist> 
<sbr/><sbr/>
After "install _name_of_the_client_contribution_" command, onInit() or getInstance() function of ComponentCPPImplManager is called (This is decided by the configuration in SCDL). 
<itemizedlist>
  <listitem>
    <para>ComponentCPPImplManager creates an instance of Component Implementation of Caller (this is business logic provided by end-user. It is TrentinoExampleHelloWorldRemoteHelloWordImpl in our sample.)</para>
  </listitem>
  <listitem>
    <para>Component Implementation object calls a service method which is defined also in Proxy. (Proxy is a generated file.)</para>
  </listitem>
  <listitem>
    <para>Proxy invokes Invocation Layer.</para>
  </listitem>
  <listitem>
    <para>Invocation Layer calls invoke() function of Wrapper. (Wrapper is also a generated file)</para>
  </listitem>
   <listitem>
    <para>Wrapper calls the related service method which is in BindingProxy. (BindingProxy is a generated file)</para>
  </listitem>
   <listitem>
    <para>BindingProxy calls send() function of ClientProxyDelegate. </para>
  </listitem>
     <listitem>
    <para>ClientProxyDelegate calls send() function of ClientProxyDelegateImpl. ClientProxyDelegateImpl sends the request and gets the related response.</para>
  </listitem>
</itemizedlist> 
<sbr/><sbr/>
After a request is received in server side, handle() function of BindingSCADataHandler by ZMQServer. 
<itemizedlist>
  <listitem>
    <para>BindingSCADataHandler calls the deserializeRequest() function of BindingHelpers. (BindingHelper is a generated file)</para>
  </listitem>
  <listitem>
    <para>BindingSCADataHandler serializes the response and sends it via network.</para>
  </listitem>
</itemizedlist> 
</para>
</section>
</section>
<section>	
	<title>Trentino inter Process Communication(IPC) via Shared Memory  Binding</title>
<section>
<title>Overview</title>
<para>
IPC binding for Trentino is done via shared memory. Boost interprocess library is used for implementation. Following snippet shows the IPC binding element extends biding.sca in the pseudo-schema.

The following SCDL is an example for the usage of binding.ipc in Trentino.
 <screen>
<![CDATA[

<?xml version="1.0" encoding="utf-8"?>
<composite name="BasicCalculatorRemoteClientComposite" xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" targetNamespace="BasicCalculatorNamespace">
  <component name="BasicCalculatorRemoteClientImpl">
    <implementation.cpp
        class="Trentino::Example::BasicCalculatorRemoteClient::BasicCalculatorRemoteClientImpl"
		header="TrentinoExampleBasicCalculatorRemoteClientBasicCalculatorImpl.h"
        scope="composite" eagerInit="true"
		library="BasicCalculatorRemoteClient" >
		 <function name="onInit" init="true" />
		</implementation.cpp>
     <reference name="BasicCalculatorRef" >
	 	<binding.ipc uri="ipc://BasicCalculatorImpl/BasicCalculator"/>
    </reference>
  </component>
</composite>

]]>
 </screen>
 Each binding.ipc (in Trentino) must have a "uri" attribute. The convention for the attribute is represented below:
  <screen>
<![CDATA[

"ipc://BasicCalculatorImpl/BasicCalculator"

]]>
 </screen> 
 "Uri" attribute of binding.ipc must begin with "ipc://" which is followed by the component and reference name seperated via "/".
</para>
</section>
<section>
<title>Creating sample server and client applications, their interfaces, deploying and running</title>
<para>
In the next 10 minutes, we want to create a Hello World remote application and deploy it on two Trentino runtimes. The first runtime is a server and the second a client. On the Server, a contribution implementing the BasicCalculator Service is deployed. On the client, the contribution is having a reference using the service provided by server.
The overall deployment diagram of our system is described in the following picture.

Binding.ipc is not the default binding for all remotable servicesso it needs to be specified explicitly on the server side. No explicit configuration is required for bidning.ipc
</para>
<section>
<title>Create the BasicCalculator server application</title>

<section>
<title>Download all necessary files and setup development environment</title>
<para>
Download and install the Trentino runtime as described in the Trentino Getting Started guide. It includes all the necessary binaries for developing a remote application.
Now create a folder called BasicCalculatorRemote_Source.
At the end of this section, we will end up with the following file structure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="15cm" scalefit="1" fileref="images/folder_strcuture_helloword_source.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Server folder structure</phrase>
  </textobject>
  <caption>
   <para>Server folder structure
</para>
  </caption>
</mediaobject>
Since the application developed in this tutorial is platform independent, we will use Cmake as cross platform build tool. And therefore we need to define a CMakeList.txt file describing our project.
Create a file named CMakeList.txt and paste the following code into that file:
<screen>
<![CDATA[

cmake_minimum_required(VERSION 2.6)
project(HelloWorldRemote)

set(PNAME HelloWorldRemote)
##############################################################################
# 									MACROS									 #
##############################################################################

#----------------------------------
# MY_LINK_THIRD_PARTY_LIBRARIES 
#----------------------------------
#The libs to be linked to are expected to be passed as additional arguments after 'target'.
#This arguments have to be uncomplete variable names representing the libs
#The macro will append '_DEBUG' respectively '_RELEASE' to the passed arguments
#in order to produce real variable names that are expected to contain the real lib names.
#EXAMPLE: 
#The call MY_LINK_THIRD_PARTY_LIBRARIES(main Boost_FILESYSTEM_LIBRARY) expects the variables
#'Boost_FILESYSTEM_LIBRARY_DEBUG' (if build type is debug) respectively 
#'Boost_FILESYSTEM_LIBRARY_RELEASE' (if build type is release) to be defined
#----------------------------
macro(MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET installDir)
if (WIN32)
	set(GEN_INSTALL_COMMAND msbuild INSTALL.vcxproj)
else()
	set(GEN_INSTALL_COMMAND make install)
endif()
add_custom_target([Trengen_Validate_Generate_Install] 
COMMAND Trengen	-cont ${installDir}
#create a build folder for the generated code
COMMAND ${CMAKE_COMMAND} -E make_directory ${installDir}Gen_Build
#build the project using cmake
COMMAND ${CMAKE_COMMAND} -E chdir ${installDir}Gen_Build cmake ../${installDir}Gen
#now install the application: on windows, call msbuild on linux call make
COMMAND ${CMAKE_COMMAND} -E chdir ${installDir}Gen_Build ${GEN_INSTALL_COMMAND}
WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/../
VERBATIM
)	
endmacro(MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET)



set (TRENTINO_RUNTIME_DIR $ENV{TRENTINO_HOME})
set (DEFAULT_INSTALL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../)

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set (CMAKE_INSTALL_PREFIX ${DEFAULT_INSTALL_PATH} CACHE STRING "Install path" FORCE)
endif()

##############################################################################
# 								COMPILER OPTIONS  							 #
##############################################################################
if(MSVC)
	add_definitions(-DUNICODE -D_UNICODE)
	add_definitions(/W4)
else()
	add_definitions(-Wall -pedantic)
endif()

##############################################################################
# 							   OUTPUT CONFIGURATION						     #
##############################################################################
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})
set(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME})



set(SCAAPI_INCLUDE_DIRS ${TRENTINO_RUNTIME_DIR}/include)
set(BOOST_INCLUDE_DIRS ${TRENTINO_RUNTIME_DIR}/include)
#source and header files
FILE (GLOB ${PNAME}_HEADER_FILES *.h *.inl
	  services/*.h services/*.inl)

FILE (GLOB ${PNAME}_SCA_FILES *.xml  *.componentType META-INF/*.xml META-INF/*.composite)
FILE (GLOB ${PNAME}_BINDING_SCA_FILES *.tidl.properties *.java)

FILE (GLOB ${PNAME}_SCA_COMPONENT_TYPES *.componentType )
FILE (GLOB ${PNAME}_SOURCE_FILES *.cpp services/*.cpp)
SET(${PNAME}_SCA_FILES ${${PNAME}_SCA_FILES} ${${PNAME}_SCA_COMPONENT_TYPES})
FILE(GLOB ${PNAME}_EXPORTED_HEADERS *.h *.inl)  
#libs
set( ${PNAME}_THIRD_PARTY_LIBS 
     )
	 
set( ${PNAME}_CUSTOM_LIBS 
     )
	 
set( ${PNAME}_SOURCE_FILES ${${PNAME}_SOURCE_FILES}
						  ${${PNAME}_HEADER_FILES} ${${PNAME}_SCA_FILES})

if (WIN32)
	add_definitions(-DHELLOWORLDREMOTE_EXPORTS)
endif()

if(MSVC_IDE)
	source_group("SCA Files" FILES ${${PNAME}_SCA_FILES})
endif()

include_directories(${SCAAPI_INCLUDE_DIRS} ${BOOST_INCLUDE_DIRS})

add_library(${PNAME} SHARED ${${PNAME}_SOURCE_FILES})
set(${PNAME}_INSTALL_DIR ${PNAME})
set_target_properties(${PNAME} PROPERTIES OUTPUT_NAME ${PNAME})
install(TARGETS ${PNAME} RUNTIME DESTINATION ${${PNAME}_INSTALL_DIR}
                         LIBRARY DESTINATION ${${PNAME}_INSTALL_DIR}
						 ARCHIVE DESTINATION ${${PNAME}_INSTALL_DIR})
install(DIRECTORY META-INF DESTINATION ${${PNAME}_INSTALL_DIR})
install(FILES ${${PNAME}_EXPORTED_HEADERS} ${${PNAME}_BINDING_SCA_FILES} ${${PNAME}_SCA_COMPONENT_TYPES} DESTINATION ${${PNAME}_INSTALL_DIR})



##############################################################################
#                           CUSTOM TARGET FOR VALIDATING AND GENERATING CODE BY TRENGEN#
##############################################################################
MY_CREATE_VALIDATE_GENERATE_INSTALL_TARGET(${${PNAME}_INSTALL_DIR} )

]]>
</screen>
</para>
</section>
<section>
<title>Define the HelloWorld remote interface</title>
<para>
A remote application using the SCA Binding should be defined using an interface description language. Trentino default binding defines its own IDL called TIDL (Trentino IDL) that is derived from the CORBA IDL specification. More details about TIDL can found in the next chapter.
A TIDL interface is defined in one or more .java classes. TIDL uses part of the java syntax to describe the interfaces. The use of the java syntax makes it easy to extend and parse the interface. It also makes it possible to write TIDL files using existing java editors.
Create a file named HelloWord.java in HelloWorldRemote_Source. The file should have the following content:
<programlisting language="java" >
package Trentino.Example.HelloWorldRemote;

//We should ALWAYS Import org.trentino.tidl.* in a TIDL file
import org.trentino.tidl.*;

/**
* HelloWord Service, receive hello world messages 
* and send wellcome to the client.
**/
public interface HelloWorld extends TInterface{

/**
* The server receive an Hello message and send a 
* wellcome message back to the client who sent 
* the message
* @param name: the name of the client who sent the message
* @return TString a welcome message
**/
TString hello(TString name);
}
</programlisting>
Then create a configuration file that describes declare the interface. The configuration file is the entry point for code generators like Trengen, that would like to create C++ artifacts based on a given service definition.
The configuration file name should be exactly the qualified name of the HelloWorld interface, without dot. A TIDL configuration file end with tidl.properties.
In our case it is: TrentinoExampleHelloWorldRemoteHelloWorld.tidl.properties.
It only contains the following line of code:
<programlisting language="cpp">
interface=./HelloWorld.java
</programlisting>
</para>
</section>
<section>
<title>Generate the C++ interface </title>
<note>
<para>
Important: Trengen relies on JDK and not only the JRE (Java Runtime Environment). Make sure that a JDK 1.6.X has been installed.
</para>
</note>
<para>
From the TIDL definition of Helloword, we then generate the corresponding C++ interface. This is done using Trengen. (See Chapter 4 to learn more about Trengen tool).
<phrase>In the command line type:</phrase>
<screen>
<computeroutput>
Trengen -gencppitf Path/to/HelloWorldRemote_Source
</computeroutput>
</screen>
The generated artifact is a header file containing the generated interface definition.
</para>
</section>
<section>
<title>Implement the HelloWordRemote interface.</title>
<para>Create a class named HelloWordImpl in a header file named TrentinoExampleHelloWorldRemoteHelloWordImpl.h and copy the following implementation into it.
<programlisting language="cpp" >
<![CDATA[
#ifndef TrentinoExampleHelloWorldRemoteHelloWorldImplH
#define TrentinoExampleHelloWorldRemoteHelloWorldImplH
#ifdef WIN32
   #ifdef HELLOWORLDREMOTE_EXPORTS
      #define HELLOWORLDREMOTE_IMPORT_EXPORT __declspec(dllexport)
   #else
      #define HELLOWORLDREMOTE_IMPORT_EXPORT __declspec(dllimport)
   #endif //HELLOWORLDREMOTE_EXPORTS
   #else
      #define HELLOWORLDREMOTE_IMPORT_EXPORT
#endif //WIN32
//baseclass
#include "TrentinoExampleHelloWorldRemoteHelloWorld.h"


namespace Trentino{
namespace Example{
namespace HelloWorldRemote{

//forward declaration


 //**************************************************************************************
 //                                         HelloWorld
 //**************************************************************************************
 //! \brief implementation of helloword service
 //**************************************************************************************
class HELLOWORLDREMOTE_IMPORT_EXPORT HelloWorldImpl : public HelloWorld{
  //construction
public:
 HelloWorldImpl();
 virtual ~HelloWorldImpl();
  //services
public:
	virtual std::string hello (const std::string& name);
  
}; //class HelloWorld
} //namespace Trentino
} //namespace Example
} //namespace HelloWorldRemote

#endif //TrentinoExampleHelloWorldRemoteHelloWorldImplH
]]>
</programlisting>
</para>
<para>
Create the corresponding C++ class TrentinoExampleHelloWorldRemoteHelloWordImpl.cpp and copy the following code into it.
<programlisting language="cpp" >
<![CDATA[

#include "TrentinoExampleHelloWorldRemoteHelloWorldImpl.h"


using namespace Trentino::Example::HelloWorldRemote;

//class HelloWorldImpl

HelloWorldImpl::HelloWorldImpl()
{
}
HelloWorldImpl::~HelloWorldImpl()
{
}

std::string HelloWorldImpl::hello (const std::string& name)
{
  std::string result("Hello ");
  result+=name;
  return name;
}
]]>
</programlisting>
</para>
</section>
<section>
<title>Describe your HellowordRemote SCA contribution</title>
<para>
Now our service is implemented (a C++ implementation is available), we need to create SCA component composite and contribution in other to describe our application and make it deployable into a Trentino runtime.
</para>
<section>
<title>HelloWorld remote component</title>
<para>
We start by defining our SCA component type which represents the configurable aspects of our implementation. A component type is described in a *.componentType xml document, that must be located in the same folder with the component implementation (the location of the component header file), in our case the component type name is TrentinoExampleHelloWorldRemoteHelloWordImpl.componentType. It has the following content:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<componentType xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912">
      <service name="HelloWorld" >
      <interface.cpp remotable="true" class="Trentino::Example::HelloWorldRemote::HelloWorld" header="TrentinoExampleHelloWorldRemoteHelloWorld.h"/>
    </service>
</componentType> 
]]>
</programlisting>
Our component type defines the Helloword Service and C++ interface. The interface is defined to be remotable ("remotable" is Trentino's contribution to SCA. It is defined by Trentino). Since no binding is specified for the service, our default sca binding is assumed to be the one used for remote communication.
</para>
</section>
<section>
<title>HelloWorld remote composite</title>
<para>
Now we can create a composite that has one instance of our previously defined component type
For that purpose Trentino requires composites to be located in a folder named META-INF.
In our source folder, create META-INF folder and create an xml file named: HelloWorldRemote.composite (composite files always end with .composite), and paste following content into it:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<composite name="HelloWorldRemoteComposite" xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" targetNamespace="HelloWorldRemoteNamespace">

  <component name="TrentinoExampleHelloWorldRemoteHelloWorldImpl">

    <implementation.cpp
        class="Trentino::Example::HelloWorldRemote::HelloWorldImpl"
		header="TrentinoExampleHelloWorldRemoteHelloWorldImpl.h"
        scope="composite"
		library="HelloWorldRemote" 
		eagerInit="true"/>
		<service name="HelloWorld" >
      <interface.cpp remotable="true" class="Trentino::Example::HelloWorldRemote::HelloWorld" header="TrentinoExampleHelloWorldRemoteHelloWorld.h"/>
    </service>
  </component>
</composite>
]]>
</programlisting>
Our composite has a component that is an instance of TrentinoExampleHelloWorldRemoteHelloWorldImpl.componentType. The component is configured with our implementation. The location of the library containing the implementation is also defined.
</para>
</section>
<section>
<title>HelloWorld contribution</title>
<para>The last step in your application description is to create a contribution that is an xml document that describes all the artifacts (the so-called deployable elements) to be deployed into and managed together by the runtime. For our simple case, the only available deployable element is the previously created composite and its dependencies (all componentTypes and compiled libraries). The name of the contribution file should be sca-contribution.xml and it should be created in our META-INF folder. Paste the following code into it:
<programlisting language="xml" >
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<contribution xmlns="http://docs.oasis-open.org/ns/opencsa/sca/200912" xmlns:sample="HelloWorldRemoteNamespace">
<deployable composite="sample:HelloWorldRemoteComposite"/>
</contribution>
]]>
</programlisting>
</para>
</section>
</section>
<section>
<title>Compile the server application</title>
<para>
We would like to do all these steps without an IDE but rather with a console.
<itemizedlist>
<listitem>
<para>If you are using windows, then please open your visual studio console.</para>
</listitem>
<listitem>
<para>Create a folder named HelloWorldRemote_Build next to HelloWorldRemote_Source</para>
</listitem>
<listitem>
<para>Change to the created directory : cd HelloWorldRemote_Build</para>
</listitem>
<listitem>
<para>Call Cmake: cmake ../ HelloWorldRemote_Source</para>
</listitem>
<listitem>
<para>Now your visual studio solution has been created (On linux your make files)</para>
</listitem>
<listitem>
<para>On windows call ‘msbuild INSTALL.vcxproj’ on linux just ‘make install’</para>
</listitem>
<listitem>
<para>This will create a folder named HelloWorldRemote next to HelloWorldRemote_Source. The HelloWorldRemote folder contains your compiled and ready for validation contribution</para>
</listitem>
</itemizedlist>	
</para>
</section>
<section>
<title>Code validation and generation</title>
<para>Before been deployed into the runtime, a prepared contribution as we did in the last steps will go through a complex validation and code generation process. The validation process make sure that only a consistent and specification conform contribution can be deployed into the runtime.
To validate and generate code, type for windows:
<screen>
<computeroutput>
msbuild [Trengen_Validate_Generate_Install].vcxproj
</computeroutput>
</screen>
For linux, type:
<screen>
<computeroutput>
make [Trengen_Validate_Generate_Install]
</computeroutput>
</screen>
This last step update your contribution by creating a new library called sca-contribution (.dll or .so). The created library is located in the META-INF folder of your contribution.
To further understand what is done during the last step, you can take a look on the custom target <emphasis role="bold" > [Trengen_Validate_Generate_Install]</emphasis> defined in our cmake file
</para>
</section>
</section>
<section>
<title>Create the HelloWorld client application</title>
<para>The steps for creating the client applications are similar to the ones for the server application
Please download the source code for the client from our samples examples. And build as described for the server example.
</para>
<para>
The client application is a component that is initialized directly after deployment (eager initialization).
It references the HelloWorld Service created before.
It has an initialisation lifecycle method that is called as soon as the component is initialized.
That lifecycle method just connects to the HelloWord Server and calls the remote HelloWord Service.
Here is the source code of the HelloWorldClient
<programlisting language="cpp" >
<![CDATA[

#include <iostream>
#include "TrentinoExampleHelloWorldRemoteHelloWorldClientImpl.h"


using namespace Trentino::Example::HelloWorldRemote;

//class HelloWorldClientImpl

HelloWorldClientImpl::HelloWorldClientImpl()
{
}
HelloWorldClientImpl::~HelloWorldClientImpl()
{
}

void HelloWorldClientImpl::setHelloWorld(HelloWorld* helloWorld){
mHelloWorld = helloWorld;
callHello();
}

//This method is called by the Runtime as soon as this component is initialized
void HelloWorldClientImpl::callHello ()
{

  try
  {
      std::string name("Trentino");
      std::string response = mHelloWorld->hello(name);
      std::cout << "Remote HelloWorld Service called. Response is:" << response << std::endl;
  }
  catch (std::exception& e)
  {
  	 std::cout << "Exception during call of hello world:" << e.what() << std::endl;
    return;
  }

}
]]>
</programlisting>


</para>
</section>
<section>
<title>Deploy and run</title>
<para>
In this last step start two different instances of the Trentino runtime.
In the first instance, deploy the server and wait until the server deployment is completed.
In the second instance, deploy the client. The client will print:

<programlisting language="cpp" >
<![CDATA[
Remote HelloWorld Service called. Response is: Hello Trentino
]]>
</programlisting>

</para>
</section>
</section>
<section>
<title>Binding-related generated files</title>
<para>
For the server side, the files generated by Trengen can be seen in the following figure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="10cm" scalefit="1" fileref="images/server_generatedFiles.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>server-side generated files</phrase>
  </textobject>
  <caption>
   <para>server-side generated files</para>
  </caption>
</mediaobject>
For the client side, the files generated by Trengen can be seen in the following figure:
<mediaobject>
  <imageobject>
    <imagedata contentwidth="10cm" scalefit="1" fileref="images/client_generatedFiles.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>client-side generated files</phrase>
  </textobject>
  <caption>
   <para>client-side generated files</para>
  </caption>
</mediaobject>
<itemizedlist>
 <listitem>
 <para>
ProtobufMessages, Request, Response and Types are common for both client and server. They are the generated protobuf files. Here are the reasons why we use google-protobuf in Trentino:
<itemizedlist>
  <listitem>
    <para>Protobuf is small in size - efficient data storage (far smaller than xml).</para>
  </listitem>
  <listitem>
    <para>Protobuf is cheap to process - both at the client and server.</para>
  </listitem>
  <listitem>
    <para>Protobuf is platform independent - portable between different programming architectures.</para>
  </listitem>
  <listitem>
    <para>Protobuf is extensible - to add new data to old messages.</para>
  </listitem>
   <listitem>
    <para>Protobuf is fast.</para>
  </listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>
TrentinoGenModelLoader, TrentinoGenProxiesWrappers and TrentinoGenReflx files are also common for both client and server:
 <itemizedlist>
  <listitem>
    <para>TrentinoGenModelLoader: contains code responsible for creating the in-memory SCA Model by instantiating SCA Model classes. The created object graph reflects all the information specified in SCDL artifacts in the contribution. It implementes Trentino::Gen::GenContributionInfo::loadModel().
The instantiation doesn‘t happen automatically when sca-contribution.dll is loaded but is triggered by the runtime through a call to the loadModel() function.
</para>
  </listitem>
  <listitem>
    <para>TrentinoGenProxiesWrappers: Proxies keeps references-related information and wrappers keeps services related information. This is the bridge between invocation and business logic.
	It includes service header files (mentioned in interface.cpp/@header): this is necessary because proxies inherit service classes and wrappers call methods of the service classes.
</para>
  </listitem>
  <listitem>
    <para>TrentinoGenReflx: contains reflection code for all the implementation classes in the contribution. It includes headers of the implementation classes (mentioned in implementation.cpp/@header): this is necessary because the generated reflection code uses symbols (methods, types) defined in the business logic code.
 </para>
  </listitem>
</itemizedlist>
</para>
</listitem>
<listitem>
<para>TrentinoGenBindingProxy is generated in client side. It creates a protobuf request message, sends it to ClientProxyDelegate, gets the response, parses the response from string and finally returns the response.</para>
</listitem>
<listitem>
<para>TrentinoGenSCABindingHelpers is generated in server-side. It deserializes the request and serializes the response.</para>
</listitem>
<listitem>
<para>BeanUtils is generated in both client and server. It makes the conversion between java types and protobuf types. It is used in TrentinoGenSCABindingHelpers and TrentinoGenBindingProxy.</para>
</listitem>
</itemizedlist>
</para>
</section>
<section>
<title>Binding.sca from development point of view</title>
<para>
The following diagram represents the sequence of binding in Trentino. It covers the "boot", "install server" and "install client" commands.
<mediaobject>
  <imageobject>
    <imagedata contentwidth="40cm" scalefit="1" fileref="images/binding_sca_seq_diagram.png" format="PNG"/>
  </imageobject>
  <textobject>
    <phrase>Sequence diagram for binding SCA</phrase>
  </textobject>
  <caption>
   <para>Sequence diagram for binding SCA</para>
  </caption>
</mediaobject>
After "boot" command, BootsTrapper is called. It creates instances of Binding Manager, Contribution Loader, ComponentCPPImpl Manager, ComponentProperty Manager and Invocation Layer.
<sbr/><sbr/>
After "install _name_of_the_server_contribution_" command, onDeploy() function of BindingManager is called. This is the start of Binding in Trentino.
<itemizedlist>
  <listitem>
    <para>Binding Manager creates Binding Factory.</para>
  </listitem>
  <listitem>
    <para>BindingFactory gets SCABindingFactory.</para>
  </listitem>
  <listitem>
    <para>SCABindingFactory creates BindingSCA. </para>
  </listitem>
  <listitem>
    <para>BindingManager calls createBinding() method of SCABindingFactory. Then doCreateBinding() function of BindingSCA is called by SCABindingFactory.</para>
  </listitem>
   <listitem>
    <para>BindingFactory calls start() method of BindingFactory. Then start() function of BindingSCA is called by BindingFactory.</para>
  </listitem>
   <listitem>
    <para>BindingSCA creates instances of SCAContext, BindingSCADataHandler, ZMQServer and InvokerProxy. Then it calls start() function of ZMQServer.
	<sbr/>Zero MQ is the socket library that acts as a concurrency framework. Trentino uses Zero MQ for the message passing(serialization and deserialization included) via network.<sbr/>
	</para>
  </listitem>
</itemizedlist> 
<sbr/><sbr/>
After "install _name_of_the_client_contribution_" command, onInit() or getInstance() function of ComponentCPPImplManager is called (This is decided by the configuration in SCDL). 
<itemizedlist>
  <listitem>
    <para>ComponentCPPImplManager creates an instance of Component Implementation of Caller (this is business logic provided by end-user. It is TrentinoExampleHelloWorldRemoteHelloWordImpl in our sample.)</para>
  </listitem>
  <listitem>
    <para>Component Implementation object calls a service method which is defined also in Proxy. (Proxy is a generated file.)</para>
  </listitem>
  <listitem>
    <para>Proxy invokes Invocation Layer.</para>
  </listitem>
  <listitem>
    <para>Invocation Layer calls invoke() function of Wrapper. (Wrapper is also a generated file)</para>
  </listitem>
   <listitem>
    <para>Wrapper calls the related service method which is in BindingProxy. (BindingProxy is a generated file)</para>
  </listitem>
   <listitem>
    <para>BindingProxy calls send() function of ClientProxyDelegate. </para>
  </listitem>
     <listitem>
    <para>ClientProxyDelegate calls send() function of ClientProxyDelegateImpl. ClientProxyDelegateImpl sends the request and gets the related response.</para>
  </listitem>
</itemizedlist> 
<sbr/><sbr/>
After a request is received in server side, handle() function of BindingSCADataHandler by ZMQServer. 
<itemizedlist>
  <listitem>
    <para>BindingSCADataHandler calls the deserializeRequest() function of BindingHelpers. (BindingHelper is a generated file)</para>
  </listitem>
  <listitem>
    <para>BindingSCADataHandler serializes the response and sends it via network.</para>
  </listitem>
</itemizedlist> 
</para>
</section>
</section>
<section>	
	<title>Trentino IPC Binding</title>
	<section>
<title>Overview</title>
<para>
Inter-process communication (IPC) is a set of methods for the exchange of data among multiple threads in one or more processes. IPC methods are divided into methods for 
<itemizedlist>
  <listitem>
    <para>message queues,</para>
  </listitem>
  <listitem>
    <para>synchronization,</para>
  </listitem>
  <listitem>
    <para>shared memory, and</para>
  </listitem>
  <listitem>
    <para>remote procedure calls (RPC).</para>
  </listitem>
</itemizedlist> 
RPC is not in the scope of this binding type. Because other binding types (binding SCA, bacnet binding etc…) are kinds of RPC. Message queues and shared memory are our focus for IPC binding in Trentino. 
<sbr/><sbr/>
Each thread has its own private memory which is not accessible to other threads. Each thread may want to access a shared memory for fast communication. 
<sbr/><sbr/>
There can be more than one Trentino runtime running on the same computer. The reason why the end-user has 2 or more Trentinos running in the same computer is that customer may want to isolate services from each other. 
</para>
</section>
</section>
<section>
<title>Extending bindings in Trentino (using TIDL / IDL)</title>
<para>
Binding Framework is a set of interfaces, guidelines and documentation that enables a user not directly involved in Trentino development to extend Trentino with additional Bindings. Siemens develops the core and Trentino users are supposed to develop Bindings as needed. 
<sbr/><sbr/>
The goal for Binding Framework was to keep it as easy as possible to extend. Thus binding framework in Trentino is a generic module. Extending bindings requires:
<itemizedlist>
  <listitem>
    <para>New .xsd for new binding (in the SCDL part)
	<sbr/>For example: binding.ipc is not specified in SCA. A new xsd for the binding.ipc should be defined.
	</para>
  </listitem>
  <listitem>
    <para>Update the SCA model (model in Java part).
	<sbr/>For example: binding.ipc is not specified in SCA. So the new elements (like uri attribute for binding.ipc) should be added to the SCA Java model. 
	</para>
  </listitem>
  <listitem>
    <para>Changes should be reflected to SCAMirrorModel (in Java part) and SCA C++ model.</para>
  </listitem>
   <listitem>
    <para>Change the runtime model.</para>
  </listitem>
    <listitem>
    <para>Make the Binding Layer support the new binding (adapt the new Runtime model binding attributes etc...).</para>
  </listitem>
  <listitem>
    <para>New binding should be reflected to generated ModelLoader file. (in java part) </para>
  </listitem>
  <listitem>
    <para>Decide your TIDL for interfacing (it is explained in chapter-6).</para>
  </listitem>
  <listitem>
    <para>If serialization/deserialization between runtimes is needed, message passing format should be specified and related data converter structures should be generated. 
	For the conversion, BeanUtils (for both server and client side) generation should also be enabled.</para>
	<sbr/>For example: In binding.sca we used BeanUtils for converting c++ objects to protobuf objects and vice versa.
  </listitem>
  <listitem>
    <para>BindingProxy (for client side) and BindingHelpers(for server side) are obligatory classes. Contents may differ. They must be iplemented in every binding. They are the bridges between business logic code and Trentino runtime.</para>
  </listitem>
</itemizedlist> 
</para>
</section>
</chapter>