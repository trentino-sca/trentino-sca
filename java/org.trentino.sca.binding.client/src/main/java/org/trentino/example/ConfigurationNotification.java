/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.trentino.example;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConfigurationNotification {

  public interface Iface {

    public void notificationTriggered(UniqueID ID, Action what) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notificationTriggered(UniqueID ID, Action what, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.notificationTriggered_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void notificationTriggered(UniqueID ID, Action what) throws org.apache.thrift.TException
    {
      send_notificationTriggered(ID, what);
      recv_notificationTriggered();
    }

    public void send_notificationTriggered(UniqueID ID, Action what) throws org.apache.thrift.TException
    {
      notificationTriggered_args args = new notificationTriggered_args();
      args.setID(ID);
      args.setWhat(what);
      sendBase("notificationTriggered", args);
    }

    public void recv_notificationTriggered() throws org.apache.thrift.TException
    {
      notificationTriggered_result result = new notificationTriggered_result();
      receiveBase(result, "notificationTriggered");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notificationTriggered(UniqueID ID, Action what, org.apache.thrift.async.AsyncMethodCallback<notificationTriggered_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notificationTriggered_call method_call = new notificationTriggered_call(ID, what, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notificationTriggered_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UniqueID ID;
      private Action what;
      public notificationTriggered_call(UniqueID ID, Action what, org.apache.thrift.async.AsyncMethodCallback<notificationTriggered_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ID = ID;
        this.what = what;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notificationTriggered", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notificationTriggered_args args = new notificationTriggered_args();
        args.setID(ID);
        args.setWhat(what);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notificationTriggered();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notificationTriggered", new notificationTriggered());
      return processMap;
    }

    private static class notificationTriggered<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notificationTriggered_args> {
      public notificationTriggered() {
        super("notificationTriggered");
      }

      protected notificationTriggered_args getEmptyArgsInstance() {
        return new notificationTriggered_args();
      }

      protected notificationTriggered_result getResult(I iface, notificationTriggered_args args) throws org.apache.thrift.TException {
        notificationTriggered_result result = new notificationTriggered_result();
        iface.notificationTriggered(args.ID, args.what);
        return result;
      }
    }

  }

  public static class notificationTriggered_args implements org.apache.thrift.TBase<notificationTriggered_args, notificationTriggered_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notificationTriggered_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ID", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("what", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notificationTriggered_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notificationTriggered_argsTupleSchemeFactory());
    }

    public UniqueID ID; // required
    /**
     * 
     * @see Action
     */
    public Action what; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "ID"),
      /**
       * 
       * @see Action
       */
      WHAT((short)2, "what");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // WHAT
            return WHAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UniqueID.class)));
      tmpMap.put(_Fields.WHAT, new org.apache.thrift.meta_data.FieldMetaData("what", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Action.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notificationTriggered_args.class, metaDataMap);
    }

    public notificationTriggered_args() {
    }

    public notificationTriggered_args(
      UniqueID ID,
      Action what)
    {
      this();
      this.ID = ID;
      this.what = what;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notificationTriggered_args(notificationTriggered_args other) {
      if (other.isSetID()) {
        this.ID = new UniqueID(other.ID);
      }
      if (other.isSetWhat()) {
        this.what = other.what;
      }
    }

    public notificationTriggered_args deepCopy() {
      return new notificationTriggered_args(this);
    }

    @Override
    public void clear() {
      this.ID = null;
      this.what = null;
    }

    public UniqueID getID() {
      return this.ID;
    }

    public notificationTriggered_args setID(UniqueID ID) {
      this.ID = ID;
      return this;
    }

    public void unsetID() {
      this.ID = null;
    }

    /** Returns true if field ID is set (has been assigned a value) and false otherwise */
    public boolean isSetID() {
      return this.ID != null;
    }

    public void setIDIsSet(boolean value) {
      if (!value) {
        this.ID = null;
      }
    }

    /**
     * 
     * @see Action
     */
    public Action getWhat() {
      return this.what;
    }

    /**
     * 
     * @see Action
     */
    public notificationTriggered_args setWhat(Action what) {
      this.what = what;
      return this;
    }

    public void unsetWhat() {
      this.what = null;
    }

    /** Returns true if field what is set (has been assigned a value) and false otherwise */
    public boolean isSetWhat() {
      return this.what != null;
    }

    public void setWhatIsSet(boolean value) {
      if (!value) {
        this.what = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetID();
        } else {
          setID((UniqueID)value);
        }
        break;

      case WHAT:
        if (value == null) {
          unsetWhat();
        } else {
          setWhat((Action)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getID();

      case WHAT:
        return getWhat();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetID();
      case WHAT:
        return isSetWhat();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notificationTriggered_args)
        return this.equals((notificationTriggered_args)that);
      return false;
    }

    public boolean equals(notificationTriggered_args that) {
      if (that == null)
        return false;

      boolean this_present_ID = true && this.isSetID();
      boolean that_present_ID = true && that.isSetID();
      if (this_present_ID || that_present_ID) {
        if (!(this_present_ID && that_present_ID))
          return false;
        if (!this.ID.equals(that.ID))
          return false;
      }

      boolean this_present_what = true && this.isSetWhat();
      boolean that_present_what = true && that.isSetWhat();
      if (this_present_what || that_present_what) {
        if (!(this_present_what && that_present_what))
          return false;
        if (!this.what.equals(that.what))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notificationTriggered_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notificationTriggered_args typedOther = (notificationTriggered_args)other;

      lastComparison = Boolean.valueOf(isSetID()).compareTo(typedOther.isSetID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ID, typedOther.ID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhat()).compareTo(typedOther.isSetWhat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.what, typedOther.what);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notificationTriggered_args(");
      boolean first = true;

      sb.append("ID:");
      if (this.ID == null) {
        sb.append("null");
      } else {
        sb.append(this.ID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("what:");
      if (this.what == null) {
        sb.append("null");
      } else {
        sb.append(this.what);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notificationTriggered_argsStandardSchemeFactory implements SchemeFactory {
      public notificationTriggered_argsStandardScheme getScheme() {
        return new notificationTriggered_argsStandardScheme();
      }
    }

    private static class notificationTriggered_argsStandardScheme extends StandardScheme<notificationTriggered_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notificationTriggered_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ID = new UniqueID();
                struct.ID.read(iprot);
                struct.setIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WHAT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.what = Action.findByValue(iprot.readI32());
                struct.setWhatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notificationTriggered_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ID != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.ID.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.what != null) {
          oprot.writeFieldBegin(WHAT_FIELD_DESC);
          oprot.writeI32(struct.what.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notificationTriggered_argsTupleSchemeFactory implements SchemeFactory {
      public notificationTriggered_argsTupleScheme getScheme() {
        return new notificationTriggered_argsTupleScheme();
      }
    }

    private static class notificationTriggered_argsTupleScheme extends TupleScheme<notificationTriggered_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notificationTriggered_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetID()) {
          optionals.set(0);
        }
        if (struct.isSetWhat()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetID()) {
          struct.ID.write(oprot);
        }
        if (struct.isSetWhat()) {
          oprot.writeI32(struct.what.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notificationTriggered_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ID = new UniqueID();
          struct.ID.read(iprot);
          struct.setIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.what = Action.findByValue(iprot.readI32());
          struct.setWhatIsSet(true);
        }
      }
    }

  }

  public static class notificationTriggered_result implements org.apache.thrift.TBase<notificationTriggered_result, notificationTriggered_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notificationTriggered_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notificationTriggered_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notificationTriggered_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notificationTriggered_result.class, metaDataMap);
    }

    public notificationTriggered_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notificationTriggered_result(notificationTriggered_result other) {
    }

    public notificationTriggered_result deepCopy() {
      return new notificationTriggered_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notificationTriggered_result)
        return this.equals((notificationTriggered_result)that);
      return false;
    }

    public boolean equals(notificationTriggered_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(notificationTriggered_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      notificationTriggered_result typedOther = (notificationTriggered_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notificationTriggered_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notificationTriggered_resultStandardSchemeFactory implements SchemeFactory {
      public notificationTriggered_resultStandardScheme getScheme() {
        return new notificationTriggered_resultStandardScheme();
      }
    }

    private static class notificationTriggered_resultStandardScheme extends StandardScheme<notificationTriggered_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notificationTriggered_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notificationTriggered_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notificationTriggered_resultTupleSchemeFactory implements SchemeFactory {
      public notificationTriggered_resultTupleScheme getScheme() {
        return new notificationTriggered_resultTupleScheme();
      }
    }

    private static class notificationTriggered_resultTupleScheme extends TupleScheme<notificationTriggered_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notificationTriggered_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notificationTriggered_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
