// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "compact_soap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace compact_soap {

namespace {

const ::google::protobuf::Descriptor* Soap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_Fault_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_Fault_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_faultreason_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_faultreason_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_faultcode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_faultcode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_subcode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_subcode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Soap_Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Soap_Envelope_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Soap_faultcodeEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_compact_5fsoap_2eproto() {
  protobuf_AddDesc_compact_5fsoap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "compact_soap.proto");
  GOOGLE_CHECK(file != NULL);
  Soap_descriptor_ = file->message_type(0);
  static const int Soap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap, envelope_),
  };
  Soap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_descriptor_,
      Soap::default_instance_,
      Soap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap));
  Soap_Header_descriptor_ = Soap_descriptor_->nested_type(0);
  static const int Soap_Header_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Header, addressing_),
  };
  Soap_Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_Header_descriptor_,
      Soap_Header::default_instance_,
      Soap_Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_Header));
  Soap_Body_descriptor_ = Soap_descriptor_->nested_type(1);
  static const int Soap_Body_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Body, faultmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Body, content_),
  };
  Soap_Body_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_Body_descriptor_,
      Soap_Body::default_instance_,
      Soap_Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Body, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Body, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_Body));
  Soap_Fault_descriptor_ = Soap_descriptor_->nested_type(2);
  static const int Soap_Fault_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, detail_),
  };
  Soap_Fault_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_Fault_descriptor_,
      Soap_Fault::default_instance_,
      Soap_Fault_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Fault, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_Fault));
  Soap_faultreason_descriptor_ = Soap_descriptor_->nested_type(3);
  static const int Soap_faultreason_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultreason, text_),
  };
  Soap_faultreason_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_faultreason_descriptor_,
      Soap_faultreason::default_instance_,
      Soap_faultreason_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultreason, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultreason, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_faultreason));
  Soap_faultcode_descriptor_ = Soap_descriptor_->nested_type(4);
  static const int Soap_faultcode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultcode, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultcode, subcode_),
  };
  Soap_faultcode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_faultcode_descriptor_,
      Soap_faultcode::default_instance_,
      Soap_faultcode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultcode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_faultcode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_faultcode));
  Soap_subcode_descriptor_ = Soap_descriptor_->nested_type(5);
  static const int Soap_subcode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_subcode, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_subcode, subcode_),
  };
  Soap_subcode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_subcode_descriptor_,
      Soap_subcode::default_instance_,
      Soap_subcode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_subcode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_subcode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_subcode));
  Soap_Envelope_descriptor_ = Soap_descriptor_->nested_type(6);
  static const int Soap_Envelope_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Envelope, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Envelope, body_),
  };
  Soap_Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Soap_Envelope_descriptor_,
      Soap_Envelope::default_instance_,
      Soap_Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Soap_Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Soap_Envelope));
  Soap_faultcodeEnum_descriptor_ = Soap_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_compact_5fsoap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_descriptor_, &Soap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_Header_descriptor_, &Soap_Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_Body_descriptor_, &Soap_Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_Fault_descriptor_, &Soap_Fault::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_faultreason_descriptor_, &Soap_faultreason::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_faultcode_descriptor_, &Soap_faultcode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_subcode_descriptor_, &Soap_subcode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Soap_Envelope_descriptor_, &Soap_Envelope::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_compact_5fsoap_2eproto() {
  delete Soap::default_instance_;
  delete Soap_reflection_;
  delete Soap_Header::default_instance_;
  delete Soap_Header_reflection_;
  delete Soap_Body::default_instance_;
  delete Soap_Body_reflection_;
  delete Soap_Fault::default_instance_;
  delete Soap_Fault_reflection_;
  delete Soap_faultreason::default_instance_;
  delete Soap_faultreason_reflection_;
  delete Soap_faultcode::default_instance_;
  delete Soap_faultcode_reflection_;
  delete Soap_subcode::default_instance_;
  delete Soap_subcode_reflection_;
  delete Soap_Envelope::default_instance_;
  delete Soap_Envelope_reflection_;
}

void protobuf_AddDesc_compact_5fsoap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::compact_soap::protobuf_AddDesc_ws_5faddressing_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022compact_soap.proto\022\014compact_soap\032\023ws_a"
    "ddressing.proto\"\342\005\n\004Soap\022-\n\010envelope\030\001 \001"
    "(\0132\033.compact_soap.Soap.Envelope\0326\n\006Heade"
    "r\022,\n\naddressing\030\001 \001(\0132\030.compact_soap.Add"
    "ressing\032G\n\004Body\022.\n\014faultMessage\030\001 \001(\0132\030."
    "compact_soap.Soap.Fault\022\017\n\007content\030\002 \001(\014"
    "\032\217\001\n\005Fault\022*\n\004Code\030\001 \001(\0132\034.compact_soap."
    "Soap.faultcode\022.\n\006Reason\030\002 \001(\0132\036.compact"
    "_soap.Soap.faultreason\022\014\n\004Node\030\003 \001(\t\022\014\n\004"
    "Role\030\004 \001(\t\022\016\n\006Detail\030\005 \001(\014\032\033\n\013faultreaso"
    "n\022\014\n\004Text\030\001 \003(\t\032i\n\tfaultcode\022/\n\005Value\030\001 "
    "\001(\0162 .compact_soap.Soap.faultcodeEnum\022+\n"
    "\007Subcode\030\002 \001(\0132\032.compact_soap.Soap.subco"
    "de\032E\n\007subcode\022\r\n\005Value\030\001 \001(\t\022+\n\007Subcode\030"
    "\002 \001(\0132\032.compact_soap.Soap.subcode\032\\\n\010Env"
    "elope\022)\n\006header\030\001 \001(\0132\031.compact_soap.Soa"
    "p.Header\022%\n\004body\030\002 \001(\0132\027.compact_soap.So"
    "ap.Body\"k\n\rfaultcodeEnum\022\027\n\023DataEncoding"
    "Unknown\020\000\022\022\n\016MustUnderstand\020\001\022\014\n\010Receive"
    "r\020\002\022\n\n\006Sender\020\003\022\023\n\017VersionMismatch\020\004", 796);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "compact_soap.proto", &protobuf_RegisterTypes);
  Soap::default_instance_ = new Soap();
  Soap_Header::default_instance_ = new Soap_Header();
  Soap_Body::default_instance_ = new Soap_Body();
  Soap_Fault::default_instance_ = new Soap_Fault();
  Soap_faultreason::default_instance_ = new Soap_faultreason();
  Soap_faultcode::default_instance_ = new Soap_faultcode();
  Soap_subcode::default_instance_ = new Soap_subcode();
  Soap_Envelope::default_instance_ = new Soap_Envelope();
  Soap::default_instance_->InitAsDefaultInstance();
  Soap_Header::default_instance_->InitAsDefaultInstance();
  Soap_Body::default_instance_->InitAsDefaultInstance();
  Soap_Fault::default_instance_->InitAsDefaultInstance();
  Soap_faultreason::default_instance_->InitAsDefaultInstance();
  Soap_faultcode::default_instance_->InitAsDefaultInstance();
  Soap_subcode::default_instance_->InitAsDefaultInstance();
  Soap_Envelope::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_compact_5fsoap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_compact_5fsoap_2eproto {
  StaticDescriptorInitializer_compact_5fsoap_2eproto() {
    protobuf_AddDesc_compact_5fsoap_2eproto();
  }
} static_descriptor_initializer_compact_5fsoap_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Soap_faultcodeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_faultcodeEnum_descriptor_;
}
bool Soap_faultcodeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Soap_faultcodeEnum Soap::DataEncodingUnknown;
const Soap_faultcodeEnum Soap::MustUnderstand;
const Soap_faultcodeEnum Soap::Receiver;
const Soap_faultcodeEnum Soap::Sender;
const Soap_faultcodeEnum Soap::VersionMismatch;
const Soap_faultcodeEnum Soap::faultcodeEnum_MIN;
const Soap_faultcodeEnum Soap::faultcodeEnum_MAX;
const int Soap::faultcodeEnum_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Soap_Header::kAddressingFieldNumber;
#endif  // !_MSC_VER

Soap_Header::Soap_Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_Header::InitAsDefaultInstance() {
  addressing_ = const_cast< ::compact_soap::Addressing*>(&::compact_soap::Addressing::default_instance());
}

Soap_Header::Soap_Header(const Soap_Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Header::SharedCtor() {
  _cached_size_ = 0;
  addressing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Header::~Soap_Header() {
  SharedDtor();
}

void Soap_Header::SharedDtor() {
  if (this != default_instance_) {
    delete addressing_;
  }
}

void Soap_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_Header_descriptor_;
}

const Soap_Header& Soap_Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Header* Soap_Header::default_instance_ = NULL;

Soap_Header* Soap_Header::New() const {
  return new Soap_Header;
}

void Soap_Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_addressing()) {
      if (addressing_ != NULL) addressing_->::compact_soap::Addressing::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Addressing addressing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addressing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Addressing addressing = 1;
  if (has_addressing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->addressing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Addressing addressing = 1;
  if (has_addressing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->addressing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Addressing addressing = 1;
    if (has_addressing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addressing());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_Header::MergeFrom(const Soap_Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addressing()) {
      mutable_addressing()->::compact_soap::Addressing::MergeFrom(from.addressing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_Header::CopyFrom(const Soap_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Header::IsInitialized() const {
  
  return true;
}

void Soap_Header::Swap(Soap_Header* other) {
  if (other != this) {
    std::swap(addressing_, other->addressing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_Header_descriptor_;
  metadata.reflection = Soap_Header_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_Body::kFaultMessageFieldNumber;
const int Soap_Body::kContentFieldNumber;
#endif  // !_MSC_VER

Soap_Body::Soap_Body()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_Body::InitAsDefaultInstance() {
  faultmessage_ = const_cast< ::compact_soap::Soap_Fault*>(&::compact_soap::Soap_Fault::default_instance());
}

Soap_Body::Soap_Body(const Soap_Body& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Body::SharedCtor() {
  _cached_size_ = 0;
  faultmessage_ = NULL;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Body::~Soap_Body() {
  SharedDtor();
}

void Soap_Body::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete faultmessage_;
  }
}

void Soap_Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_Body_descriptor_;
}

const Soap_Body& Soap_Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Body* Soap_Body::default_instance_ = NULL;

Soap_Body* Soap_Body::New() const {
  return new Soap_Body;
}

void Soap_Body::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_faultmessage()) {
      if (faultmessage_ != NULL) faultmessage_->::compact_soap::Soap_Fault::Clear();
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Soap.Fault faultMessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faultmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Soap.Fault faultMessage = 1;
  if (has_faultmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faultmessage(), output);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_Body::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Soap.Fault faultMessage = 1;
  if (has_faultmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faultmessage(), target);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_Body::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Soap.Fault faultMessage = 1;
    if (has_faultmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faultmessage());
    }
    
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Body::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_Body* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_Body*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_Body::MergeFrom(const Soap_Body& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faultmessage()) {
      mutable_faultmessage()->::compact_soap::Soap_Fault::MergeFrom(from.faultmessage());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_Body::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_Body::CopyFrom(const Soap_Body& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Body::IsInitialized() const {
  
  return true;
}

void Soap_Body::Swap(Soap_Body* other) {
  if (other != this) {
    std::swap(faultmessage_, other->faultmessage_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_Body_descriptor_;
  metadata.reflection = Soap_Body_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_Fault::kCodeFieldNumber;
const int Soap_Fault::kReasonFieldNumber;
const int Soap_Fault::kNodeFieldNumber;
const int Soap_Fault::kRoleFieldNumber;
const int Soap_Fault::kDetailFieldNumber;
#endif  // !_MSC_VER

Soap_Fault::Soap_Fault()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_Fault::InitAsDefaultInstance() {
  code_ = const_cast< ::compact_soap::Soap_faultcode*>(&::compact_soap::Soap_faultcode::default_instance());
  reason_ = const_cast< ::compact_soap::Soap_faultreason*>(&::compact_soap::Soap_faultreason::default_instance());
}

Soap_Fault::Soap_Fault(const Soap_Fault& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Fault::SharedCtor() {
  _cached_size_ = 0;
  code_ = NULL;
  reason_ = NULL;
  node_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Fault::~Soap_Fault() {
  SharedDtor();
}

void Soap_Fault::SharedDtor() {
  if (node_ != &::google::protobuf::internal::kEmptyString) {
    delete node_;
  }
  if (role_ != &::google::protobuf::internal::kEmptyString) {
    delete role_;
  }
  if (detail_ != &::google::protobuf::internal::kEmptyString) {
    delete detail_;
  }
  if (this != default_instance_) {
    delete code_;
    delete reason_;
  }
}

void Soap_Fault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_Fault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_Fault_descriptor_;
}

const Soap_Fault& Soap_Fault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Fault* Soap_Fault::default_instance_ = NULL;

Soap_Fault* Soap_Fault::New() const {
  return new Soap_Fault;
}

void Soap_Fault::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != NULL) code_->::compact_soap::Soap_faultcode::Clear();
    }
    if (has_reason()) {
      if (reason_ != NULL) reason_->::compact_soap::Soap_faultreason::Clear();
    }
    if (has_node()) {
      if (node_ != &::google::protobuf::internal::kEmptyString) {
        node_->clear();
      }
    }
    if (has_role()) {
      if (role_ != &::google::protobuf::internal::kEmptyString) {
        role_->clear();
      }
    }
    if (has_detail()) {
      if (detail_ != &::google::protobuf::internal::kEmptyString) {
        detail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_Fault::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Soap.faultcode Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Reason;
        break;
      }
      
      // optional .compact_soap.Soap.faultreason Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reason()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Node;
        break;
      }
      
      // optional string Node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node().data(), this->node().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Role;
        break;
      }
      
      // optional string Role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role().data(), this->role().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Detail;
        break;
      }
      
      // optional bytes Detail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Fault::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Soap.faultcode Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->code(), output);
  }
  
  // optional .compact_soap.Soap.faultreason Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reason(), output);
  }
  
  // optional string Node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->node(), output);
  }
  
  // optional string Role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role(), output);
  }
  
  // optional bytes Detail = 5;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->detail(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_Fault::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Soap.faultcode Code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->code(), target);
  }
  
  // optional .compact_soap.Soap.faultreason Reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reason(), target);
  }
  
  // optional string Node = 3;
  if (has_node()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node().data(), this->node().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node(), target);
  }
  
  // optional string Role = 4;
  if (has_role()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role().data(), this->role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role(), target);
  }
  
  // optional bytes Detail = 5;
  if (has_detail()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->detail(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_Fault::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Soap.faultcode Code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->code());
    }
    
    // optional .compact_soap.Soap.faultreason Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reason());
    }
    
    // optional string Node = 3;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node());
    }
    
    // optional string Role = 4;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role());
    }
    
    // optional bytes Detail = 5;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->detail());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Fault::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_Fault* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_Fault*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_Fault::MergeFrom(const Soap_Fault& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      mutable_code()->::compact_soap::Soap_faultcode::MergeFrom(from.code());
    }
    if (from.has_reason()) {
      mutable_reason()->::compact_soap::Soap_faultreason::MergeFrom(from.reason());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_detail()) {
      set_detail(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_Fault::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_Fault::CopyFrom(const Soap_Fault& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Fault::IsInitialized() const {
  
  return true;
}

void Soap_Fault::Swap(Soap_Fault* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(reason_, other->reason_);
    std::swap(node_, other->node_);
    std::swap(role_, other->role_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_Fault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_Fault_descriptor_;
  metadata.reflection = Soap_Fault_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_faultreason::kTextFieldNumber;
#endif  // !_MSC_VER

Soap_faultreason::Soap_faultreason()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_faultreason::InitAsDefaultInstance() {
}

Soap_faultreason::Soap_faultreason(const Soap_faultreason& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_faultreason::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_faultreason::~Soap_faultreason() {
  SharedDtor();
}

void Soap_faultreason::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Soap_faultreason::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_faultreason::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_faultreason_descriptor_;
}

const Soap_faultreason& Soap_faultreason::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_faultreason* Soap_faultreason::default_instance_ = NULL;

Soap_faultreason* Soap_faultreason::New() const {
  return new Soap_faultreason;
}

void Soap_faultreason::Clear() {
  text_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_faultreason::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text(0).data(), this->text(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Text;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_faultreason::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Text = 1;
  for (int i = 0; i < this->text_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->text(i).data(), this->text(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_faultreason::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Text = 1;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text(i).data(), this->text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->text(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_faultreason::ByteSize() const {
  int total_size = 0;
  
  // repeated string Text = 1;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_faultreason::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_faultreason* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_faultreason*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_faultreason::MergeFrom(const Soap_faultreason& from) {
  GOOGLE_CHECK_NE(&from, this);
  text_.MergeFrom(from.text_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_faultreason::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_faultreason::CopyFrom(const Soap_faultreason& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_faultreason::IsInitialized() const {
  
  return true;
}

void Soap_faultreason::Swap(Soap_faultreason* other) {
  if (other != this) {
    text_.Swap(&other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_faultreason::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_faultreason_descriptor_;
  metadata.reflection = Soap_faultreason_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_faultcode::kValueFieldNumber;
const int Soap_faultcode::kSubcodeFieldNumber;
#endif  // !_MSC_VER

Soap_faultcode::Soap_faultcode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_faultcode::InitAsDefaultInstance() {
  subcode_ = const_cast< ::compact_soap::Soap_subcode*>(&::compact_soap::Soap_subcode::default_instance());
}

Soap_faultcode::Soap_faultcode(const Soap_faultcode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_faultcode::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  subcode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_faultcode::~Soap_faultcode() {
  SharedDtor();
}

void Soap_faultcode::SharedDtor() {
  if (this != default_instance_) {
    delete subcode_;
  }
}

void Soap_faultcode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_faultcode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_faultcode_descriptor_;
}

const Soap_faultcode& Soap_faultcode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_faultcode* Soap_faultcode::default_instance_ = NULL;

Soap_faultcode* Soap_faultcode::New() const {
  return new Soap_faultcode;
}

void Soap_faultcode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    if (has_subcode()) {
      if (subcode_ != NULL) subcode_->::compact_soap::Soap_subcode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_faultcode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Soap.faultcodeEnum Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::compact_soap::Soap_faultcodeEnum_IsValid(value)) {
            set_value(static_cast< ::compact_soap::Soap_faultcodeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Subcode;
        break;
      }
      
      // optional .compact_soap.Soap.subcode Subcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Subcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_faultcode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Soap.faultcodeEnum Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }
  
  // optional .compact_soap.Soap.subcode Subcode = 2;
  if (has_subcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_faultcode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Soap.faultcodeEnum Value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value(), target);
  }
  
  // optional .compact_soap.Soap.subcode Subcode = 2;
  if (has_subcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_faultcode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Soap.faultcodeEnum Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }
    
    // optional .compact_soap.Soap.subcode Subcode = 2;
    if (has_subcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_faultcode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_faultcode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_faultcode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_faultcode::MergeFrom(const Soap_faultcode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subcode()) {
      mutable_subcode()->::compact_soap::Soap_subcode::MergeFrom(from.subcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_faultcode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_faultcode::CopyFrom(const Soap_faultcode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_faultcode::IsInitialized() const {
  
  return true;
}

void Soap_faultcode::Swap(Soap_faultcode* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(subcode_, other->subcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_faultcode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_faultcode_descriptor_;
  metadata.reflection = Soap_faultcode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_subcode::kValueFieldNumber;
const int Soap_subcode::kSubcodeFieldNumber;
#endif  // !_MSC_VER

Soap_subcode::Soap_subcode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_subcode::InitAsDefaultInstance() {
  subcode_ = const_cast< ::compact_soap::Soap_subcode*>(&::compact_soap::Soap_subcode::default_instance());
}

Soap_subcode::Soap_subcode(const Soap_subcode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_subcode::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subcode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_subcode::~Soap_subcode() {
  SharedDtor();
}

void Soap_subcode::SharedDtor() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
    delete subcode_;
  }
}

void Soap_subcode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_subcode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_subcode_descriptor_;
}

const Soap_subcode& Soap_subcode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_subcode* Soap_subcode::default_instance_ = NULL;

Soap_subcode* Soap_subcode::New() const {
  return new Soap_subcode;
}

void Soap_subcode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_subcode()) {
      if (subcode_ != NULL) subcode_->::compact_soap::Soap_subcode::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_subcode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Subcode;
        break;
      }
      
      // optional .compact_soap.Soap.subcode Subcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Subcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_subcode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(), output);
  }
  
  // optional .compact_soap.Soap.subcode Subcode = 2;
  if (has_subcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_subcode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->value(), target);
  }
  
  // optional .compact_soap.Soap.subcode Subcode = 2;
  if (has_subcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_subcode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
    // optional .compact_soap.Soap.subcode Subcode = 2;
    if (has_subcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_subcode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_subcode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_subcode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_subcode::MergeFrom(const Soap_subcode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_subcode()) {
      mutable_subcode()->::compact_soap::Soap_subcode::MergeFrom(from.subcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_subcode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_subcode::CopyFrom(const Soap_subcode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_subcode::IsInitialized() const {
  
  return true;
}

void Soap_subcode::Swap(Soap_subcode* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(subcode_, other->subcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_subcode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_subcode_descriptor_;
  metadata.reflection = Soap_subcode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap_Envelope::kHeaderFieldNumber;
const int Soap_Envelope::kBodyFieldNumber;
#endif  // !_MSC_VER

Soap_Envelope::Soap_Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap_Envelope::InitAsDefaultInstance() {
  header_ = const_cast< ::compact_soap::Soap_Header*>(&::compact_soap::Soap_Header::default_instance());
  body_ = const_cast< ::compact_soap::Soap_Body*>(&::compact_soap::Soap_Body::default_instance());
}

Soap_Envelope::Soap_Envelope(const Soap_Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap_Envelope::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap_Envelope::~Soap_Envelope() {
  SharedDtor();
}

void Soap_Envelope::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void Soap_Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap_Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_Envelope_descriptor_;
}

const Soap_Envelope& Soap_Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap_Envelope* Soap_Envelope::default_instance_ = NULL;

Soap_Envelope* Soap_Envelope::New() const {
  return new Soap_Envelope;
}

void Soap_Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::compact_soap::Soap_Header::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::compact_soap::Soap_Body::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap_Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Soap.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }
      
      // optional .compact_soap.Soap.Body body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap_Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Soap.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional .compact_soap.Soap.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap_Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Soap.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional .compact_soap.Soap.Body body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap_Envelope::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Soap.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional .compact_soap.Soap.Body body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap_Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap_Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap_Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap_Envelope::MergeFrom(const Soap_Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::compact_soap::Soap_Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::compact_soap::Soap_Body::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap_Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap_Envelope::CopyFrom(const Soap_Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap_Envelope::IsInitialized() const {
  
  return true;
}

void Soap_Envelope::Swap(Soap_Envelope* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap_Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_Envelope_descriptor_;
  metadata.reflection = Soap_Envelope_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Soap::kEnvelopeFieldNumber;
#endif  // !_MSC_VER

Soap::Soap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Soap::InitAsDefaultInstance() {
  envelope_ = const_cast< ::compact_soap::Soap_Envelope*>(&::compact_soap::Soap_Envelope::default_instance());
}

Soap::Soap(const Soap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Soap::SharedCtor() {
  _cached_size_ = 0;
  envelope_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Soap::~Soap() {
  SharedDtor();
}

void Soap::SharedDtor() {
  if (this != default_instance_) {
    delete envelope_;
  }
}

void Soap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Soap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Soap_descriptor_;
}

const Soap& Soap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_compact_5fsoap_2eproto();  return *default_instance_;
}

Soap* Soap::default_instance_ = NULL;

Soap* Soap::New() const {
  return new Soap;
}

void Soap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_envelope()) {
      if (envelope_ != NULL) envelope_->::compact_soap::Soap_Envelope::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Soap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Soap.Envelope envelope = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_envelope()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Soap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Soap.Envelope envelope = 1;
  if (has_envelope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->envelope(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Soap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Soap.Envelope envelope = 1;
  if (has_envelope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->envelope(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Soap::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Soap.Envelope envelope = 1;
    if (has_envelope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->envelope());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Soap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Soap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Soap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Soap::MergeFrom(const Soap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_envelope()) {
      mutable_envelope()->::compact_soap::Soap_Envelope::MergeFrom(from.envelope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Soap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Soap::CopyFrom(const Soap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Soap::IsInitialized() const {
  
  return true;
}

void Soap::Swap(Soap* other) {
  if (other != this) {
    std::swap(envelope_, other->envelope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Soap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Soap_descriptor_;
  metadata.reflection = Soap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compact_soap

// @@protoc_insertion_point(global_scope)
