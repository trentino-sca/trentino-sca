// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compact_wsdl.proto

#ifndef PROTOBUF_compact_5fwsdl_2eproto__INCLUDED
#define PROTOBUF_compact_5fwsdl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace compact_soap {

// Internal implementation detail -- do not call these.
void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
void protobuf_AssignDesc_compact_5fwsdl_2eproto();
void protobuf_ShutdownFile_compact_5fwsdl_2eproto();

class WSDLType;
class WSDLType_typedesc;
class WSDLType_MessageRefType;
class WSDLType_MessageRefFaultType;
class WSDLType_InterfaceOperationType;
class WSDLType_InterfaceFaultType;
class WSDLType_InterfaceType;
class WSDLType_DescriptionType;

// ===================================================================

class BINDINGSCA_IMPORT_EXPORT WSDLType_typedesc : public ::google::protobuf::Message {
 public:
  WSDLType_typedesc();
  virtual ~WSDLType_typedesc();
  
  WSDLType_typedesc(const WSDLType_typedesc& from);
  
  inline WSDLType_typedesc& operator=(const WSDLType_typedesc& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_typedesc& default_instance();
  
  void Swap(WSDLType_typedesc* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_typedesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_typedesc& from);
  void MergeFrom(const WSDLType_typedesc& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string typename = 1;
  inline bool has_typename_() const;
  inline void clear_typename_();
  static const int kTypenameFieldNumber = 1;
  inline const ::std::string& typename_() const;
  inline void set_typename_(const ::std::string& value);
  inline void set_typename_(const char* value);
  inline void set_typename_(const char* value, size_t size);
  inline ::std::string* mutable_typename_();
  inline ::std::string* release_typename_();
  
  // optional string protobufmessage = 2;
  inline bool has_protobufmessage() const;
  inline void clear_protobufmessage();
  static const int kProtobufmessageFieldNumber = 2;
  inline const ::std::string& protobufmessage() const;
  inline void set_protobufmessage(const ::std::string& value);
  inline void set_protobufmessage(const char* value);
  inline void set_protobufmessage(const char* value, size_t size);
  inline ::std::string* mutable_protobufmessage();
  inline ::std::string* release_protobufmessage();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.typedesc)
 private:
  inline void set_has_typename_();
  inline void clear_has_typename_();
  inline void set_has_protobufmessage();
  inline void clear_has_protobufmessage();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* typename__;
  ::std::string* protobufmessage_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_typedesc* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType_MessageRefType : public ::google::protobuf::Message {
 public:
  WSDLType_MessageRefType();
  virtual ~WSDLType_MessageRefType();
  
  WSDLType_MessageRefType(const WSDLType_MessageRefType& from);
  
  inline WSDLType_MessageRefType& operator=(const WSDLType_MessageRefType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_MessageRefType& default_instance();
  
  void Swap(WSDLType_MessageRefType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_MessageRefType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_MessageRefType& from);
  void MergeFrom(const WSDLType_MessageRefType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string messageLabel = 1;
  inline bool has_messagelabel() const;
  inline void clear_messagelabel();
  static const int kMessageLabelFieldNumber = 1;
  inline const ::std::string& messagelabel() const;
  inline void set_messagelabel(const ::std::string& value);
  inline void set_messagelabel(const char* value);
  inline void set_messagelabel(const char* value, size_t size);
  inline ::std::string* mutable_messagelabel();
  inline ::std::string* release_messagelabel();
  
  // optional string typeRef = 2;
  inline bool has_typeref() const;
  inline void clear_typeref();
  static const int kTypeRefFieldNumber = 2;
  inline const ::std::string& typeref() const;
  inline void set_typeref(const ::std::string& value);
  inline void set_typeref(const char* value);
  inline void set_typeref(const char* value, size_t size);
  inline ::std::string* mutable_typeref();
  inline ::std::string* release_typeref();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.MessageRefType)
 private:
  inline void set_has_messagelabel();
  inline void clear_has_messagelabel();
  inline void set_has_typeref();
  inline void clear_has_typeref();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* messagelabel_;
  ::std::string* typeref_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_MessageRefType* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType_MessageRefFaultType : public ::google::protobuf::Message {
 public:
  WSDLType_MessageRefFaultType();
  virtual ~WSDLType_MessageRefFaultType();
  
  WSDLType_MessageRefFaultType(const WSDLType_MessageRefFaultType& from);
  
  inline WSDLType_MessageRefFaultType& operator=(const WSDLType_MessageRefFaultType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_MessageRefFaultType& default_instance();
  
  void Swap(WSDLType_MessageRefFaultType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_MessageRefFaultType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_MessageRefFaultType& from);
  void MergeFrom(const WSDLType_MessageRefFaultType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string messageLabel = 1;
  inline bool has_messagelabel() const;
  inline void clear_messagelabel();
  static const int kMessageLabelFieldNumber = 1;
  inline const ::std::string& messagelabel() const;
  inline void set_messagelabel(const ::std::string& value);
  inline void set_messagelabel(const char* value);
  inline void set_messagelabel(const char* value, size_t size);
  inline ::std::string* mutable_messagelabel();
  inline ::std::string* release_messagelabel();
  
  // optional string referencedFault = 2;
  inline bool has_referencedfault() const;
  inline void clear_referencedfault();
  static const int kReferencedFaultFieldNumber = 2;
  inline const ::std::string& referencedfault() const;
  inline void set_referencedfault(const ::std::string& value);
  inline void set_referencedfault(const char* value);
  inline void set_referencedfault(const char* value, size_t size);
  inline ::std::string* mutable_referencedfault();
  inline ::std::string* release_referencedfault();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.MessageRefFaultType)
 private:
  inline void set_has_messagelabel();
  inline void clear_has_messagelabel();
  inline void set_has_referencedfault();
  inline void clear_has_referencedfault();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* messagelabel_;
  ::std::string* referencedfault_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_MessageRefFaultType* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType_InterfaceOperationType : public ::google::protobuf::Message {
 public:
  WSDLType_InterfaceOperationType();
  virtual ~WSDLType_InterfaceOperationType();
  
  WSDLType_InterfaceOperationType(const WSDLType_InterfaceOperationType& from);
  
  inline WSDLType_InterfaceOperationType& operator=(const WSDLType_InterfaceOperationType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_InterfaceOperationType& default_instance();
  
  void Swap(WSDLType_InterfaceOperationType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_InterfaceOperationType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_InterfaceOperationType& from);
  void MergeFrom(const WSDLType_InterfaceOperationType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .compact_soap.WSDLType.MessageRefType input = 1;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline const ::compact_soap::WSDLType_MessageRefType& input(int index) const;
  inline ::compact_soap::WSDLType_MessageRefType* mutable_input(int index);
  inline ::compact_soap::WSDLType_MessageRefType* add_input();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >&
      input() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >*
      mutable_input();
  
  // repeated .compact_soap.WSDLType.MessageRefType output = 2;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 2;
  inline const ::compact_soap::WSDLType_MessageRefType& output(int index) const;
  inline ::compact_soap::WSDLType_MessageRefType* mutable_output(int index);
  inline ::compact_soap::WSDLType_MessageRefType* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >*
      mutable_output();
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType infault = 3;
  inline int infault_size() const;
  inline void clear_infault();
  static const int kInfaultFieldNumber = 3;
  inline const ::compact_soap::WSDLType_MessageRefFaultType& infault(int index) const;
  inline ::compact_soap::WSDLType_MessageRefFaultType* mutable_infault(int index);
  inline ::compact_soap::WSDLType_MessageRefFaultType* add_infault();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >&
      infault() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >*
      mutable_infault();
  
  // repeated .compact_soap.WSDLType.MessageRefFaultType outfault = 4;
  inline int outfault_size() const;
  inline void clear_outfault();
  static const int kOutfaultFieldNumber = 4;
  inline const ::compact_soap::WSDLType_MessageRefFaultType& outfault(int index) const;
  inline ::compact_soap::WSDLType_MessageRefFaultType* mutable_outfault(int index);
  inline ::compact_soap::WSDLType_MessageRefFaultType* add_outfault();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >&
      outfault() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >*
      mutable_outfault();
  
  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string pattern = 6;
  inline bool has_pattern() const;
  inline void clear_pattern();
  static const int kPatternFieldNumber = 6;
  inline const ::std::string& pattern() const;
  inline void set_pattern(const ::std::string& value);
  inline void set_pattern(const char* value);
  inline void set_pattern(const char* value, size_t size);
  inline ::std::string* mutable_pattern();
  inline ::std::string* release_pattern();
  
  // optional string style = 7;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 7;
  inline const ::std::string& style() const;
  inline void set_style(const ::std::string& value);
  inline void set_style(const char* value);
  inline void set_style(const char* value, size_t size);
  inline ::std::string* mutable_style();
  inline ::std::string* release_style();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.InterfaceOperationType)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pattern();
  inline void clear_has_pattern();
  inline void set_has_style();
  inline void clear_has_style();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType > input_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType > output_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType > infault_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType > outfault_;
  ::std::string* name_;
  ::std::string* pattern_;
  ::std::string* style_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_InterfaceOperationType* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType_InterfaceFaultType : public ::google::protobuf::Message {
 public:
  WSDLType_InterfaceFaultType();
  virtual ~WSDLType_InterfaceFaultType();
  
  WSDLType_InterfaceFaultType(const WSDLType_InterfaceFaultType& from);
  
  inline WSDLType_InterfaceFaultType& operator=(const WSDLType_InterfaceFaultType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_InterfaceFaultType& default_instance();
  
  void Swap(WSDLType_InterfaceFaultType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_InterfaceFaultType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_InterfaceFaultType& from);
  void MergeFrom(const WSDLType_InterfaceFaultType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string typeRef = 2;
  inline bool has_typeref() const;
  inline void clear_typeref();
  static const int kTypeRefFieldNumber = 2;
  inline const ::std::string& typeref() const;
  inline void set_typeref(const ::std::string& value);
  inline void set_typeref(const char* value);
  inline void set_typeref(const char* value, size_t size);
  inline ::std::string* mutable_typeref();
  inline ::std::string* release_typeref();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.InterfaceFaultType)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_typeref();
  inline void clear_has_typeref();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* typeref_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_InterfaceFaultType* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType_InterfaceType : public ::google::protobuf::Message {
 public:
  WSDLType_InterfaceType();
  virtual ~WSDLType_InterfaceType();
  
  WSDLType_InterfaceType(const WSDLType_InterfaceType& from);
  
  inline WSDLType_InterfaceType& operator=(const WSDLType_InterfaceType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_InterfaceType& default_instance();
  
  void Swap(WSDLType_InterfaceType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_InterfaceType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_InterfaceType& from);
  void MergeFrom(const WSDLType_InterfaceType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string documentation = 1;
  inline bool has_documentation() const;
  inline void clear_documentation();
  static const int kDocumentationFieldNumber = 1;
  inline const ::std::string& documentation() const;
  inline void set_documentation(const ::std::string& value);
  inline void set_documentation(const char* value);
  inline void set_documentation(const char* value, size_t size);
  inline ::std::string* mutable_documentation();
  inline ::std::string* release_documentation();
  
  // repeated .compact_soap.WSDLType.InterfaceOperationType operations = 2;
  inline int operations_size() const;
  inline void clear_operations();
  static const int kOperationsFieldNumber = 2;
  inline const ::compact_soap::WSDLType_InterfaceOperationType& operations(int index) const;
  inline ::compact_soap::WSDLType_InterfaceOperationType* mutable_operations(int index);
  inline ::compact_soap::WSDLType_InterfaceOperationType* add_operations();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceOperationType >&
      operations() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceOperationType >*
      mutable_operations();
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string styleDefault = 4;
  inline bool has_styledefault() const;
  inline void clear_styledefault();
  static const int kStyleDefaultFieldNumber = 4;
  inline const ::std::string& styledefault() const;
  inline void set_styledefault(const ::std::string& value);
  inline void set_styledefault(const char* value);
  inline void set_styledefault(const char* value, size_t size);
  inline ::std::string* mutable_styledefault();
  inline ::std::string* release_styledefault();
  
  // repeated .compact_soap.WSDLType.InterfaceFaultType faults = 5;
  inline int faults_size() const;
  inline void clear_faults();
  static const int kFaultsFieldNumber = 5;
  inline const ::compact_soap::WSDLType_InterfaceFaultType& faults(int index) const;
  inline ::compact_soap::WSDLType_InterfaceFaultType* mutable_faults(int index);
  inline ::compact_soap::WSDLType_InterfaceFaultType* add_faults();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceFaultType >&
      faults() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceFaultType >*
      mutable_faults();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.InterfaceType)
 private:
  inline void set_has_documentation();
  inline void clear_has_documentation();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_styledefault();
  inline void clear_has_styledefault();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* documentation_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceOperationType > operations_;
  ::std::string* name_;
  ::std::string* styledefault_;
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceFaultType > faults_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_InterfaceType* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType_DescriptionType : public ::google::protobuf::Message {
 public:
  WSDLType_DescriptionType();
  virtual ~WSDLType_DescriptionType();
  
  WSDLType_DescriptionType(const WSDLType_DescriptionType& from);
  
  inline WSDLType_DescriptionType& operator=(const WSDLType_DescriptionType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType_DescriptionType& default_instance();
  
  void Swap(WSDLType_DescriptionType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType_DescriptionType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType_DescriptionType& from);
  void MergeFrom(const WSDLType_DescriptionType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .compact_soap.WSDLType.InterfaceType interfaces = 1;
  inline int interfaces_size() const;
  inline void clear_interfaces();
  static const int kInterfacesFieldNumber = 1;
  inline const ::compact_soap::WSDLType_InterfaceType& interfaces(int index) const;
  inline ::compact_soap::WSDLType_InterfaceType* mutable_interfaces(int index);
  inline ::compact_soap::WSDLType_InterfaceType* add_interfaces();
  inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceType >&
      interfaces() const;
  inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceType >*
      mutable_interfaces();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType.DescriptionType)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceType > interfaces_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType_DescriptionType* default_instance_;
};
// -------------------------------------------------------------------

class BINDINGSCA_IMPORT_EXPORT WSDLType : public ::google::protobuf::Message {
 public:
  WSDLType();
  virtual ~WSDLType();
  
  WSDLType(const WSDLType& from);
  
  inline WSDLType& operator=(const WSDLType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WSDLType& default_instance();
  
  void Swap(WSDLType* other);
  
  // implements Message ----------------------------------------------
  
  WSDLType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSDLType& from);
  void MergeFrom(const WSDLType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef WSDLType_typedesc typedesc;
  typedef WSDLType_MessageRefType MessageRefType;
  typedef WSDLType_MessageRefFaultType MessageRefFaultType;
  typedef WSDLType_InterfaceOperationType InterfaceOperationType;
  typedef WSDLType_InterfaceFaultType InterfaceFaultType;
  typedef WSDLType_InterfaceType InterfaceType;
  typedef WSDLType_DescriptionType DescriptionType;
  
  // accessors -------------------------------------------------------
  
  // optional string documentation = 1;
  inline bool has_documentation() const;
  inline void clear_documentation();
  static const int kDocumentationFieldNumber = 1;
  inline const ::std::string& documentation() const;
  inline void set_documentation(const ::std::string& value);
  inline void set_documentation(const char* value);
  inline void set_documentation(const char* value, size_t size);
  inline ::std::string* mutable_documentation();
  inline ::std::string* release_documentation();
  
  // optional .compact_soap.WSDLType.DescriptionType description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::compact_soap::WSDLType_DescriptionType& description() const;
  inline ::compact_soap::WSDLType_DescriptionType* mutable_description();
  inline ::compact_soap::WSDLType_DescriptionType* release_description();
  
  // @@protoc_insertion_point(class_scope:compact_soap.WSDLType)
 private:
  inline void set_has_documentation();
  inline void clear_has_documentation();
  inline void set_has_description();
  inline void clear_has_description();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* documentation_;
  ::compact_soap::WSDLType_DescriptionType* description_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void BINDINGSCA_IMPORT_EXPORT protobuf_AddDesc_compact_5fwsdl_2eproto();
  friend void protobuf_AssignDesc_compact_5fwsdl_2eproto();
  friend void protobuf_ShutdownFile_compact_5fwsdl_2eproto();
  
  void InitAsDefaultInstance();
  static WSDLType* default_instance_;
};
// ===================================================================


// ===================================================================

// WSDLType_typedesc

// required string typename = 1;
inline bool WSDLType_typedesc::has_typename_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSDLType_typedesc::set_has_typename_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSDLType_typedesc::clear_has_typename_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSDLType_typedesc::clear_typename_() {
  if (typename__ != &::google::protobuf::internal::kEmptyString) {
    typename__->clear();
  }
  clear_has_typename_();
}
inline const ::std::string& WSDLType_typedesc::typename_() const {
  return *typename__;
}
inline void WSDLType_typedesc::set_typename_(const ::std::string& value) {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  typename__->assign(value);
}
inline void WSDLType_typedesc::set_typename_(const char* value) {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  typename__->assign(value);
}
inline void WSDLType_typedesc::set_typename_(const char* value, size_t size) {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  typename__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_typedesc::mutable_typename_() {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  return typename__;
}
inline ::std::string* WSDLType_typedesc::release_typename_() {
  clear_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typename__;
    typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string protobufmessage = 2;
inline bool WSDLType_typedesc::has_protobufmessage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSDLType_typedesc::set_has_protobufmessage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSDLType_typedesc::clear_has_protobufmessage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSDLType_typedesc::clear_protobufmessage() {
  if (protobufmessage_ != &::google::protobuf::internal::kEmptyString) {
    protobufmessage_->clear();
  }
  clear_has_protobufmessage();
}
inline const ::std::string& WSDLType_typedesc::protobufmessage() const {
  return *protobufmessage_;
}
inline void WSDLType_typedesc::set_protobufmessage(const ::std::string& value) {
  set_has_protobufmessage();
  if (protobufmessage_ == &::google::protobuf::internal::kEmptyString) {
    protobufmessage_ = new ::std::string;
  }
  protobufmessage_->assign(value);
}
inline void WSDLType_typedesc::set_protobufmessage(const char* value) {
  set_has_protobufmessage();
  if (protobufmessage_ == &::google::protobuf::internal::kEmptyString) {
    protobufmessage_ = new ::std::string;
  }
  protobufmessage_->assign(value);
}
inline void WSDLType_typedesc::set_protobufmessage(const char* value, size_t size) {
  set_has_protobufmessage();
  if (protobufmessage_ == &::google::protobuf::internal::kEmptyString) {
    protobufmessage_ = new ::std::string;
  }
  protobufmessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_typedesc::mutable_protobufmessage() {
  set_has_protobufmessage();
  if (protobufmessage_ == &::google::protobuf::internal::kEmptyString) {
    protobufmessage_ = new ::std::string;
  }
  return protobufmessage_;
}
inline ::std::string* WSDLType_typedesc::release_protobufmessage() {
  clear_has_protobufmessage();
  if (protobufmessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = protobufmessage_;
    protobufmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WSDLType_MessageRefType

// optional string messageLabel = 1;
inline bool WSDLType_MessageRefType::has_messagelabel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSDLType_MessageRefType::set_has_messagelabel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSDLType_MessageRefType::clear_has_messagelabel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSDLType_MessageRefType::clear_messagelabel() {
  if (messagelabel_ != &::google::protobuf::internal::kEmptyString) {
    messagelabel_->clear();
  }
  clear_has_messagelabel();
}
inline const ::std::string& WSDLType_MessageRefType::messagelabel() const {
  return *messagelabel_;
}
inline void WSDLType_MessageRefType::set_messagelabel(const ::std::string& value) {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  messagelabel_->assign(value);
}
inline void WSDLType_MessageRefType::set_messagelabel(const char* value) {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  messagelabel_->assign(value);
}
inline void WSDLType_MessageRefType::set_messagelabel(const char* value, size_t size) {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  messagelabel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_MessageRefType::mutable_messagelabel() {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  return messagelabel_;
}
inline ::std::string* WSDLType_MessageRefType::release_messagelabel() {
  clear_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messagelabel_;
    messagelabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string typeRef = 2;
inline bool WSDLType_MessageRefType::has_typeref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSDLType_MessageRefType::set_has_typeref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSDLType_MessageRefType::clear_has_typeref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSDLType_MessageRefType::clear_typeref() {
  if (typeref_ != &::google::protobuf::internal::kEmptyString) {
    typeref_->clear();
  }
  clear_has_typeref();
}
inline const ::std::string& WSDLType_MessageRefType::typeref() const {
  return *typeref_;
}
inline void WSDLType_MessageRefType::set_typeref(const ::std::string& value) {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  typeref_->assign(value);
}
inline void WSDLType_MessageRefType::set_typeref(const char* value) {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  typeref_->assign(value);
}
inline void WSDLType_MessageRefType::set_typeref(const char* value, size_t size) {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  typeref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_MessageRefType::mutable_typeref() {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  return typeref_;
}
inline ::std::string* WSDLType_MessageRefType::release_typeref() {
  clear_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typeref_;
    typeref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WSDLType_MessageRefFaultType

// optional string messageLabel = 1;
inline bool WSDLType_MessageRefFaultType::has_messagelabel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSDLType_MessageRefFaultType::set_has_messagelabel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSDLType_MessageRefFaultType::clear_has_messagelabel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSDLType_MessageRefFaultType::clear_messagelabel() {
  if (messagelabel_ != &::google::protobuf::internal::kEmptyString) {
    messagelabel_->clear();
  }
  clear_has_messagelabel();
}
inline const ::std::string& WSDLType_MessageRefFaultType::messagelabel() const {
  return *messagelabel_;
}
inline void WSDLType_MessageRefFaultType::set_messagelabel(const ::std::string& value) {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  messagelabel_->assign(value);
}
inline void WSDLType_MessageRefFaultType::set_messagelabel(const char* value) {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  messagelabel_->assign(value);
}
inline void WSDLType_MessageRefFaultType::set_messagelabel(const char* value, size_t size) {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  messagelabel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_MessageRefFaultType::mutable_messagelabel() {
  set_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    messagelabel_ = new ::std::string;
  }
  return messagelabel_;
}
inline ::std::string* WSDLType_MessageRefFaultType::release_messagelabel() {
  clear_has_messagelabel();
  if (messagelabel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = messagelabel_;
    messagelabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string referencedFault = 2;
inline bool WSDLType_MessageRefFaultType::has_referencedfault() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSDLType_MessageRefFaultType::set_has_referencedfault() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSDLType_MessageRefFaultType::clear_has_referencedfault() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSDLType_MessageRefFaultType::clear_referencedfault() {
  if (referencedfault_ != &::google::protobuf::internal::kEmptyString) {
    referencedfault_->clear();
  }
  clear_has_referencedfault();
}
inline const ::std::string& WSDLType_MessageRefFaultType::referencedfault() const {
  return *referencedfault_;
}
inline void WSDLType_MessageRefFaultType::set_referencedfault(const ::std::string& value) {
  set_has_referencedfault();
  if (referencedfault_ == &::google::protobuf::internal::kEmptyString) {
    referencedfault_ = new ::std::string;
  }
  referencedfault_->assign(value);
}
inline void WSDLType_MessageRefFaultType::set_referencedfault(const char* value) {
  set_has_referencedfault();
  if (referencedfault_ == &::google::protobuf::internal::kEmptyString) {
    referencedfault_ = new ::std::string;
  }
  referencedfault_->assign(value);
}
inline void WSDLType_MessageRefFaultType::set_referencedfault(const char* value, size_t size) {
  set_has_referencedfault();
  if (referencedfault_ == &::google::protobuf::internal::kEmptyString) {
    referencedfault_ = new ::std::string;
  }
  referencedfault_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_MessageRefFaultType::mutable_referencedfault() {
  set_has_referencedfault();
  if (referencedfault_ == &::google::protobuf::internal::kEmptyString) {
    referencedfault_ = new ::std::string;
  }
  return referencedfault_;
}
inline ::std::string* WSDLType_MessageRefFaultType::release_referencedfault() {
  clear_has_referencedfault();
  if (referencedfault_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = referencedfault_;
    referencedfault_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WSDLType_InterfaceOperationType

// repeated .compact_soap.WSDLType.MessageRefType input = 1;
inline int WSDLType_InterfaceOperationType::input_size() const {
  return input_.size();
}
inline void WSDLType_InterfaceOperationType::clear_input() {
  input_.Clear();
}
inline const ::compact_soap::WSDLType_MessageRefType& WSDLType_InterfaceOperationType::input(int index) const {
  return input_.Get(index);
}
inline ::compact_soap::WSDLType_MessageRefType* WSDLType_InterfaceOperationType::mutable_input(int index) {
  return input_.Mutable(index);
}
inline ::compact_soap::WSDLType_MessageRefType* WSDLType_InterfaceOperationType::add_input() {
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >&
WSDLType_InterfaceOperationType::input() const {
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >*
WSDLType_InterfaceOperationType::mutable_input() {
  return &input_;
}

// repeated .compact_soap.WSDLType.MessageRefType output = 2;
inline int WSDLType_InterfaceOperationType::output_size() const {
  return output_.size();
}
inline void WSDLType_InterfaceOperationType::clear_output() {
  output_.Clear();
}
inline const ::compact_soap::WSDLType_MessageRefType& WSDLType_InterfaceOperationType::output(int index) const {
  return output_.Get(index);
}
inline ::compact_soap::WSDLType_MessageRefType* WSDLType_InterfaceOperationType::mutable_output(int index) {
  return output_.Mutable(index);
}
inline ::compact_soap::WSDLType_MessageRefType* WSDLType_InterfaceOperationType::add_output() {
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >&
WSDLType_InterfaceOperationType::output() const {
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefType >*
WSDLType_InterfaceOperationType::mutable_output() {
  return &output_;
}

// repeated .compact_soap.WSDLType.MessageRefFaultType infault = 3;
inline int WSDLType_InterfaceOperationType::infault_size() const {
  return infault_.size();
}
inline void WSDLType_InterfaceOperationType::clear_infault() {
  infault_.Clear();
}
inline const ::compact_soap::WSDLType_MessageRefFaultType& WSDLType_InterfaceOperationType::infault(int index) const {
  return infault_.Get(index);
}
inline ::compact_soap::WSDLType_MessageRefFaultType* WSDLType_InterfaceOperationType::mutable_infault(int index) {
  return infault_.Mutable(index);
}
inline ::compact_soap::WSDLType_MessageRefFaultType* WSDLType_InterfaceOperationType::add_infault() {
  return infault_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >&
WSDLType_InterfaceOperationType::infault() const {
  return infault_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >*
WSDLType_InterfaceOperationType::mutable_infault() {
  return &infault_;
}

// repeated .compact_soap.WSDLType.MessageRefFaultType outfault = 4;
inline int WSDLType_InterfaceOperationType::outfault_size() const {
  return outfault_.size();
}
inline void WSDLType_InterfaceOperationType::clear_outfault() {
  outfault_.Clear();
}
inline const ::compact_soap::WSDLType_MessageRefFaultType& WSDLType_InterfaceOperationType::outfault(int index) const {
  return outfault_.Get(index);
}
inline ::compact_soap::WSDLType_MessageRefFaultType* WSDLType_InterfaceOperationType::mutable_outfault(int index) {
  return outfault_.Mutable(index);
}
inline ::compact_soap::WSDLType_MessageRefFaultType* WSDLType_InterfaceOperationType::add_outfault() {
  return outfault_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >&
WSDLType_InterfaceOperationType::outfault() const {
  return outfault_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_MessageRefFaultType >*
WSDLType_InterfaceOperationType::mutable_outfault() {
  return &outfault_;
}

// optional string name = 5;
inline bool WSDLType_InterfaceOperationType::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WSDLType_InterfaceOperationType::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WSDLType_InterfaceOperationType::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WSDLType_InterfaceOperationType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WSDLType_InterfaceOperationType::name() const {
  return *name_;
}
inline void WSDLType_InterfaceOperationType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WSDLType_InterfaceOperationType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WSDLType_InterfaceOperationType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceOperationType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WSDLType_InterfaceOperationType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pattern = 6;
inline bool WSDLType_InterfaceOperationType::has_pattern() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WSDLType_InterfaceOperationType::set_has_pattern() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WSDLType_InterfaceOperationType::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WSDLType_InterfaceOperationType::clear_pattern() {
  if (pattern_ != &::google::protobuf::internal::kEmptyString) {
    pattern_->clear();
  }
  clear_has_pattern();
}
inline const ::std::string& WSDLType_InterfaceOperationType::pattern() const {
  return *pattern_;
}
inline void WSDLType_InterfaceOperationType::set_pattern(const ::std::string& value) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(value);
}
inline void WSDLType_InterfaceOperationType::set_pattern(const char* value) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(value);
}
inline void WSDLType_InterfaceOperationType::set_pattern(const char* value, size_t size) {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  pattern_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceOperationType::mutable_pattern() {
  set_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    pattern_ = new ::std::string;
  }
  return pattern_;
}
inline ::std::string* WSDLType_InterfaceOperationType::release_pattern() {
  clear_has_pattern();
  if (pattern_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pattern_;
    pattern_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string style = 7;
inline bool WSDLType_InterfaceOperationType::has_style() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WSDLType_InterfaceOperationType::set_has_style() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WSDLType_InterfaceOperationType::clear_has_style() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WSDLType_InterfaceOperationType::clear_style() {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    style_->clear();
  }
  clear_has_style();
}
inline const ::std::string& WSDLType_InterfaceOperationType::style() const {
  return *style_;
}
inline void WSDLType_InterfaceOperationType::set_style(const ::std::string& value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void WSDLType_InterfaceOperationType::set_style(const char* value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void WSDLType_InterfaceOperationType::set_style(const char* value, size_t size) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceOperationType::mutable_style() {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  return style_;
}
inline ::std::string* WSDLType_InterfaceOperationType::release_style() {
  clear_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = style_;
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WSDLType_InterfaceFaultType

// optional string name = 1;
inline bool WSDLType_InterfaceFaultType::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSDLType_InterfaceFaultType::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSDLType_InterfaceFaultType::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSDLType_InterfaceFaultType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WSDLType_InterfaceFaultType::name() const {
  return *name_;
}
inline void WSDLType_InterfaceFaultType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WSDLType_InterfaceFaultType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WSDLType_InterfaceFaultType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceFaultType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WSDLType_InterfaceFaultType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string typeRef = 2;
inline bool WSDLType_InterfaceFaultType::has_typeref() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSDLType_InterfaceFaultType::set_has_typeref() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSDLType_InterfaceFaultType::clear_has_typeref() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSDLType_InterfaceFaultType::clear_typeref() {
  if (typeref_ != &::google::protobuf::internal::kEmptyString) {
    typeref_->clear();
  }
  clear_has_typeref();
}
inline const ::std::string& WSDLType_InterfaceFaultType::typeref() const {
  return *typeref_;
}
inline void WSDLType_InterfaceFaultType::set_typeref(const ::std::string& value) {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  typeref_->assign(value);
}
inline void WSDLType_InterfaceFaultType::set_typeref(const char* value) {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  typeref_->assign(value);
}
inline void WSDLType_InterfaceFaultType::set_typeref(const char* value, size_t size) {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  typeref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceFaultType::mutable_typeref() {
  set_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    typeref_ = new ::std::string;
  }
  return typeref_;
}
inline ::std::string* WSDLType_InterfaceFaultType::release_typeref() {
  clear_has_typeref();
  if (typeref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typeref_;
    typeref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// WSDLType_InterfaceType

// optional string documentation = 1;
inline bool WSDLType_InterfaceType::has_documentation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSDLType_InterfaceType::set_has_documentation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSDLType_InterfaceType::clear_has_documentation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSDLType_InterfaceType::clear_documentation() {
  if (documentation_ != &::google::protobuf::internal::kEmptyString) {
    documentation_->clear();
  }
  clear_has_documentation();
}
inline const ::std::string& WSDLType_InterfaceType::documentation() const {
  return *documentation_;
}
inline void WSDLType_InterfaceType::set_documentation(const ::std::string& value) {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  documentation_->assign(value);
}
inline void WSDLType_InterfaceType::set_documentation(const char* value) {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  documentation_->assign(value);
}
inline void WSDLType_InterfaceType::set_documentation(const char* value, size_t size) {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  documentation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceType::mutable_documentation() {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  return documentation_;
}
inline ::std::string* WSDLType_InterfaceType::release_documentation() {
  clear_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentation_;
    documentation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .compact_soap.WSDLType.InterfaceOperationType operations = 2;
inline int WSDLType_InterfaceType::operations_size() const {
  return operations_.size();
}
inline void WSDLType_InterfaceType::clear_operations() {
  operations_.Clear();
}
inline const ::compact_soap::WSDLType_InterfaceOperationType& WSDLType_InterfaceType::operations(int index) const {
  return operations_.Get(index);
}
inline ::compact_soap::WSDLType_InterfaceOperationType* WSDLType_InterfaceType::mutable_operations(int index) {
  return operations_.Mutable(index);
}
inline ::compact_soap::WSDLType_InterfaceOperationType* WSDLType_InterfaceType::add_operations() {
  return operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceOperationType >&
WSDLType_InterfaceType::operations() const {
  return operations_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceOperationType >*
WSDLType_InterfaceType::mutable_operations() {
  return &operations_;
}

// required string name = 3;
inline bool WSDLType_InterfaceType::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSDLType_InterfaceType::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSDLType_InterfaceType::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSDLType_InterfaceType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WSDLType_InterfaceType::name() const {
  return *name_;
}
inline void WSDLType_InterfaceType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WSDLType_InterfaceType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WSDLType_InterfaceType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WSDLType_InterfaceType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string styleDefault = 4;
inline bool WSDLType_InterfaceType::has_styledefault() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WSDLType_InterfaceType::set_has_styledefault() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WSDLType_InterfaceType::clear_has_styledefault() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WSDLType_InterfaceType::clear_styledefault() {
  if (styledefault_ != &::google::protobuf::internal::kEmptyString) {
    styledefault_->clear();
  }
  clear_has_styledefault();
}
inline const ::std::string& WSDLType_InterfaceType::styledefault() const {
  return *styledefault_;
}
inline void WSDLType_InterfaceType::set_styledefault(const ::std::string& value) {
  set_has_styledefault();
  if (styledefault_ == &::google::protobuf::internal::kEmptyString) {
    styledefault_ = new ::std::string;
  }
  styledefault_->assign(value);
}
inline void WSDLType_InterfaceType::set_styledefault(const char* value) {
  set_has_styledefault();
  if (styledefault_ == &::google::protobuf::internal::kEmptyString) {
    styledefault_ = new ::std::string;
  }
  styledefault_->assign(value);
}
inline void WSDLType_InterfaceType::set_styledefault(const char* value, size_t size) {
  set_has_styledefault();
  if (styledefault_ == &::google::protobuf::internal::kEmptyString) {
    styledefault_ = new ::std::string;
  }
  styledefault_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType_InterfaceType::mutable_styledefault() {
  set_has_styledefault();
  if (styledefault_ == &::google::protobuf::internal::kEmptyString) {
    styledefault_ = new ::std::string;
  }
  return styledefault_;
}
inline ::std::string* WSDLType_InterfaceType::release_styledefault() {
  clear_has_styledefault();
  if (styledefault_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = styledefault_;
    styledefault_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .compact_soap.WSDLType.InterfaceFaultType faults = 5;
inline int WSDLType_InterfaceType::faults_size() const {
  return faults_.size();
}
inline void WSDLType_InterfaceType::clear_faults() {
  faults_.Clear();
}
inline const ::compact_soap::WSDLType_InterfaceFaultType& WSDLType_InterfaceType::faults(int index) const {
  return faults_.Get(index);
}
inline ::compact_soap::WSDLType_InterfaceFaultType* WSDLType_InterfaceType::mutable_faults(int index) {
  return faults_.Mutable(index);
}
inline ::compact_soap::WSDLType_InterfaceFaultType* WSDLType_InterfaceType::add_faults() {
  return faults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceFaultType >&
WSDLType_InterfaceType::faults() const {
  return faults_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceFaultType >*
WSDLType_InterfaceType::mutable_faults() {
  return &faults_;
}

// -------------------------------------------------------------------

// WSDLType_DescriptionType

// repeated .compact_soap.WSDLType.InterfaceType interfaces = 1;
inline int WSDLType_DescriptionType::interfaces_size() const {
  return interfaces_.size();
}
inline void WSDLType_DescriptionType::clear_interfaces() {
  interfaces_.Clear();
}
inline const ::compact_soap::WSDLType_InterfaceType& WSDLType_DescriptionType::interfaces(int index) const {
  return interfaces_.Get(index);
}
inline ::compact_soap::WSDLType_InterfaceType* WSDLType_DescriptionType::mutable_interfaces(int index) {
  return interfaces_.Mutable(index);
}
inline ::compact_soap::WSDLType_InterfaceType* WSDLType_DescriptionType::add_interfaces() {
  return interfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceType >&
WSDLType_DescriptionType::interfaces() const {
  return interfaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::compact_soap::WSDLType_InterfaceType >*
WSDLType_DescriptionType::mutable_interfaces() {
  return &interfaces_;
}

// -------------------------------------------------------------------

// WSDLType

// optional string documentation = 1;
inline bool WSDLType::has_documentation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSDLType::set_has_documentation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSDLType::clear_has_documentation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSDLType::clear_documentation() {
  if (documentation_ != &::google::protobuf::internal::kEmptyString) {
    documentation_->clear();
  }
  clear_has_documentation();
}
inline const ::std::string& WSDLType::documentation() const {
  return *documentation_;
}
inline void WSDLType::set_documentation(const ::std::string& value) {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  documentation_->assign(value);
}
inline void WSDLType::set_documentation(const char* value) {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  documentation_->assign(value);
}
inline void WSDLType::set_documentation(const char* value, size_t size) {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  documentation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSDLType::mutable_documentation() {
  set_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    documentation_ = new ::std::string;
  }
  return documentation_;
}
inline ::std::string* WSDLType::release_documentation() {
  clear_has_documentation();
  if (documentation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = documentation_;
    documentation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .compact_soap.WSDLType.DescriptionType description = 2;
inline bool WSDLType::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSDLType::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSDLType::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSDLType::clear_description() {
  if (description_ != NULL) description_->::compact_soap::WSDLType_DescriptionType::Clear();
  clear_has_description();
}
inline const ::compact_soap::WSDLType_DescriptionType& WSDLType::description() const {
  return description_ != NULL ? *description_ : *default_instance_->description_;
}
inline ::compact_soap::WSDLType_DescriptionType* WSDLType::mutable_description() {
  set_has_description();
  if (description_ == NULL) description_ = new ::compact_soap::WSDLType_DescriptionType;
  return description_;
}
inline ::compact_soap::WSDLType_DescriptionType* WSDLType::release_description() {
  clear_has_description();
  ::compact_soap::WSDLType_DescriptionType* temp = description_;
  description_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compact_soap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_compact_5fwsdl_2eproto__INCLUDED
