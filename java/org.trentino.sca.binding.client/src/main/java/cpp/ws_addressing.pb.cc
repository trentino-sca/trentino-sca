// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ws_addressing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace compact_soap {

namespace {

const ::google::protobuf::Descriptor* Addressing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Addressing_reflection_ = NULL;
const ::google::protobuf::Descriptor* Addressing_EndpointReferenceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Addressing_EndpointReferenceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Addressing_MultipleAny_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Addressing_MultipleAny_reflection_ = NULL;
const ::google::protobuf::Descriptor* Addressing_ServiceNameType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Addressing_ServiceNameType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ws_5faddressing_2eproto() {
  protobuf_AddDesc_ws_5faddressing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ws_addressing.proto");
  GOOGLE_CHECK(file != NULL);
  Addressing_descriptor_ = file->message_type(0);
  static const int Addressing_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, endpointreference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, replyto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, faultto_),
  };
  Addressing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Addressing_descriptor_,
      Addressing::default_instance_,
      Addressing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Addressing));
  Addressing_EndpointReferenceType_descriptor_ = Addressing_descriptor_->nested_type(0);
  static const int Addressing_EndpointReferenceType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, referenceproperties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, referenceparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, porttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, servicename_),
  };
  Addressing_EndpointReferenceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Addressing_EndpointReferenceType_descriptor_,
      Addressing_EndpointReferenceType::default_instance_,
      Addressing_EndpointReferenceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_EndpointReferenceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Addressing_EndpointReferenceType));
  Addressing_MultipleAny_descriptor_ = Addressing_descriptor_->nested_type(1);
  static const int Addressing_MultipleAny_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_MultipleAny, property_),
  };
  Addressing_MultipleAny_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Addressing_MultipleAny_descriptor_,
      Addressing_MultipleAny::default_instance_,
      Addressing_MultipleAny_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_MultipleAny, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_MultipleAny, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Addressing_MultipleAny));
  Addressing_ServiceNameType_descriptor_ = Addressing_descriptor_->nested_type(2);
  static const int Addressing_ServiceNameType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_ServiceNameType, portname_),
  };
  Addressing_ServiceNameType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Addressing_ServiceNameType_descriptor_,
      Addressing_ServiceNameType::default_instance_,
      Addressing_ServiceNameType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_ServiceNameType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Addressing_ServiceNameType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Addressing_ServiceNameType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ws_5faddressing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Addressing_descriptor_, &Addressing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Addressing_EndpointReferenceType_descriptor_, &Addressing_EndpointReferenceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Addressing_MultipleAny_descriptor_, &Addressing_MultipleAny::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Addressing_ServiceNameType_descriptor_, &Addressing_ServiceNameType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ws_5faddressing_2eproto() {
  delete Addressing::default_instance_;
  delete Addressing_reflection_;
  delete Addressing_EndpointReferenceType::default_instance_;
  delete Addressing_EndpointReferenceType_reflection_;
  delete Addressing_MultipleAny::default_instance_;
  delete Addressing_MultipleAny_reflection_;
  delete Addressing_ServiceNameType::default_instance_;
  delete Addressing_ServiceNameType_reflection_;
}

void protobuf_AddDesc_ws_5faddressing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ws_addressing.proto\022\014compact_soap\"\336\004\n\n"
    "Addressing\022I\n\021endpointReference\030\001 \001(\0132.."
    "compact_soap.Addressing.EndpointReferenc"
    "eType\022\021\n\tmessageID\030\002 \001(\t\022\n\n\002to\030\004 \001(\t\022\016\n\006"
    "action\030\005 \001(\t\022\014\n\004from\030\006 \001(\t\022\?\n\007replyTo\030\007 "
    "\001(\0132..compact_soap.Addressing.EndpointRe"
    "ferenceType\022\?\n\007faultTo\030\010 \001(\0132..compact_s"
    "oap.Addressing.EndpointReferenceType\032\377\001\n"
    "\025EndpointReferenceType\022\017\n\007address\030\001 \001(\t\022"
    "A\n\023referenceProperties\030\002 \001(\0132$.compact_s"
    "oap.Addressing.MultipleAny\022A\n\023referenceP"
    "arameters\030\003 \001(\0132$.compact_soap.Addressin"
    "g.MultipleAny\022\020\n\010portType\030\004 \001(\t\022=\n\013servi"
    "ceName\030\005 \001(\0132(.compact_soap.Addressing.S"
    "erviceNameType\032\037\n\013MultipleAny\022\020\n\010propert"
    "y\030\001 \003(\t\032#\n\017ServiceNameType\022\020\n\010portName\030\001"
    " \001(\t", 644);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ws_addressing.proto", &protobuf_RegisterTypes);
  Addressing::default_instance_ = new Addressing();
  Addressing_EndpointReferenceType::default_instance_ = new Addressing_EndpointReferenceType();
  Addressing_MultipleAny::default_instance_ = new Addressing_MultipleAny();
  Addressing_ServiceNameType::default_instance_ = new Addressing_ServiceNameType();
  Addressing::default_instance_->InitAsDefaultInstance();
  Addressing_EndpointReferenceType::default_instance_->InitAsDefaultInstance();
  Addressing_MultipleAny::default_instance_->InitAsDefaultInstance();
  Addressing_ServiceNameType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ws_5faddressing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ws_5faddressing_2eproto {
  StaticDescriptorInitializer_ws_5faddressing_2eproto() {
    protobuf_AddDesc_ws_5faddressing_2eproto();
  }
} static_descriptor_initializer_ws_5faddressing_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Addressing_EndpointReferenceType::kAddressFieldNumber;
const int Addressing_EndpointReferenceType::kReferencePropertiesFieldNumber;
const int Addressing_EndpointReferenceType::kReferenceParametersFieldNumber;
const int Addressing_EndpointReferenceType::kPortTypeFieldNumber;
const int Addressing_EndpointReferenceType::kServiceNameFieldNumber;
#endif  // !_MSC_VER

Addressing_EndpointReferenceType::Addressing_EndpointReferenceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Addressing_EndpointReferenceType::InitAsDefaultInstance() {
  referenceproperties_ = const_cast< ::compact_soap::Addressing_MultipleAny*>(&::compact_soap::Addressing_MultipleAny::default_instance());
  referenceparameters_ = const_cast< ::compact_soap::Addressing_MultipleAny*>(&::compact_soap::Addressing_MultipleAny::default_instance());
  servicename_ = const_cast< ::compact_soap::Addressing_ServiceNameType*>(&::compact_soap::Addressing_ServiceNameType::default_instance());
}

Addressing_EndpointReferenceType::Addressing_EndpointReferenceType(const Addressing_EndpointReferenceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Addressing_EndpointReferenceType::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  referenceproperties_ = NULL;
  referenceparameters_ = NULL;
  porttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servicename_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Addressing_EndpointReferenceType::~Addressing_EndpointReferenceType() {
  SharedDtor();
}

void Addressing_EndpointReferenceType::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (porttype_ != &::google::protobuf::internal::kEmptyString) {
    delete porttype_;
  }
  if (this != default_instance_) {
    delete referenceproperties_;
    delete referenceparameters_;
    delete servicename_;
  }
}

void Addressing_EndpointReferenceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Addressing_EndpointReferenceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Addressing_EndpointReferenceType_descriptor_;
}

const Addressing_EndpointReferenceType& Addressing_EndpointReferenceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5faddressing_2eproto();  return *default_instance_;
}

Addressing_EndpointReferenceType* Addressing_EndpointReferenceType::default_instance_ = NULL;

Addressing_EndpointReferenceType* Addressing_EndpointReferenceType::New() const {
  return new Addressing_EndpointReferenceType;
}

void Addressing_EndpointReferenceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_referenceproperties()) {
      if (referenceproperties_ != NULL) referenceproperties_->::compact_soap::Addressing_MultipleAny::Clear();
    }
    if (has_referenceparameters()) {
      if (referenceparameters_ != NULL) referenceparameters_->::compact_soap::Addressing_MultipleAny::Clear();
    }
    if (has_porttype()) {
      if (porttype_ != &::google::protobuf::internal::kEmptyString) {
        porttype_->clear();
      }
    }
    if (has_servicename()) {
      if (servicename_ != NULL) servicename_->::compact_soap::Addressing_ServiceNameType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Addressing_EndpointReferenceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_referenceProperties;
        break;
      }
      
      // optional .compact_soap.Addressing.MultipleAny referenceProperties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referenceProperties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referenceproperties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_referenceParameters;
        break;
      }
      
      // optional .compact_soap.Addressing.MultipleAny referenceParameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_referenceParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referenceparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_portType;
        break;
      }
      
      // optional string portType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_porttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->porttype().data(), this->porttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serviceName;
        break;
      }
      
      // optional .compact_soap.Addressing.ServiceNameType serviceName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servicename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Addressing_EndpointReferenceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }
  
  // optional .compact_soap.Addressing.MultipleAny referenceProperties = 2;
  if (has_referenceproperties()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->referenceproperties(), output);
  }
  
  // optional .compact_soap.Addressing.MultipleAny referenceParameters = 3;
  if (has_referenceparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->referenceparameters(), output);
  }
  
  // optional string portType = 4;
  if (has_porttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->porttype().data(), this->porttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->porttype(), output);
  }
  
  // optional .compact_soap.Addressing.ServiceNameType serviceName = 5;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->servicename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Addressing_EndpointReferenceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }
  
  // optional .compact_soap.Addressing.MultipleAny referenceProperties = 2;
  if (has_referenceproperties()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->referenceproperties(), target);
  }
  
  // optional .compact_soap.Addressing.MultipleAny referenceParameters = 3;
  if (has_referenceparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->referenceparameters(), target);
  }
  
  // optional string portType = 4;
  if (has_porttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->porttype().data(), this->porttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->porttype(), target);
  }
  
  // optional .compact_soap.Addressing.ServiceNameType serviceName = 5;
  if (has_servicename()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->servicename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Addressing_EndpointReferenceType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
    // optional .compact_soap.Addressing.MultipleAny referenceProperties = 2;
    if (has_referenceproperties()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referenceproperties());
    }
    
    // optional .compact_soap.Addressing.MultipleAny referenceParameters = 3;
    if (has_referenceparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referenceparameters());
    }
    
    // optional string portType = 4;
    if (has_porttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->porttype());
    }
    
    // optional .compact_soap.Addressing.ServiceNameType serviceName = 5;
    if (has_servicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servicename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Addressing_EndpointReferenceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Addressing_EndpointReferenceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Addressing_EndpointReferenceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Addressing_EndpointReferenceType::MergeFrom(const Addressing_EndpointReferenceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_referenceproperties()) {
      mutable_referenceproperties()->::compact_soap::Addressing_MultipleAny::MergeFrom(from.referenceproperties());
    }
    if (from.has_referenceparameters()) {
      mutable_referenceparameters()->::compact_soap::Addressing_MultipleAny::MergeFrom(from.referenceparameters());
    }
    if (from.has_porttype()) {
      set_porttype(from.porttype());
    }
    if (from.has_servicename()) {
      mutable_servicename()->::compact_soap::Addressing_ServiceNameType::MergeFrom(from.servicename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Addressing_EndpointReferenceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addressing_EndpointReferenceType::CopyFrom(const Addressing_EndpointReferenceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addressing_EndpointReferenceType::IsInitialized() const {
  
  return true;
}

void Addressing_EndpointReferenceType::Swap(Addressing_EndpointReferenceType* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(referenceproperties_, other->referenceproperties_);
    std::swap(referenceparameters_, other->referenceparameters_);
    std::swap(porttype_, other->porttype_);
    std::swap(servicename_, other->servicename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Addressing_EndpointReferenceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Addressing_EndpointReferenceType_descriptor_;
  metadata.reflection = Addressing_EndpointReferenceType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Addressing_MultipleAny::kPropertyFieldNumber;
#endif  // !_MSC_VER

Addressing_MultipleAny::Addressing_MultipleAny()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Addressing_MultipleAny::InitAsDefaultInstance() {
}

Addressing_MultipleAny::Addressing_MultipleAny(const Addressing_MultipleAny& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Addressing_MultipleAny::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Addressing_MultipleAny::~Addressing_MultipleAny() {
  SharedDtor();
}

void Addressing_MultipleAny::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Addressing_MultipleAny::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Addressing_MultipleAny::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Addressing_MultipleAny_descriptor_;
}

const Addressing_MultipleAny& Addressing_MultipleAny::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5faddressing_2eproto();  return *default_instance_;
}

Addressing_MultipleAny* Addressing_MultipleAny::default_instance_ = NULL;

Addressing_MultipleAny* Addressing_MultipleAny::New() const {
  return new Addressing_MultipleAny;
}

void Addressing_MultipleAny::Clear() {
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Addressing_MultipleAny::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string property = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_property()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->property(0).data(), this->property(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_property;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Addressing_MultipleAny::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string property = 1;
  for (int i = 0; i < this->property_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->property(i).data(), this->property(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->property(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Addressing_MultipleAny::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string property = 1;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->property(i).data(), this->property(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->property(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Addressing_MultipleAny::ByteSize() const {
  int total_size = 0;
  
  // repeated string property = 1;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->property(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Addressing_MultipleAny::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Addressing_MultipleAny* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Addressing_MultipleAny*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Addressing_MultipleAny::MergeFrom(const Addressing_MultipleAny& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Addressing_MultipleAny::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addressing_MultipleAny::CopyFrom(const Addressing_MultipleAny& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addressing_MultipleAny::IsInitialized() const {
  
  return true;
}

void Addressing_MultipleAny::Swap(Addressing_MultipleAny* other) {
  if (other != this) {
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Addressing_MultipleAny::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Addressing_MultipleAny_descriptor_;
  metadata.reflection = Addressing_MultipleAny_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Addressing_ServiceNameType::kPortNameFieldNumber;
#endif  // !_MSC_VER

Addressing_ServiceNameType::Addressing_ServiceNameType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Addressing_ServiceNameType::InitAsDefaultInstance() {
}

Addressing_ServiceNameType::Addressing_ServiceNameType(const Addressing_ServiceNameType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Addressing_ServiceNameType::SharedCtor() {
  _cached_size_ = 0;
  portname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Addressing_ServiceNameType::~Addressing_ServiceNameType() {
  SharedDtor();
}

void Addressing_ServiceNameType::SharedDtor() {
  if (portname_ != &::google::protobuf::internal::kEmptyString) {
    delete portname_;
  }
  if (this != default_instance_) {
  }
}

void Addressing_ServiceNameType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Addressing_ServiceNameType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Addressing_ServiceNameType_descriptor_;
}

const Addressing_ServiceNameType& Addressing_ServiceNameType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5faddressing_2eproto();  return *default_instance_;
}

Addressing_ServiceNameType* Addressing_ServiceNameType::default_instance_ = NULL;

Addressing_ServiceNameType* Addressing_ServiceNameType::New() const {
  return new Addressing_ServiceNameType;
}

void Addressing_ServiceNameType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_portname()) {
      if (portname_ != &::google::protobuf::internal::kEmptyString) {
        portname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Addressing_ServiceNameType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string portName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portname().data(), this->portname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Addressing_ServiceNameType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string portName = 1;
  if (has_portname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portname().data(), this->portname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->portname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Addressing_ServiceNameType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string portName = 1;
  if (has_portname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portname().data(), this->portname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->portname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Addressing_ServiceNameType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string portName = 1;
    if (has_portname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Addressing_ServiceNameType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Addressing_ServiceNameType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Addressing_ServiceNameType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Addressing_ServiceNameType::MergeFrom(const Addressing_ServiceNameType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_portname()) {
      set_portname(from.portname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Addressing_ServiceNameType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addressing_ServiceNameType::CopyFrom(const Addressing_ServiceNameType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addressing_ServiceNameType::IsInitialized() const {
  
  return true;
}

void Addressing_ServiceNameType::Swap(Addressing_ServiceNameType* other) {
  if (other != this) {
    std::swap(portname_, other->portname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Addressing_ServiceNameType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Addressing_ServiceNameType_descriptor_;
  metadata.reflection = Addressing_ServiceNameType_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Addressing::kEndpointReferenceFieldNumber;
const int Addressing::kMessageIDFieldNumber;
const int Addressing::kToFieldNumber;
const int Addressing::kActionFieldNumber;
const int Addressing::kFromFieldNumber;
const int Addressing::kReplyToFieldNumber;
const int Addressing::kFaultToFieldNumber;
#endif  // !_MSC_VER

Addressing::Addressing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Addressing::InitAsDefaultInstance() {
  endpointreference_ = const_cast< ::compact_soap::Addressing_EndpointReferenceType*>(&::compact_soap::Addressing_EndpointReferenceType::default_instance());
  replyto_ = const_cast< ::compact_soap::Addressing_EndpointReferenceType*>(&::compact_soap::Addressing_EndpointReferenceType::default_instance());
  faultto_ = const_cast< ::compact_soap::Addressing_EndpointReferenceType*>(&::compact_soap::Addressing_EndpointReferenceType::default_instance());
}

Addressing::Addressing(const Addressing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Addressing::SharedCtor() {
  _cached_size_ = 0;
  endpointreference_ = NULL;
  messageid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replyto_ = NULL;
  faultto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Addressing::~Addressing() {
  SharedDtor();
}

void Addressing::SharedDtor() {
  if (messageid_ != &::google::protobuf::internal::kEmptyString) {
    delete messageid_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (this != default_instance_) {
    delete endpointreference_;
    delete replyto_;
    delete faultto_;
  }
}

void Addressing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Addressing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Addressing_descriptor_;
}

const Addressing& Addressing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5faddressing_2eproto();  return *default_instance_;
}

Addressing* Addressing::default_instance_ = NULL;

Addressing* Addressing::New() const {
  return new Addressing;
}

void Addressing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_endpointreference()) {
      if (endpointreference_ != NULL) endpointreference_->::compact_soap::Addressing_EndpointReferenceType::Clear();
    }
    if (has_messageid()) {
      if (messageid_ != &::google::protobuf::internal::kEmptyString) {
        messageid_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_replyto()) {
      if (replyto_ != NULL) replyto_->::compact_soap::Addressing_EndpointReferenceType::Clear();
    }
    if (has_faultto()) {
      if (faultto_ != NULL) faultto_->::compact_soap::Addressing_EndpointReferenceType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Addressing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .compact_soap.Addressing.EndpointReferenceType endpointReference = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpointreference()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_messageID;
        break;
      }
      
      // optional string messageID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messageID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to;
        break;
      }
      
      // optional string to = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_action;
        break;
      }
      
      // optional string action = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_from;
        break;
      }
      
      // optional string from = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_replyTo;
        break;
      }
      
      // optional .compact_soap.Addressing.EndpointReferenceType replyTo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replyTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replyto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_faultTo;
        break;
      }
      
      // optional .compact_soap.Addressing.EndpointReferenceType faultTo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faultTo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faultto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Addressing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .compact_soap.Addressing.EndpointReferenceType endpointReference = 1;
  if (has_endpointreference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->endpointreference(), output);
  }
  
  // optional string messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->messageid(), output);
  }
  
  // optional string to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->to(), output);
  }
  
  // optional string action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->action(), output);
  }
  
  // optional string from = 6;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->from(), output);
  }
  
  // optional .compact_soap.Addressing.EndpointReferenceType replyTo = 7;
  if (has_replyto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->replyto(), output);
  }
  
  // optional .compact_soap.Addressing.EndpointReferenceType faultTo = 8;
  if (has_faultto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->faultto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Addressing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .compact_soap.Addressing.EndpointReferenceType endpointReference = 1;
  if (has_endpointreference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->endpointreference(), target);
  }
  
  // optional string messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->messageid(), target);
  }
  
  // optional string to = 4;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->to(), target);
  }
  
  // optional string action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->action(), target);
  }
  
  // optional string from = 6;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->from(), target);
  }
  
  // optional .compact_soap.Addressing.EndpointReferenceType replyTo = 7;
  if (has_replyto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->replyto(), target);
  }
  
  // optional .compact_soap.Addressing.EndpointReferenceType faultTo = 8;
  if (has_faultto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->faultto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Addressing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .compact_soap.Addressing.EndpointReferenceType endpointReference = 1;
    if (has_endpointreference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endpointreference());
    }
    
    // optional string messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messageid());
    }
    
    // optional string to = 4;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }
    
    // optional string action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }
    
    // optional string from = 6;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }
    
    // optional .compact_soap.Addressing.EndpointReferenceType replyTo = 7;
    if (has_replyto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replyto());
    }
    
    // optional .compact_soap.Addressing.EndpointReferenceType faultTo = 8;
    if (has_faultto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faultto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Addressing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Addressing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Addressing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Addressing::MergeFrom(const Addressing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endpointreference()) {
      mutable_endpointreference()->::compact_soap::Addressing_EndpointReferenceType::MergeFrom(from.endpointreference());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_replyto()) {
      mutable_replyto()->::compact_soap::Addressing_EndpointReferenceType::MergeFrom(from.replyto());
    }
    if (from.has_faultto()) {
      mutable_faultto()->::compact_soap::Addressing_EndpointReferenceType::MergeFrom(from.faultto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Addressing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Addressing::CopyFrom(const Addressing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Addressing::IsInitialized() const {
  
  return true;
}

void Addressing::Swap(Addressing* other) {
  if (other != this) {
    std::swap(endpointreference_, other->endpointreference_);
    std::swap(messageid_, other->messageid_);
    std::swap(to_, other->to_);
    std::swap(action_, other->action_);
    std::swap(from_, other->from_);
    std::swap(replyto_, other->replyto_);
    std::swap(faultto_, other->faultto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Addressing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Addressing_descriptor_;
  metadata.reflection = Addressing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace compact_soap

// @@protoc_insertion_point(global_scope)
