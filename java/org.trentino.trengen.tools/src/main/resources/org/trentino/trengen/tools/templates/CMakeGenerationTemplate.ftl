#**********************************************************************************
#generated by Trengen
#**********************************************************************************
<#assign generationProjectName = generationProjectName>
<#assign genProjectNameUpperCase = context.generationProjectNameUpperCase>
<#assign TRENTINO_RUNTIME_DIR = context.trentinoRuntimeDir>
<#assign DEFAULT_INSTALL_PATH = context.defaultInstallPath>
<#assign Contribution_Dir = context.contributionDir>
<#assign installDir = context.installDir>

cmake_minimum_required(VERSION 2.6)
project(${generationProjectName})

##############################################################################
# 								COMPILER OPTIONS  							 #
##############################################################################
if(MSVC)
	add_definitions(-DUNICODE -D_UNICODE)
	add_definitions(/W4)
#	add_definitions(/WX)
    add_definitions(/wd4251)
    add_definitions(/wd4275)
else()
	add_definitions(-Wall -pedantic)
endif()

##############################################################################
# 							VARS FOR BUILD TYPES							 #
##############################################################################
set(IS_BUILD_TYPE_DEBUG TRUE)
set(IS_BUILD_TYPE_RELEASE TRUE)

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE "Debug")
endif()

if(MSVC_IDE)
	list(FIND CMAKE_CONFIGURATION_TYPES Debug CONF_TYPE)
	if(CONF_TYPE EQUAL -1)
		set(IS_BUILD_TYPE_DEBUG FALSE)
	endif()

	list(FIND CMAKE_CONFIGURATION_TYPES Release CONF_TYPE)
	list(FIND CMAKE_CONFIGURATION_TYPES RelWithDebInfo CONF_TYPE2)
	list(FIND CMAKE_CONFIGURATION_TYPES MinSizeRel CONF_TYPE3)
	if(CONF_TYPE EQUAL -1 AND CONF_TYPE2 EQUAL -1 AND CONF_TYPE3 EQUAL -1  )
		set(IS_BUILD_TYPE_RELEASE FALSE)
	endif()
else()
	if(CMAKE_BUILD_TYPE STREQUAL "Debug")
		set(IS_BUILD_TYPE_RELEASE FALSE)
	else()
		set(IS_BUILD_TYPE_DEBUG FALSE)
	endif()
endif(MSVC_IDE)

##############################################################################
# 							   OUTPUT CONFIGURATION						     #
##############################################################################

set(EXECUTABLE_OUTPUT_PATH ${r"${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME}"})
set(LIBRARY_OUTPUT_PATH ${r"${CMAKE_BINARY_DIR}/build/${CMAKE_SYSTEM_PROCESSOR}${CMAKE_SYSTEM_NAME}"} )
set(Contribution_Dir ${Contribution_Dir})
set(Include_Dir ${Contribution_Dir})
set(TRENTINO_RUNTIME_DIR $ENV{TRENTINO_HOME})
set(TRENTINO_LIB_DIR ${"$"}{TRENTINO_RUNTIME_DIR}/lib)
set (DEFAULT_INSTALL_PATH ${DEFAULT_INSTALL_PATH})

if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   set (CMAKE_INSTALL_PREFIX ${DEFAULT_INSTALL_PATH} CACHE STRING "Install path" FORCE)
endif()

set(PName ${generationProjectName} )
<#assign PName ="$"+"{PName}" />
#header files
FILE(GLOB ${PName}HEADER_FILES *.h *.inl)	  

#source files
FILE(GLOB ${PName}SOURCE_FILES *.cpp)
<#foreach dir in context.externalDirs>
FILE(GLOB tmp ${dir}/*.cpp)
<#assign tmp="${" + PName + "SOURCE_FILES}"+" ${"+"tmp}">
SET(${PName}SOURCE_FILES ${tmp})
</#foreach>

<#assign x = "${" + PName + "HEADER_FILES}"+" ${" + PName + "SOURCE_FILES}">
set ( ${PName}SOURCE_FILES
	  ${x})  


	  
#libs
set( ${PName}THIRD_PARTY_LIBS
     TrentinoRuntime
     )
	 
set( ${PName}CUSTOM_LIBS )


if (WIN32)
	add_definitions(-D${genProjectNameUpperCase}_EXPORTS)
	add_definitions(-D_WIN32_WINNT=0x0502 -D_WINVER=0x0502)
endif()
<#assign denemet = "${">

set(${PName}_inc_dirs ${r"${TRENTINO_RUNTIME_DIR}/include
                      ${Contribution_Dir}  
                      ${Contribution_Dir}/services 
                      ${Contribution_Dir}/include"}
                    <#foreach includeDirElem in context.includeDirs>
                      ${includeDirElem} 
                     </#foreach> )
<#assign inc_dirs=denemet+denemet+"PName}_inc_dirs}"/>                     
include_directories(${inc_dirs})
set(${PName}_inc_dirs ${inc_dirs} PARENT_SCOPE)

set(${PName}_link_dirs ${r"${TRENTINO_RUNTIME_DIR}/lib  ${Contribution_Dir}/lib"}
                  <#foreach linkDir in context.linkDirectories> 
                   ${linkDir} 
                   </#foreach>)
<#assign link_dirs=denemet+denemet+"PName}_link_dirs}"/>
                     
link_directories(${link_dirs})
set(${PName}_link_dirs ${link_dirs} PARENT_SCOPE)
<#assign library = "${"+ PName + "SOURCE_FILES}">
add_library(${PName} SHARED ${library})
set_target_properties(${PName} PROPERTIES OUTPUT_NAME sca-contribution)

set(target_location "")
set(target_path "")
#set(target_file_name "")
get_target_property(target_location ${PName} LOCATION)

get_filename_component(target_path ${r"${target_location}"} PATH)
set(new_path ${r"${target_path}"}/${PName}/META-INF)
#get_filename_component(target_file_name ${r"${target_location}"}
add_custom_command( TARGET ${PName} POST_BUILD
					COMMAND  ${r"${CMAKE_COMMAND}"} -E make_directory ${r"${new_path}"}
					COMMAND ${r"${CMAKE_COMMAND}"} -E copy ${r"${target_location}"} ${r"${new_path}"} 
					VERBATIM)

<#assign customLibs = "${" +PName+"CUSTOM_LIBS}" >
<#assign tpLibs = "${" +PName+"THIRD_PARTY_LIBS}" >
target_link_libraries(${PName} ${customLibs})
target_link_libraries(${PName} ${tpLibs})

<#foreach libElem in context.libraries>
target_link_libraries(${PName} ${libElem})
</#foreach>
 
set(MY_GEN_INSTALL_DIR ${installDir})
install(TARGETS ${PName} ${r" ${DLL_TARGET_KIND} DESTINATION ${MY_GEN_INSTALL_DIR}/META-INF ARCHIVE DESTINATION ${TARGET_LIB_DIR}"})
install(FILES sca-contribution.conf DESTINATION ${r"${MY_GEN_INSTALL_DIR}"}/META-INF)